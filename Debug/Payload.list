
Payload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  0800d978  0800d978  0001d978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e534  0800e534  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e534  0800e534  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e534  0800e534  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e534  0800e534  0001e534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e538  0800e538  0001e538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800e53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028bc  200001fc  0800e738  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ab8  0800e738  00022ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165e3  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003567  00000000  00000000  0003680f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00039d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f195  00000000  00000000  0003c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b005  00000000  00000000  0005b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6b69  00000000  00000000  000767fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  0012d3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d960 	.word	0x0800d960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800d960 	.word	0x0800d960

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <I2C_Read_Register>:
unsigned short dig_T1, dig_P1;
signed short dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
float temperature, pressure, altitude, init_height;

uint8_t I2C_Read_Register(uint8_t device_adr, uint8_t internal_adr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buff[1];
	uint8_t rx_buff[1];

	tx_buff[0] = internal_adr;
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, 10000);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	f107 020c 	add.w	r2, r7, #12
 8000ca4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <I2C_Read_Register+0x50>)
 8000cae:	f003 ffb5 	bl	8004c1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, &rx_buff[0], 1, 10000);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b299      	uxth	r1, r3
 8000cba:	f107 0208 	add.w	r2, r7, #8
 8000cbe:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <I2C_Read_Register+0x50>)
 8000cc8:	f004 f89c 	bl	8004e04 <HAL_I2C_Master_Receive>


	return rx_buff[0];
 8000ccc:	7a3b      	ldrb	r3, [r7, #8]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000314 	.word	0x20000314

08000cdc <I2C_Write_Register>:

void I2C_Write_Register(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	71bb      	strb	r3, [r7, #6]
 8000cea:	4613      	mov	r3, r2
 8000cec:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 8000cf2:	797b      	ldrb	r3, [r7, #5]
 8000cf4:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, 2, 10000);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	b299      	uxth	r1, r3
 8000cfa:	f107 020c 	add.w	r2, r7, #12
 8000cfe:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2302      	movs	r3, #2
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <I2C_Write_Register+0x38>)
 8000d08:	f003 ff88 	bl	8004c1c <HAL_I2C_Master_Transmit>
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000314 	.word	0x20000314

08000d18 <BMP280_get_calib_values>:

void BMP280_get_calib_values(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af02      	add	r7, sp, #8
	uint8_t rx_buff[24], starting_address=0x88;
 8000d1e:	2388      	movs	r3, #136	; 0x88
 8000d20:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	21ee      	movs	r1, #238	; 0xee
 8000d2e:	4849      	ldr	r0, [pc, #292]	; (8000e54 <BMP280_get_calib_values+0x13c>)
 8000d30:	f003 ff74 	bl	8004c1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 24, 10000);
 8000d34:	f107 0208 	add.w	r2, r7, #8
 8000d38:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2318      	movs	r3, #24
 8000d40:	21ef      	movs	r1, #239	; 0xef
 8000d42:	4844      	ldr	r0, [pc, #272]	; (8000e54 <BMP280_get_calib_values+0x13c>)
 8000d44:	f004 f85e 	bl	8004e04 <HAL_I2C_Master_Receive>

	dig_T1=(rx_buff[0])+(rx_buff[1]<<8);
 8000d48:	7a3b      	ldrb	r3, [r7, #8]
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	7a7b      	ldrb	r3, [r7, #9]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <BMP280_get_calib_values+0x140>)
 8000d5a:	801a      	strh	r2, [r3, #0]
	dig_T2=(rx_buff[2])+(rx_buff[3]<<8);
 8000d5c:	7abb      	ldrb	r3, [r7, #10]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	7afb      	ldrb	r3, [r7, #11]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <BMP280_get_calib_values+0x144>)
 8000d70:	801a      	strh	r2, [r3, #0]
	dig_T3=(rx_buff[4])+(rx_buff[5]<<8);
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	7b7b      	ldrb	r3, [r7, #13]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <BMP280_get_calib_values+0x148>)
 8000d86:	801a      	strh	r2, [r3, #0]
	dig_P1=(rx_buff[6])+(rx_buff[7]<<8);
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4413      	add	r3, r2
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <BMP280_get_calib_values+0x14c>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	dig_P2=(rx_buff[8])+(rx_buff[9]<<8);
 8000d9c:	7c3b      	ldrb	r3, [r7, #16]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	7c7b      	ldrb	r3, [r7, #17]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <BMP280_get_calib_values+0x150>)
 8000db0:	801a      	strh	r2, [r3, #0]
	dig_P3=(rx_buff[10])+(rx_buff[11]<<8);
 8000db2:	7cbb      	ldrb	r3, [r7, #18]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	7cfb      	ldrb	r3, [r7, #19]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <BMP280_get_calib_values+0x154>)
 8000dc6:	801a      	strh	r2, [r3, #0]
	dig_P4=(rx_buff[12])+(rx_buff[13]<<8);
 8000dc8:	7d3b      	ldrb	r3, [r7, #20]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	7d7b      	ldrb	r3, [r7, #21]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <BMP280_get_calib_values+0x158>)
 8000ddc:	801a      	strh	r2, [r3, #0]
	dig_P5=(rx_buff[14])+(rx_buff[15]<<8);
 8000dde:	7dbb      	ldrb	r3, [r7, #22]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <BMP280_get_calib_values+0x15c>)
 8000df2:	801a      	strh	r2, [r3, #0]
	dig_P6=(rx_buff[16])+(rx_buff[17]<<8);
 8000df4:	7e3b      	ldrb	r3, [r7, #24]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	7e7b      	ldrb	r3, [r7, #25]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <BMP280_get_calib_values+0x160>)
 8000e08:	801a      	strh	r2, [r3, #0]
	dig_P7=(rx_buff[18])+(rx_buff[19]<<8);
 8000e0a:	7ebb      	ldrb	r3, [r7, #26]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	7efb      	ldrb	r3, [r7, #27]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <BMP280_get_calib_values+0x164>)
 8000e1e:	801a      	strh	r2, [r3, #0]
	dig_P8=(rx_buff[20])+(rx_buff[21]<<8);
 8000e20:	7f3b      	ldrb	r3, [r7, #28]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	7f7b      	ldrb	r3, [r7, #29]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <BMP280_get_calib_values+0x168>)
 8000e34:	801a      	strh	r2, [r3, #0]
	dig_P9=(rx_buff[22])+(rx_buff[23]<<8);
 8000e36:	7fbb      	ldrb	r3, [r7, #30]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	7ffb      	ldrb	r3, [r7, #31]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4413      	add	r3, r2
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <BMP280_get_calib_values+0x16c>)
 8000e4a:	801a      	strh	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000314 	.word	0x20000314
 8000e58:	20000220 	.word	0x20000220
 8000e5c:	20000224 	.word	0x20000224
 8000e60:	20000226 	.word	0x20000226
 8000e64:	20000222 	.word	0x20000222
 8000e68:	20000228 	.word	0x20000228
 8000e6c:	2000022a 	.word	0x2000022a
 8000e70:	2000022c 	.word	0x2000022c
 8000e74:	2000022e 	.word	0x2000022e
 8000e78:	20000230 	.word	0x20000230
 8000e7c:	20000232 	.word	0x20000232
 8000e80:	20000234 	.word	0x20000234
 8000e84:	20000236 	.word	0x20000236

08000e88 <BMP280_init>:

void BMP280_init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	I2C_Write_Register(BMP280_dev_address, 0xF5, 0b10010000);// standby time 500ms 100, filter 16 100, SPI DIS 00
 8000e8c:	2290      	movs	r2, #144	; 0x90
 8000e8e:	21f5      	movs	r1, #245	; 0xf5
 8000e90:	20ee      	movs	r0, #238	; 0xee
 8000e92:	f7ff ff23 	bl	8000cdc <I2C_Write_Register>
	I2C_Write_Register(BMP280_dev_address, 0xF4, 0b01010111);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8000e96:	2257      	movs	r2, #87	; 0x57
 8000e98:	21f4      	movs	r1, #244	; 0xf4
 8000e9a:	20ee      	movs	r0, #238	; 0xee
 8000e9c:	f7ff ff1e 	bl	8000cdc <I2C_Write_Register>

	BMP280_get_calib_values();
 8000ea0:	f7ff ff3a 	bl	8000d18 <BMP280_get_calib_values>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <BMP280_calc_values>:

void BMP280_calc_values(void)
{
 8000ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eac:	b094      	sub	sp, #80	; 0x50
 8000eae:	af02      	add	r7, sp, #8
	uint8_t status, rx_buff[6], starting_address=0xF7;
 8000eb0:	23f7      	movs	r3, #247	; 0xf7
 8000eb2:	77fb      	strb	r3, [r7, #31]

	do
	{
		status=I2C_Read_Register(BMP280_dev_address, 0xF3);
 8000eb4:	21f3      	movs	r1, #243	; 0xf3
 8000eb6:	20ee      	movs	r0, #238	; 0xee
 8000eb8:	f7ff fee6 	bl	8000c88 <I2C_Read_Register>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	} while(((status&0b00001000)==8)||((status&0b00000001)==1));
 8000ec2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f2      	bne.n	8000eb4 <BMP280_calc_values+0xc>
 8000ece:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1ec      	bne.n	8000eb4 <BMP280_calc_values+0xc>

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 8000eda:	f107 021f 	add.w	r2, r7, #31
 8000ede:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	21ee      	movs	r1, #238	; 0xee
 8000ee8:	48ce      	ldr	r0, [pc, #824]	; (8001224 <BMP280_calc_values+0x37c>)
 8000eea:	f003 fe97 	bl	8004c1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 6, 10000);
 8000eee:	f107 0220 	add.w	r2, r7, #32
 8000ef2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2306      	movs	r3, #6
 8000efa:	21ef      	movs	r1, #239	; 0xef
 8000efc:	48c9      	ldr	r0, [pc, #804]	; (8001224 <BMP280_calc_values+0x37c>)
 8000efe:	f003 ff81 	bl	8004e04 <HAL_I2C_Master_Receive>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 8000f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f06:	61bb      	str	r3, [r7, #24]
	temp[1]=rx_buff[4];
 8000f08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f0c:	617b      	str	r3, [r7, #20]
	temp[0]=rx_buff[5];
 8000f0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f12:	613b      	str	r3, [r7, #16]
	temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	031a      	lsls	r2, r3, #12
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	441a      	add	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	461a      	mov	r2, r3
 8000f26:	4bc0      	ldr	r3, [pc, #768]	; (8001228 <BMP280_calc_values+0x380>)
 8000f28:	601a      	str	r2, [r3, #0]

	temp[2]=rx_buff[0];
 8000f2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f2e:	61bb      	str	r3, [r7, #24]
	temp[1]=rx_buff[1];
 8000f30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f34:	617b      	str	r3, [r7, #20]
	temp[0]=rx_buff[2];
 8000f36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f3a:	613b      	str	r3, [r7, #16]
	pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	031a      	lsls	r2, r3, #12
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	441a      	add	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	4413      	add	r3, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4bb7      	ldr	r3, [pc, #732]	; (800122c <BMP280_calc_values+0x384>)
 8000f50:	601a      	str	r2, [r3, #0]

	double var1, var2;
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 8000f52:	4bb5      	ldr	r3, [pc, #724]	; (8001228 <BMP280_calc_values+0x380>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fae4 	bl	8000524 <__aeabi_i2d>
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4bb3      	ldr	r3, [pc, #716]	; (8001230 <BMP280_calc_values+0x388>)
 8000f62:	f7ff fc73 	bl	800084c <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4614      	mov	r4, r2
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	4bb1      	ldr	r3, [pc, #708]	; (8001234 <BMP280_calc_values+0x38c>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fac6 	bl	8000504 <__aeabi_ui2d>
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4bae      	ldr	r3, [pc, #696]	; (8001238 <BMP280_calc_values+0x390>)
 8000f7e:	f7ff fc65 	bl	800084c <__aeabi_ddiv>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4620      	mov	r0, r4
 8000f88:	4629      	mov	r1, r5
 8000f8a:	f7ff f97d 	bl	8000288 <__aeabi_dsub>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	461d      	mov	r5, r3
 8000f96:	4ba9      	ldr	r3, [pc, #676]	; (800123c <BMP280_calc_values+0x394>)
 8000f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fac1 	bl	8000524 <__aeabi_i2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	4629      	mov	r1, r5
 8000faa:	f7ff fb25 	bl	80005f8 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 8000fb6:	4b9c      	ldr	r3, [pc, #624]	; (8001228 <BMP280_calc_values+0x380>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fab2 	bl	8000524 <__aeabi_i2d>
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8000fc8:	f7ff fc40 	bl	800084c <__aeabi_ddiv>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4614      	mov	r4, r2
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	4b97      	ldr	r3, [pc, #604]	; (8001234 <BMP280_calc_values+0x38c>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa93 	bl	8000504 <__aeabi_ui2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b97      	ldr	r3, [pc, #604]	; (8001240 <BMP280_calc_values+0x398>)
 8000fe4:	f7ff fc32 	bl	800084c <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4620      	mov	r0, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	f7ff f94a 	bl	8000288 <__aeabi_dsub>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4614      	mov	r4, r2
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <BMP280_calc_values+0x380>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa8f 	bl	8000524 <__aeabi_i2d>
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800100e:	f7ff fc1d 	bl	800084c <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4690      	mov	r8, r2
 8001018:	4699      	mov	r9, r3
 800101a:	4b86      	ldr	r3, [pc, #536]	; (8001234 <BMP280_calc_values+0x38c>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa70 	bl	8000504 <__aeabi_ui2d>
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b85      	ldr	r3, [pc, #532]	; (8001240 <BMP280_calc_values+0x398>)
 800102a:	f7ff fc0f 	bl	800084c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4640      	mov	r0, r8
 8001034:	4649      	mov	r1, r9
 8001036:	f7ff f927 	bl	8000288 <__aeabi_dsub>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4620      	mov	r0, r4
 8001040:	4629      	mov	r1, r5
 8001042:	f7ff fad9 	bl	80005f8 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4614      	mov	r4, r2
 800104c:	461d      	mov	r5, r3
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <BMP280_calc_values+0x39c>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa65 	bl	8000524 <__aeabi_i2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff fac9 	bl	80005f8 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double t_fine = (int32_t)(var1+var2);
 800106e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001072:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001076:	f7ff f909 	bl	800028c <__adddf3>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd69 	bl	8000b58 <__aeabi_d2iz>
 8001086:	4603      	mov	r3, r0
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_i2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
volatile	float T = (var1+var2)/5120.0;
 8001096:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800109a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800109e:	f7ff f8f5 	bl	800028c <__adddf3>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b66      	ldr	r3, [pc, #408]	; (8001248 <BMP280_calc_values+0x3a0>)
 80010b0:	f7ff fbcc 	bl	800084c <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd94 	bl	8000be8 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]

	var1=((double)t_fine/2.0)-64000.0;
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010d0:	f7ff fbbc 	bl	800084c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b5a      	ldr	r3, [pc, #360]	; (800124c <BMP280_calc_values+0x3a4>)
 80010e2:	f7ff f8d1 	bl	8000288 <__aeabi_dsub>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=var1*var1*((double)dig_P6)/32768.0;
 80010ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80010f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <BMP280_calc_values+0x3a8>)
 8001104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa0b 	bl	8000524 <__aeabi_i2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff fa6f 	bl	80005f8 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <BMP280_calc_values+0x3ac>)
 8001128:	f7ff fb90 	bl	800084c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2=var2+var1*((double)dig_P5)*2.0;
 8001134:	4b48      	ldr	r3, [pc, #288]	; (8001258 <BMP280_calc_values+0x3b0>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f9f2 	bl	8000524 <__aeabi_i2d>
 8001140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001144:	f7ff fa58 	bl	80005f8 <__aeabi_dmul>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	f7ff f89a 	bl	800028c <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001160:	f7ff f894 	bl	800028c <__adddf3>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b3a      	ldr	r3, [pc, #232]	; (800125c <BMP280_calc_values+0x3b4>)
 8001172:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001176:	f7ff fb69 	bl	800084c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4614      	mov	r4, r2
 8001180:	461d      	mov	r5, r3
 8001182:	4b37      	ldr	r3, [pc, #220]	; (8001260 <BMP280_calc_values+0x3b8>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9cb 	bl	8000524 <__aeabi_i2d>
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <BMP280_calc_values+0x3bc>)
 8001194:	f7ff fa30 	bl	80005f8 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4620      	mov	r0, r4
 800119e:	4629      	mov	r1, r5
 80011a0:	f7ff f874 	bl	800028c <__adddf3>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <BMP280_calc_values+0x3c0>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9b6 	bl	8000524 <__aeabi_i2d>
 80011b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011bc:	f7ff fa1c 	bl	80005f8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <BMP280_calc_values+0x3c4>)
 80011de:	f7ff fb35 	bl	800084c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4614      	mov	r4, r2
 80011e8:	461d      	mov	r5, r3
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <BMP280_calc_values+0x3c8>)
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f997 	bl	8000524 <__aeabi_i2d>
 80011f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011fa:	f7ff f9fd 	bl	80005f8 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4620      	mov	r0, r4
 8001204:	4629      	mov	r1, r5
 8001206:	f7ff f841 	bl	800028c <__adddf3>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <BMP280_calc_values+0x3c4>)
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	e028      	b.n	8001274 <BMP280_calc_values+0x3cc>
 8001222:	bf00      	nop
 8001224:	20000314 	.word	0x20000314
 8001228:	20000218 	.word	0x20000218
 800122c:	2000021c 	.word	0x2000021c
 8001230:	40d00000 	.word	0x40d00000
 8001234:	20000220 	.word	0x20000220
 8001238:	40900000 	.word	0x40900000
 800123c:	20000224 	.word	0x20000224
 8001240:	40c00000 	.word	0x40c00000
 8001244:	20000226 	.word	0x20000226
 8001248:	40b40000 	.word	0x40b40000
 800124c:	40ef4000 	.word	0x40ef4000
 8001250:	20000230 	.word	0x20000230
 8001254:	40e00000 	.word	0x40e00000
 8001258:	2000022e 	.word	0x2000022e
 800125c:	40100000 	.word	0x40100000
 8001260:	2000022c 	.word	0x2000022c
 8001264:	40f00000 	.word	0x40f00000
 8001268:	2000022a 	.word	0x2000022a
 800126c:	41200000 	.word	0x41200000
 8001270:	20000228 	.word	0x20000228
 8001274:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var1=(1.0+var1/32768.0)*((double)dig_P1);
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <BMP280_calc_values+0x5f8>)
 800127e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001282:	f7ff fae3 	bl	800084c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b84      	ldr	r3, [pc, #528]	; (80014a4 <BMP280_calc_values+0x5fc>)
 8001294:	f7fe fffa 	bl	800028c <__adddf3>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	4b81      	ldr	r3, [pc, #516]	; (80014a8 <BMP280_calc_values+0x600>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f92d 	bl	8000504 <__aeabi_ui2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f9a1 	bl	80005f8 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
volatile	double p=1048576.0-(double)pressure_raw;
 80012be:	4b7b      	ldr	r3, [pc, #492]	; (80014ac <BMP280_calc_values+0x604>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f92e 	bl	8000524 <__aeabi_i2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	f04f 0000 	mov.w	r0, #0
 80012d0:	4977      	ldr	r1, [pc, #476]	; (80014b0 <BMP280_calc_values+0x608>)
 80012d2:	f7fe ffd9 	bl	8000288 <__aeabi_dsub>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	e9c7 2300 	strd	r2, r3, [r7]
	p=(p-(var2/4096.0))*6250.0/var1;
 80012de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <BMP280_calc_values+0x60c>)
 80012e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012ec:	f7ff faae 	bl	800084c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	f7fe ffc6 	bl	8000288 <__aeabi_dsub>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	a364      	add	r3, pc, #400	; (adr r3, 8001498 <BMP280_calc_values+0x5f0>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff f975 	bl	80005f8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800131a:	f7ff fa97 	bl	800084c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 2300 	strd	r2, r3, [r7]
	var1=((double)dig_P9)*p*p/2147483648.0;
 8001326:	4b64      	ldr	r3, [pc, #400]	; (80014b8 <BMP280_calc_values+0x610>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8f9 	bl	8000524 <__aeabi_i2d>
 8001332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001336:	f7ff f95f 	bl	80005f8 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001346:	f7ff f957 	bl	80005f8 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <BMP280_calc_values+0x614>)
 8001358:	f7ff fa78 	bl	800084c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=p*((double)dig_P8)/32768.0;
 8001364:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <BMP280_calc_values+0x618>)
 8001366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8da 	bl	8000524 <__aeabi_i2d>
 8001370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001374:	f7ff f940 	bl	80005f8 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <BMP280_calc_values+0x5f8>)
 8001386:	f7ff fa61 	bl	800084c <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	p=p+(var1+var2+((double)dig_P7))/16.0;
 8001392:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001396:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800139a:	f7fe ff77 	bl	800028c <__adddf3>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <BMP280_calc_values+0x61c>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8b9 	bl	8000524 <__aeabi_i2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4620      	mov	r0, r4
 80013b8:	4629      	mov	r1, r5
 80013ba:	f7fe ff67 	bl	800028c <__adddf3>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <BMP280_calc_values+0x620>)
 80013cc:	f7ff fa3e 	bl	800084c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013dc:	f7fe ff56 	bl	800028c <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	e9c7 2300 	strd	r2, r3, [r7]

	temperature=T;//celcius
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a38      	ldr	r2, [pc, #224]	; (80014cc <BMP280_calc_values+0x624>)
 80013ec:	6013      	str	r3, [r2, #0]
	pressure=p+1000;//pascals
 80013ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <BMP280_calc_values+0x628>)
 80013f8:	f7fe ff48 	bl	800028c <__adddf3>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fbf0 	bl	8000be8 <__aeabi_d2f>
 8001408:	4603      	mov	r3, r0
 800140a:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <BMP280_calc_values+0x62c>)
 800140c:	6013      	str	r3, [r2, #0]
	altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;	altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));//
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <BMP280_calc_values+0x62c>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eddf 6a30 	vldr	s13, [pc, #192]	; 80014d8 <BMP280_calc_values+0x630>
 8001418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800141c:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80014dc <BMP280_calc_values+0x634>
 8001420:	eeb0 0a47 	vmov.f32	s0, s14
 8001424:	f00b feca 	bl	800d1bc <powf>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001430:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <BMP280_calc_values+0x624>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80014e0 <BMP280_calc_values+0x638>
 800143e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001446:	eddf 6a27 	vldr	s13, [pc, #156]	; 80014e4 <BMP280_calc_values+0x63c>
 800144a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <BMP280_calc_values+0x640>)
 8001450:	edc3 7a00 	vstr	s15, [r3]
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <BMP280_calc_values+0x62c>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80014d8 <BMP280_calc_values+0x630>
 800145e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001462:	eddf 0a22 	vldr	s1, [pc, #136]	; 80014ec <BMP280_calc_values+0x644>
 8001466:	eeb0 0a47 	vmov.f32	s0, s14
 800146a:	f00b fea7 	bl	800d1bc <powf>
 800146e:	eef0 7a40 	vmov.f32	s15, s0
 8001472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80014f0 <BMP280_calc_values+0x648>
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <BMP280_calc_values+0x640>)
 8001484:	edc3 7a00 	vstr	s15, [r3]
}
 8001488:	bf00      	nop
 800148a:	3748      	adds	r7, #72	; 0x48
 800148c:	46bd      	mov	sp, r7
 800148e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	00000000 	.word	0x00000000
 800149c:	40b86a00 	.word	0x40b86a00
 80014a0:	40e00000 	.word	0x40e00000
 80014a4:	3ff00000 	.word	0x3ff00000
 80014a8:	20000222 	.word	0x20000222
 80014ac:	2000021c 	.word	0x2000021c
 80014b0:	41300000 	.word	0x41300000
 80014b4:	40b00000 	.word	0x40b00000
 80014b8:	20000236 	.word	0x20000236
 80014bc:	41e00000 	.word	0x41e00000
 80014c0:	20000234 	.word	0x20000234
 80014c4:	20000232 	.word	0x20000232
 80014c8:	40300000 	.word	0x40300000
 80014cc:	20000238 	.word	0x20000238
 80014d0:	408f4000 	.word	0x408f4000
 80014d4:	2000023c 	.word	0x2000023c
 80014d8:	47c5e680 	.word	0x47c5e680
 80014dc:	3e42c9b4 	.word	0x3e42c9b4
 80014e0:	43889333 	.word	0x43889333
 80014e4:	3bd4fdf4 	.word	0x3bd4fdf4
 80014e8:	20000240 	.word	0x20000240
 80014ec:	3e42dcae 	.word	0x3e42dcae
 80014f0:	472d2a00 	.word	0x472d2a00

080014f4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4619      	mov	r1, r3
 8001502:	2007      	movs	r0, #7
 8001504:	f000 f9ea 	bl	80018dc <bno055_writeData>
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <bno055_setOperationMode>:
    bno055_opmode_t mode;
    bno055_readData(BNO055_OPR_MODE, &mode, 1);
    return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
    bno055_writeData(BNO055_OPR_MODE, mode);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4619      	mov	r1, r3
 800151e:	203d      	movs	r0, #61	; 0x3d
 8001520:	f000 f9dc 	bl	80018dc <bno055_writeData>
    if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <bno055_setOperationMode+0x22>
        bno055_delay(19);
 800152a:	2013      	movs	r0, #19
 800152c:	f000 f9ca 	bl	80018c4 <bno055_delay>
    } else {
        bno055_delay(7);
    }
}
 8001530:	e002      	b.n	8001538 <bno055_setOperationMode+0x28>
        bno055_delay(7);
 8001532:	2007      	movs	r0, #7
 8001534:	f000 f9c6 	bl	80018c4 <bno055_delay>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff ffe3 	bl	8001510 <bno055_setOperationMode>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001552:	200c      	movs	r0, #12
 8001554:	f7ff ffdc 	bl	8001510 <bno055_setOperationMode>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001560:	2120      	movs	r1, #32
 8001562:	203f      	movs	r0, #63	; 0x3f
 8001564:	f000 f9ba 	bl	80018dc <bno055_writeData>
    bno055_delay(700);
 8001568:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800156c:	f000 f9aa 	bl	80018c4 <bno055_delay>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <bno055_setup>:
    uint8_t t;
    bno055_readData(BNO055_TEMP, &t, 1);
    return t;
}

void bno055_setup() {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    bno055_reset();
 800157a:	f7ff ffef 	bl	800155c <bno055_reset>

    uint8_t id = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	71fb      	strb	r3, [r7, #7]
    bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	2201      	movs	r2, #1
 8001586:	4619      	mov	r1, r3
 8001588:	2000      	movs	r0, #0
 800158a:	f000 fa93 	bl	8001ab4 <bno055_readData>
    if (id != BNO055_ID) {
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2ba0      	cmp	r3, #160	; 0xa0
 8001592:	d004      	beq.n	800159e <bno055_setup+0x2a>
        printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4619      	mov	r1, r3
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <bno055_setup+0x4c>)
 800159a:	f009 fb17 	bl	800abcc <iprintf>
    }
    bno055_setPage(0);
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ffa8 	bl	80014f4 <bno055_setPage>
    bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80015a4:	2100      	movs	r1, #0
 80015a6:	203f      	movs	r0, #63	; 0x3f
 80015a8:	f000 f998 	bl	80018dc <bno055_writeData>

    // Select BNO055 config mode
    bno055_setOperationModeConfig();
 80015ac:	f7ff ffc8 	bl	8001540 <bno055_setOperationModeConfig>
    bno055_delay(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f000 f987 	bl	80018c4 <bno055_delay>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	0800d978 	.word	0x0800d978

080015c4 <bno055_getVector>:
    }

    bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b093      	sub	sp, #76	; 0x4c
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	75fb      	strb	r3, [r7, #23]
    bno055_setPage(0);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff ff90 	bl	80014f4 <bno055_setPage>
    uint8_t buffer[8];    // Quaternion need 8 bytes

    if (vec == BNO055_VECTOR_QUATERNION)
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d107      	bne.n	80015ea <bno055_getVector+0x26>
        bno055_readData(vec, buffer, 8);
 80015da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	2208      	movs	r2, #8
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fa66 	bl	8001ab4 <bno055_readData>
 80015e8:	e006      	b.n	80015f8 <bno055_getVector+0x34>
    else
        bno055_readData(vec, buffer, 6);
 80015ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	2206      	movs	r2, #6
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fa5e 	bl	8001ab4 <bno055_readData>

    double scale = 1;
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <bno055_getVector+0x26c>)
 80015fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	2b0e      	cmp	r3, #14
 8001606:	d109      	bne.n	800161c <bno055_getVector+0x58>
        scale = magScale;
 8001608:	4b8a      	ldr	r3, [pc, #552]	; (8001834 <bno055_getVector+0x270>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff79 	bl	8000504 <__aeabi_ui2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800161a:	e038      	b.n	800168e <bno055_getVector+0xca>
    } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b08      	cmp	r3, #8
 8001620:	d005      	beq.n	800162e <bno055_getVector+0x6a>
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	2b28      	cmp	r3, #40	; 0x28
 8001626:	d002      	beq.n	800162e <bno055_getVector+0x6a>
               vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b2e      	cmp	r3, #46	; 0x2e
 800162c:	d109      	bne.n	8001642 <bno055_getVector+0x7e>
        scale = accelScale;
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <bno055_getVector+0x274>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff66 	bl	8000504 <__aeabi_ui2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001640:	e025      	b.n	800168e <bno055_getVector+0xca>
    } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	2b14      	cmp	r3, #20
 8001646:	d109      	bne.n	800165c <bno055_getVector+0x98>
        scale = angularRateScale;
 8001648:	4b7c      	ldr	r3, [pc, #496]	; (800183c <bno055_getVector+0x278>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff59 	bl	8000504 <__aeabi_ui2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800165a:	e018      	b.n	800168e <bno055_getVector+0xca>
    } else if (vec == BNO055_VECTOR_EULER) {
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b1a      	cmp	r3, #26
 8001660:	d109      	bne.n	8001676 <bno055_getVector+0xb2>
        scale = eulerScale;
 8001662:	4b77      	ldr	r3, [pc, #476]	; (8001840 <bno055_getVector+0x27c>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff4c 	bl	8000504 <__aeabi_ui2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001674:	e00b      	b.n	800168e <bno055_getVector+0xca>
    } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b20      	cmp	r3, #32
 800167a:	d108      	bne.n	800168e <bno055_getVector+0xca>
        scale = quaScale;
 800167c:	4b71      	ldr	r3, [pc, #452]	; (8001844 <bno055_getVector+0x280>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff3f 	bl	8000504 <__aeabi_ui2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800168e:	f107 0318 	add.w	r3, r7, #24
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
    if (vec == BNO055_VECTOR_QUATERNION) {
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d160      	bne.n	8001764 <bno055_getVector+0x1a0>
        xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80016a2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff35 	bl	8000524 <__aeabi_i2d>
 80016ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016be:	f7ff f8c5 	bl	800084c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa8d 	bl	8000be8 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	61bb      	str	r3, [r7, #24]
        xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80016d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff1d 	bl	8000524 <__aeabi_i2d>
 80016ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016ee:	f7ff f8ad 	bl	800084c <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	61fb      	str	r3, [r7, #28]
        xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001702:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b21b      	sxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff05 	bl	8000524 <__aeabi_i2d>
 800171a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800171e:	f7ff f895 	bl	800084c <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa5d 	bl	8000be8 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	623b      	str	r3, [r7, #32]
        xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b21a      	sxth	r2, r3
 800173a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800173e:	b21b      	sxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b21b      	sxth	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_i2d>
 800174a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800174e:	f7ff f87d 	bl	800084c <__aeabi_ddiv>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff fa45 	bl	8000be8 <__aeabi_d2f>
 800175e:	4603      	mov	r3, r0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	e047      	b.n	80017f4 <bno055_getVector+0x230>
    } else {
        xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001764:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b21a      	sxth	r2, r3
 800176c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21b      	sxth	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fed4 	bl	8000524 <__aeabi_i2d>
 800177c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001780:	f7ff f864 	bl	800084c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff fa2c 	bl	8000be8 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	61fb      	str	r3, [r7, #28]
        xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001794:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe febc 	bl	8000524 <__aeabi_i2d>
 80017ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017b0:	f7ff f84c 	bl	800084c <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fa14 	bl	8000be8 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	623b      	str	r3, [r7, #32]
        xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80017c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fea4 	bl	8000524 <__aeabi_i2d>
 80017dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017e0:	f7ff f834 	bl	800084c <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f9fc 	bl	8000be8 <__aeabi_d2f>
 80017f0:	4603      	mov	r3, r0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xyz;
 80017f4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800180a:	ee06 0a10 	vmov	s12, r0
 800180e:	ee06 1a90 	vmov	s13, r1
 8001812:	ee07 2a10 	vmov	s14, r2
 8001816:	ee07 3a90 	vmov	s15, r3
}
 800181a:	eeb0 0a46 	vmov.f32	s0, s12
 800181e:	eef0 0a66 	vmov.f32	s1, s13
 8001822:	eeb0 1a47 	vmov.f32	s2, s14
 8001826:	eef0 1a67 	vmov.f32	s3, s15
 800182a:	374c      	adds	r7, #76	; 0x4c
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	3ff00000 	.word	0x3ff00000
 8001834:	20000006 	.word	0x20000006
 8001838:	20000000 	.word	0x20000000
 800183c:	20000002 	.word	0x20000002
 8001840:	20000004 	.word	0x20000004
 8001844:	20000008 	.word	0x20000008

08001848 <bno055_getVectorLinearAccel>:
    return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
    return bno055_getVector(BNO055_VECTOR_EULER);
}
bno055_vector_t bno055_getVectorLinearAccel() {
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 800184e:	2028      	movs	r0, #40	; 0x28
 8001850:	f7ff feb8 	bl	80015c4 <bno055_getVector>
 8001854:	eeb0 6a40 	vmov.f32	s12, s0
 8001858:	eef0 6a60 	vmov.f32	s13, s1
 800185c:	eeb0 7a41 	vmov.f32	s14, s2
 8001860:	eef0 7a61 	vmov.f32	s15, s3
 8001864:	ed87 6a04 	vstr	s12, [r7, #16]
 8001868:	edc7 6a05 	vstr	s13, [r7, #20]
 800186c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001870:	edc7 7a07 	vstr	s15, [r7, #28]
 8001874:	6938      	ldr	r0, [r7, #16]
 8001876:	6979      	ldr	r1, [r7, #20]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	ee06 0a10 	vmov	s12, r0
 8001880:	ee06 1a90 	vmov	s13, r1
 8001884:	ee07 2a10 	vmov	s14, r2
 8001888:	ee07 3a90 	vmov	s15, r3
}
 800188c:	eeb0 0a46 	vmov.f32	s0, s12
 8001890:	eef0 0a66 	vmov.f32	s1, s13
 8001894:	eeb0 1a47 	vmov.f32	s2, s14
 8001898:	eef0 1a67 	vmov.f32	s3, s15
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <bno055_assignI2C>:


#include "bno055_stm32.h"
I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    _bno055_i2c_port = hi2c_device;
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <bno055_assignI2C+0x1c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000244 	.word	0x20000244

080018c4 <bno055_delay>:

void bno055_delay(int time) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
    osDelay(time);
#else
    HAL_Delay(time);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fc4e 	bl	8003170 <HAL_Delay>
#endif
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
    uint8_t txdata[2] = {reg, data};
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	733b      	strb	r3, [r7, #12]
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	737b      	strb	r3, [r7, #13]
    uint8_t status;
    status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <bno055_writeData+0x184>)
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	230a      	movs	r3, #10
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2302      	movs	r3, #2
 8001902:	2150      	movs	r1, #80	; 0x50
 8001904:	f003 f98a 	bl	8004c1c <HAL_I2C_Master_Transmit>
 8001908:	4603      	mov	r3, r0
 800190a:	75fb      	strb	r3, [r7, #23]
                                     txdata, sizeof(txdata), 10);
    if (status == HAL_OK) {
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80a0 	beq.w	8001a54 <bno055_writeData+0x178>
        return;
    }

    if (status == HAL_ERROR) {
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d103      	bne.n	8001922 <bno055_writeData+0x46>
        printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800191a:	4852      	ldr	r0, [pc, #328]	; (8001a64 <bno055_writeData+0x188>)
 800191c:	f009 f9dc 	bl	800acd8 <puts>
 8001920:	e012      	b.n	8001948 <bno055_writeData+0x6c>
    } else if (status == HAL_TIMEOUT) {
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d103      	bne.n	8001930 <bno055_writeData+0x54>
        printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001928:	484f      	ldr	r0, [pc, #316]	; (8001a68 <bno055_writeData+0x18c>)
 800192a:	f009 f9d5 	bl	800acd8 <puts>
 800192e:	e00b      	b.n	8001948 <bno055_writeData+0x6c>
    } else if (status == HAL_BUSY) {
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d103      	bne.n	800193e <bno055_writeData+0x62>
        printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001936:	484d      	ldr	r0, [pc, #308]	; (8001a6c <bno055_writeData+0x190>)
 8001938:	f009 f9ce 	bl	800acd8 <puts>
 800193c:	e004      	b.n	8001948 <bno055_writeData+0x6c>
    } else {
        printf("Unknown status data %d", status);
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	4619      	mov	r1, r3
 8001942:	484b      	ldr	r0, [pc, #300]	; (8001a70 <bno055_writeData+0x194>)
 8001944:	f009 f942 	bl	800abcc <iprintf>
    }

    uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001948:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <bno055_writeData+0x184>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fb5d 	bl	800500c <HAL_I2C_GetError>
 8001952:	6138      	str	r0, [r7, #16]
    if (error == HAL_I2C_ERROR_NONE) {
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d07e      	beq.n	8001a58 <bno055_writeData+0x17c>
        return;
    } else if (error == HAL_I2C_ERROR_BERR) {
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d103      	bne.n	8001968 <bno055_writeData+0x8c>
        printf("HAL_I2C_ERROR_BERR\r\n");
 8001960:	4844      	ldr	r0, [pc, #272]	; (8001a74 <bno055_writeData+0x198>)
 8001962:	f009 f9b9 	bl	800acd8 <puts>
 8001966:	e021      	b.n	80019ac <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_ARLO) {
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d103      	bne.n	8001976 <bno055_writeData+0x9a>
        printf("HAL_I2C_ERROR_ARLO\r\n");
 800196e:	4842      	ldr	r0, [pc, #264]	; (8001a78 <bno055_writeData+0x19c>)
 8001970:	f009 f9b2 	bl	800acd8 <puts>
 8001974:	e01a      	b.n	80019ac <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_AF) {
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d103      	bne.n	8001984 <bno055_writeData+0xa8>
        printf("HAL_I2C_ERROR_AF\r\n");
 800197c:	483f      	ldr	r0, [pc, #252]	; (8001a7c <bno055_writeData+0x1a0>)
 800197e:	f009 f9ab 	bl	800acd8 <puts>
 8001982:	e013      	b.n	80019ac <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_OVR) {
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b08      	cmp	r3, #8
 8001988:	d103      	bne.n	8001992 <bno055_writeData+0xb6>
        printf("HAL_I2C_ERROR_OVR\r\n");
 800198a:	483d      	ldr	r0, [pc, #244]	; (8001a80 <bno055_writeData+0x1a4>)
 800198c:	f009 f9a4 	bl	800acd8 <puts>
 8001990:	e00c      	b.n	80019ac <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_DMA) {
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b10      	cmp	r3, #16
 8001996:	d103      	bne.n	80019a0 <bno055_writeData+0xc4>
        printf("HAL_I2C_ERROR_DMA\r\n");
 8001998:	483a      	ldr	r0, [pc, #232]	; (8001a84 <bno055_writeData+0x1a8>)
 800199a:	f009 f99d 	bl	800acd8 <puts>
 800199e:	e005      	b.n	80019ac <bno055_writeData+0xd0>
    } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d102      	bne.n	80019ac <bno055_writeData+0xd0>
        printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80019a6:	4838      	ldr	r0, [pc, #224]	; (8001a88 <bno055_writeData+0x1ac>)
 80019a8:	f009 f996 	bl	800acd8 <puts>
    }

    HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <bno055_writeData+0x184>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fb1d 	bl	8004ff0 <HAL_I2C_GetState>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
    if (state == HAL_I2C_STATE_RESET) {
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d103      	bne.n	80019c8 <bno055_writeData+0xec>
        printf("HAL_I2C_STATE_RESET\r\n");
 80019c0:	4832      	ldr	r0, [pc, #200]	; (8001a8c <bno055_writeData+0x1b0>)
 80019c2:	f009 f989 	bl	800acd8 <puts>
 80019c6:	e048      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_READY) {
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d103      	bne.n	80019d6 <bno055_writeData+0xfa>
        printf("HAL_I2C_STATE_RESET\r\n");
 80019ce:	482f      	ldr	r0, [pc, #188]	; (8001a8c <bno055_writeData+0x1b0>)
 80019d0:	f009 f982 	bl	800acd8 <puts>
 80019d4:	e041      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY) {
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b24      	cmp	r3, #36	; 0x24
 80019da:	d103      	bne.n	80019e4 <bno055_writeData+0x108>
        printf("HAL_I2C_STATE_BUSY\r\n");
 80019dc:	482c      	ldr	r0, [pc, #176]	; (8001a90 <bno055_writeData+0x1b4>)
 80019de:	f009 f97b 	bl	800acd8 <puts>
 80019e2:	e03a      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b21      	cmp	r3, #33	; 0x21
 80019e8:	d103      	bne.n	80019f2 <bno055_writeData+0x116>
        printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80019ea:	482a      	ldr	r0, [pc, #168]	; (8001a94 <bno055_writeData+0x1b8>)
 80019ec:	f009 f974 	bl	800acd8 <puts>
 80019f0:	e033      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	2b22      	cmp	r3, #34	; 0x22
 80019f6:	d103      	bne.n	8001a00 <bno055_writeData+0x124>
        printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80019f8:	4827      	ldr	r0, [pc, #156]	; (8001a98 <bno055_writeData+0x1bc>)
 80019fa:	f009 f96d 	bl	800acd8 <puts>
 80019fe:	e02c      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_LISTEN) {
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	2b28      	cmp	r3, #40	; 0x28
 8001a04:	d103      	bne.n	8001a0e <bno055_writeData+0x132>
        printf("HAL_I2C_STATE_LISTEN\r\n");
 8001a06:	4825      	ldr	r0, [pc, #148]	; (8001a9c <bno055_writeData+0x1c0>)
 8001a08:	f009 f966 	bl	800acd8 <puts>
 8001a0c:	e025      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b29      	cmp	r3, #41	; 0x29
 8001a12:	d103      	bne.n	8001a1c <bno055_writeData+0x140>
        printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001a14:	4822      	ldr	r0, [pc, #136]	; (8001aa0 <bno055_writeData+0x1c4>)
 8001a16:	f009 f95f 	bl	800acd8 <puts>
 8001a1a:	e01e      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a20:	d103      	bne.n	8001a2a <bno055_writeData+0x14e>
        printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001a22:	4820      	ldr	r0, [pc, #128]	; (8001aa4 <bno055_writeData+0x1c8>)
 8001a24:	f009 f958 	bl	800acd8 <puts>
 8001a28:	e017      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_ABORT) {
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b60      	cmp	r3, #96	; 0x60
 8001a2e:	d103      	bne.n	8001a38 <bno055_writeData+0x15c>
        printf("HAL_I2C_STATE_ABORT\r\n");
 8001a30:	481d      	ldr	r0, [pc, #116]	; (8001aa8 <bno055_writeData+0x1cc>)
 8001a32:	f009 f951 	bl	800acd8 <puts>
 8001a36:	e010      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a3c:	d103      	bne.n	8001a46 <bno055_writeData+0x16a>
        printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001a3e:	481b      	ldr	r0, [pc, #108]	; (8001aac <bno055_writeData+0x1d0>)
 8001a40:	f009 f94a 	bl	800acd8 <puts>
 8001a44:	e009      	b.n	8001a5a <bno055_writeData+0x17e>
    } else if (state == HAL_I2C_STATE_ERROR) {
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2be0      	cmp	r3, #224	; 0xe0
 8001a4a:	d106      	bne.n	8001a5a <bno055_writeData+0x17e>
        printf("HAL_I2C_STATE_ERROR\r\n");
 8001a4c:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <bno055_writeData+0x1d4>)
 8001a4e:	f009 f943 	bl	800acd8 <puts>
 8001a52:	e002      	b.n	8001a5a <bno055_writeData+0x17e>
        return;
 8001a54:	bf00      	nop
 8001a56:	e000      	b.n	8001a5a <bno055_writeData+0x17e>
        return;
 8001a58:	bf00      	nop
    }
    // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
    // return;
}
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000244 	.word	0x20000244
 8001a64:	0800d9b4 	.word	0x0800d9b4
 8001a68:	0800d9d8 	.word	0x0800d9d8
 8001a6c:	0800da00 	.word	0x0800da00
 8001a70:	0800da24 	.word	0x0800da24
 8001a74:	0800da3c 	.word	0x0800da3c
 8001a78:	0800da50 	.word	0x0800da50
 8001a7c:	0800da64 	.word	0x0800da64
 8001a80:	0800da78 	.word	0x0800da78
 8001a84:	0800da8c 	.word	0x0800da8c
 8001a88:	0800daa0 	.word	0x0800daa0
 8001a8c:	0800dab8 	.word	0x0800dab8
 8001a90:	0800dad0 	.word	0x0800dad0
 8001a94:	0800dae4 	.word	0x0800dae4
 8001a98:	0800dafc 	.word	0x0800dafc
 8001a9c:	0800db14 	.word	0x0800db14
 8001aa0:	0800db2c 	.word	0x0800db2c
 8001aa4:	0800db4c 	.word	0x0800db4c
 8001aa8:	0800db6c 	.word	0x0800db6c
 8001aac:	0800db84 	.word	0x0800db84
 8001ab0:	0800db9c 	.word	0x0800db9c

08001ab4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <bno055_readData+0x40>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	1dfa      	adds	r2, r7, #7
 8001aca:	2364      	movs	r3, #100	; 0x64
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	2150      	movs	r1, #80	; 0x50
 8001ad2:	f003 f8a3 	bl	8004c1c <HAL_I2C_Master_Transmit>
                            100);
    HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <bno055_readData+0x40>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	2264      	movs	r2, #100	; 0x64
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	2150      	movs	r1, #80	; 0x50
 8001ae6:	f003 f98d 	bl	8004e04 <HAL_I2C_Master_Receive>
                           100);
    // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
    // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000244 	.word	0x20000244

08001af8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <SELECT+0x18>)
 8001b02:	f002 ffe3 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f001 fb32 	bl	8003170 <HAL_Delay>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	48000400 	.word	0x48000400

08001b14 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <DESELECT+0x18>)
 8001b1e:	f002 ffd5 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f001 fb24 	bl	8003170 <HAL_Delay>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	48000400 	.word	0x48000400

08001b30 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b3a:	bf00      	nop
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <SPI_TxByte+0x30>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d1f8      	bne.n	8001b3c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001b4a:	1df9      	adds	r1, r7, #7
 8001b4c:	2364      	movs	r3, #100	; 0x64
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <SPI_TxByte+0x30>)
 8001b52:	f004 fe52 	bl	80067fa <HAL_SPI_Transmit>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000368 	.word	0x20000368

08001b64 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b70:	bf00      	nop
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <SPI_TxBuffer+0x30>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d1f8      	bne.n	8001b72 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	2364      	movs	r3, #100	; 0x64
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4803      	ldr	r0, [pc, #12]	; (8001b94 <SPI_TxBuffer+0x30>)
 8001b88:	f004 fe37 	bl	80067fa <HAL_SPI_Transmit>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000368 	.word	0x20000368

08001b98 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001b9e:	23ff      	movs	r3, #255	; 0xff
 8001ba0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ba2:	bf00      	nop
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <SPI_RxByte+0x34>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d1f8      	bne.n	8001ba4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001bb2:	1dba      	adds	r2, r7, #6
 8001bb4:	1df9      	adds	r1, r7, #7
 8001bb6:	2364      	movs	r3, #100	; 0x64
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <SPI_RxByte+0x34>)
 8001bbe:	f004 ff8a 	bl	8006ad6 <HAL_SPI_TransmitReceive>

	return data;
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000368 	.word	0x20000368

08001bd0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001bd8:	f7ff ffde 	bl	8001b98 <SPI_RxByte>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	701a      	strb	r2, [r3, #0]
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <SD_ReadyWait+0x30>)
 8001bf4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bf8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001bfa:	f7ff ffcd 	bl	8001b98 <SPI_RxByte>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2bff      	cmp	r3, #255	; 0xff
 8001c06:	d004      	beq.n	8001c12 <SD_ReadyWait+0x26>
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SD_ReadyWait+0x30>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f3      	bne.n	8001bfa <SD_ReadyWait+0xe>

	return res;
 8001c12:	79fb      	ldrb	r3, [r7, #7]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20002860 	.word	0x20002860

08001c20 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001c26:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001c2a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001c2c:	f7ff ff72 	bl	8001b14 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	e005      	b.n	8001c42 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001c36:	20ff      	movs	r0, #255	; 0xff
 8001c38:	f7ff ff7a 	bl	8001b30 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	ddf6      	ble.n	8001c36 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001c48:	f7ff ff56 	bl	8001af8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001c4c:	2340      	movs	r3, #64	; 0x40
 8001c4e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001c60:	2395      	movs	r3, #149	; 0x95
 8001c62:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001c64:	463b      	mov	r3, r7
 8001c66:	2106      	movs	r1, #6
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff7b 	bl	8001b64 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001c6e:	e002      	b.n	8001c76 <SD_PowerOn+0x56>
	{
		cnt--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001c76:	f7ff ff8f 	bl	8001b98 <SPI_RxByte>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d002      	beq.n	8001c86 <SD_PowerOn+0x66>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f4      	bne.n	8001c70 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001c86:	f7ff ff45 	bl	8001b14 <DESELECT>
	SPI_TxByte(0XFF);
 8001c8a:	20ff      	movs	r0, #255	; 0xff
 8001c8c:	f7ff ff50 	bl	8001b30 <SPI_TxByte>

	PowerFlag = 1;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <SD_PowerOn+0x80>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000249 	.word	0x20000249

08001ca4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <SD_PowerOff+0x14>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000249 	.word	0x20000249

08001cbc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <SD_CheckPower+0x14>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000249 	.word	0x20000249

08001cd4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <SD_RxDataBlock+0x5c>)
 8001ce0:	22c8      	movs	r2, #200	; 0xc8
 8001ce2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001ce4:	f7ff ff58 	bl	8001b98 <SPI_RxByte>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	2bff      	cmp	r3, #255	; 0xff
 8001cf0:	d104      	bne.n	8001cfc <SD_RxDataBlock+0x28>
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <SD_RxDataBlock+0x5c>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f3      	bne.n	8001ce4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2bfe      	cmp	r3, #254	; 0xfe
 8001d00:	d001      	beq.n	8001d06 <SD_RxDataBlock+0x32>
 8001d02:	2300      	movs	r3, #0
 8001d04:	e00f      	b.n	8001d26 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5f 	bl	8001bd0 <SPI_RxBytePtr>
	} while(len--);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	603a      	str	r2, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f4      	bne.n	8001d06 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001d1c:	f7ff ff3c 	bl	8001b98 <SPI_RxByte>
	SPI_RxByte();
 8001d20:	f7ff ff3a 	bl	8001b98 <SPI_RxByte>

	return TRUE;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000285e 	.word	0x2000285e

08001d34 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001d44:	f7ff ff52 	bl	8001bec <SD_ReadyWait>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	d001      	beq.n	8001d52 <SD_TxDataBlock+0x1e>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e02f      	b.n	8001db2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff feeb 	bl	8001b30 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	2bfd      	cmp	r3, #253	; 0xfd
 8001d5e:	d020      	beq.n	8001da2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fefd 	bl	8001b64 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001d6a:	f7ff ff15 	bl	8001b98 <SPI_RxByte>
		SPI_RxByte();
 8001d6e:	f7ff ff13 	bl	8001b98 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001d72:	e00b      	b.n	8001d8c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001d74:	f7ff ff10 	bl	8001b98 <SPI_RxByte>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d006      	beq.n	8001d94 <SD_TxDataBlock+0x60>
			i++;
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d9f0      	bls.n	8001d74 <SD_TxDataBlock+0x40>
 8001d92:	e000      	b.n	8001d96 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001d94:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001d96:	bf00      	nop
 8001d98:	f7ff fefe 	bl	8001b98 <SPI_RxByte>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0fa      	beq.n	8001d98 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d101      	bne.n	8001db0 <SD_TxDataBlock+0x7c>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	6039      	str	r1, [r7, #0]
 8001dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001dc6:	f7ff ff11 	bl	8001bec <SD_ReadyWait>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2bff      	cmp	r3, #255	; 0xff
 8001dce:	d001      	beq.n	8001dd4 <SD_SendCmd+0x1a>
 8001dd0:	23ff      	movs	r3, #255	; 0xff
 8001dd2:	e042      	b.n	8001e5a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff feaa 	bl	8001b30 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	0e1b      	lsrs	r3, r3, #24
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fea4 	bl	8001b30 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	0c1b      	lsrs	r3, r3, #16
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fe9e 	bl	8001b30 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fe98 	bl	8001b30 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fe93 	bl	8001b30 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d102      	bne.n	8001e16 <SD_SendCmd+0x5c>
 8001e10:	2395      	movs	r3, #149	; 0x95
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e007      	b.n	8001e26 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b48      	cmp	r3, #72	; 0x48
 8001e1a:	d102      	bne.n	8001e22 <SD_SendCmd+0x68>
 8001e1c:	2387      	movs	r3, #135	; 0x87
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e001      	b.n	8001e26 <SD_SendCmd+0x6c>
	else crc = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fe81 	bl	8001b30 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b4c      	cmp	r3, #76	; 0x4c
 8001e32:	d101      	bne.n	8001e38 <SD_SendCmd+0x7e>
 8001e34:	f7ff feb0 	bl	8001b98 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001e38:	230a      	movs	r3, #10
 8001e3a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001e3c:	f7ff feac 	bl	8001b98 <SPI_RxByte>
 8001e40:	4603      	mov	r3, r0
 8001e42:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001e44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	da05      	bge.n	8001e58 <SD_SendCmd+0x9e>
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	73bb      	strb	r3, [r7, #14]
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f1      	bne.n	8001e3c <SD_SendCmd+0x82>

	return res;
 8001e58:	7b7b      	ldrb	r3, [r7, #13]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <SD_disk_initialize+0x14>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0d6      	b.n	8002026 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001e78:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <SD_disk_initialize+0x1cc>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <SD_disk_initialize+0x2a>
 8001e86:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <SD_disk_initialize+0x1cc>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	e0cb      	b.n	8002026 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001e8e:	f7ff fec7 	bl	8001c20 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001e92:	f7ff fe31 	bl	8001af8 <SELECT>

	/* check disk type */
	type = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2040      	movs	r0, #64	; 0x40
 8001e9e:	f7ff ff8c 	bl	8001dba <SD_SendCmd>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	f040 80a6 	bne.w	8001ff6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001eaa:	4b62      	ldr	r3, [pc, #392]	; (8002034 <SD_disk_initialize+0x1d0>)
 8001eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eb0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001eb2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001eb6:	2048      	movs	r0, #72	; 0x48
 8001eb8:	f7ff ff7f 	bl	8001dba <SD_SendCmd>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d158      	bne.n	8001f74 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	e00c      	b.n	8001ee2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001ec8:	7bfc      	ldrb	r4, [r7, #15]
 8001eca:	f7ff fe65 	bl	8001b98 <SPI_RxByte>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f104 0310 	add.w	r3, r4, #16
 8001ed6:	443b      	add	r3, r7
 8001ed8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d9ef      	bls.n	8001ec8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001ee8:	7abb      	ldrb	r3, [r7, #10]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f040 8083 	bne.w	8001ff6 <SD_disk_initialize+0x192>
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	2baa      	cmp	r3, #170	; 0xaa
 8001ef4:	d17f      	bne.n	8001ff6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2077      	movs	r0, #119	; 0x77
 8001efa:	f7ff ff5e 	bl	8001dba <SD_SendCmd>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d807      	bhi.n	8001f14 <SD_disk_initialize+0xb0>
 8001f04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f08:	2069      	movs	r0, #105	; 0x69
 8001f0a:	f7ff ff56 	bl	8001dba <SD_SendCmd>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001f14:	4b47      	ldr	r3, [pc, #284]	; (8002034 <SD_disk_initialize+0x1d0>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1eb      	bne.n	8001ef6 <SD_disk_initialize+0x92>
 8001f1e:	e000      	b.n	8001f22 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001f20:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001f22:	4b44      	ldr	r3, [pc, #272]	; (8002034 <SD_disk_initialize+0x1d0>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d064      	beq.n	8001ff6 <SD_disk_initialize+0x192>
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	207a      	movs	r0, #122	; 0x7a
 8001f30:	f7ff ff43 	bl	8001dba <SD_SendCmd>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d15d      	bne.n	8001ff6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	e00c      	b.n	8001f5a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001f40:	7bfc      	ldrb	r4, [r7, #15]
 8001f42:	f7ff fe29 	bl	8001b98 <SPI_RxByte>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f104 0310 	add.w	r3, r4, #16
 8001f4e:	443b      	add	r3, r7
 8001f50:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	3301      	adds	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d9ef      	bls.n	8001f40 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001f60:	7a3b      	ldrb	r3, [r7, #8]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <SD_disk_initialize+0x10a>
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	e000      	b.n	8001f70 <SD_disk_initialize+0x10c>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	73bb      	strb	r3, [r7, #14]
 8001f72:	e040      	b.n	8001ff6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f74:	2100      	movs	r1, #0
 8001f76:	2077      	movs	r0, #119	; 0x77
 8001f78:	f7ff ff1f 	bl	8001dba <SD_SendCmd>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d808      	bhi.n	8001f94 <SD_disk_initialize+0x130>
 8001f82:	2100      	movs	r1, #0
 8001f84:	2069      	movs	r0, #105	; 0x69
 8001f86:	f7ff ff18 	bl	8001dba <SD_SendCmd>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d801      	bhi.n	8001f94 <SD_disk_initialize+0x130>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e000      	b.n	8001f96 <SD_disk_initialize+0x132>
 8001f94:	2301      	movs	r3, #1
 8001f96:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001f98:	7bbb      	ldrb	r3, [r7, #14]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d10e      	bne.n	8001fbc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2077      	movs	r0, #119	; 0x77
 8001fa2:	f7ff ff0a 	bl	8001dba <SD_SendCmd>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d80e      	bhi.n	8001fca <SD_disk_initialize+0x166>
 8001fac:	2100      	movs	r1, #0
 8001fae:	2069      	movs	r0, #105	; 0x69
 8001fb0:	f7ff ff03 	bl	8001dba <SD_SendCmd>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <SD_disk_initialize+0x166>
 8001fba:	e00d      	b.n	8001fd8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2041      	movs	r0, #65	; 0x41
 8001fc0:	f7ff fefb 	bl	8001dba <SD_SendCmd>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <SD_disk_initialize+0x1d0>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e1      	bne.n	8001f98 <SD_disk_initialize+0x134>
 8001fd4:	e000      	b.n	8001fd8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001fd6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <SD_disk_initialize+0x1d0>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <SD_disk_initialize+0x18e>
 8001fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe6:	2050      	movs	r0, #80	; 0x50
 8001fe8:	f7ff fee7 	bl	8001dba <SD_SendCmd>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SD_disk_initialize+0x192>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <SD_disk_initialize+0x1d4>)
 8001ff8:	7bbb      	ldrb	r3, [r7, #14]
 8001ffa:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001ffc:	f7ff fd8a 	bl	8001b14 <DESELECT>
	SPI_RxByte();
 8002000:	f7ff fdca 	bl	8001b98 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <SD_disk_initialize+0x1cc>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SD_disk_initialize+0x1cc>)
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e001      	b.n	8002020 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800201c:	f7ff fe42 	bl	8001ca4 <SD_PowerOff>
	}

	return Stat;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <SD_disk_initialize+0x1cc>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	2000000a 	.word	0x2000000a
 8002034:	2000285e 	.word	0x2000285e
 8002038:	20000248 	.word	0x20000248

0800203c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SD_disk_status+0x14>
 800204c:	2301      	movs	r3, #1
 800204e:	e002      	b.n	8002056 <SD_disk_status+0x1a>
	return Stat;
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SD_disk_status+0x28>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	2000000a 	.word	0x2000000a

08002068 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	4603      	mov	r3, r0
 8002076:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <SD_disk_read+0x1c>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <SD_disk_read+0x20>
 8002084:	2304      	movs	r3, #4
 8002086:	e051      	b.n	800212c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <SD_disk_read+0xcc>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <SD_disk_read+0x32>
 8002096:	2303      	movs	r3, #3
 8002098:	e048      	b.n	800212c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <SD_disk_read+0xd0>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <SD_disk_read+0x44>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	607b      	str	r3, [r7, #4]

	SELECT();
 80020ac:	f7ff fd24 	bl	8001af8 <SELECT>

	if (count == 1)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d111      	bne.n	80020da <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	2051      	movs	r0, #81	; 0x51
 80020ba:	f7ff fe7e 	bl	8001dba <SD_SendCmd>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d129      	bne.n	8002118 <SD_disk_read+0xb0>
 80020c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c8:	68b8      	ldr	r0, [r7, #8]
 80020ca:	f7ff fe03 	bl	8001cd4 <SD_RxDataBlock>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d021      	beq.n	8002118 <SD_disk_read+0xb0>
 80020d4:	2300      	movs	r3, #0
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	e01e      	b.n	8002118 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	2052      	movs	r0, #82	; 0x52
 80020de:	f7ff fe6c 	bl	8001dba <SD_SendCmd>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d117      	bne.n	8002118 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80020e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ec:	68b8      	ldr	r0, [r7, #8]
 80020ee:	f7ff fdf1 	bl	8001cd4 <SD_RxDataBlock>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <SD_disk_read+0xa6>
				buff += 512;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ed      	bne.n	80020e8 <SD_disk_read+0x80>
 800210c:	e000      	b.n	8002110 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800210e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002110:	2100      	movs	r1, #0
 8002112:	204c      	movs	r0, #76	; 0x4c
 8002114:	f7ff fe51 	bl	8001dba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002118:	f7ff fcfc 	bl	8001b14 <DESELECT>
	SPI_RxByte();
 800211c:	f7ff fd3c 	bl	8001b98 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000000a 	.word	0x2000000a
 8002138:	20000248 	.word	0x20000248

0800213c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <SD_disk_write+0x1c>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <SD_disk_write+0x20>
 8002158:	2304      	movs	r3, #4
 800215a:	e06b      	b.n	8002234 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800215c:	4b37      	ldr	r3, [pc, #220]	; (800223c <SD_disk_write+0x100>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SD_disk_write+0x32>
 800216a:	2303      	movs	r3, #3
 800216c:	e062      	b.n	8002234 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800216e:	4b33      	ldr	r3, [pc, #204]	; (800223c <SD_disk_write+0x100>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SD_disk_write+0x44>
 800217c:	2302      	movs	r3, #2
 800217e:	e059      	b.n	8002234 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <SD_disk_write+0x104>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <SD_disk_write+0x56>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	025b      	lsls	r3, r3, #9
 8002190:	607b      	str	r3, [r7, #4]

	SELECT();
 8002192:	f7ff fcb1 	bl	8001af8 <SELECT>

	if (count == 1)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d110      	bne.n	80021be <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	2058      	movs	r0, #88	; 0x58
 80021a0:	f7ff fe0b 	bl	8001dba <SD_SendCmd>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d13a      	bne.n	8002220 <SD_disk_write+0xe4>
 80021aa:	21fe      	movs	r1, #254	; 0xfe
 80021ac:	68b8      	ldr	r0, [r7, #8]
 80021ae:	f7ff fdc1 	bl	8001d34 <SD_TxDataBlock>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d033      	beq.n	8002220 <SD_disk_write+0xe4>
			count = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	e030      	b.n	8002220 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <SD_disk_write+0x104>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2077      	movs	r0, #119	; 0x77
 80021ce:	f7ff fdf4 	bl	8001dba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	2057      	movs	r0, #87	; 0x57
 80021d6:	f7ff fdf0 	bl	8001dba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	2059      	movs	r0, #89	; 0x59
 80021de:	f7ff fdec 	bl	8001dba <SD_SendCmd>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d11b      	bne.n	8002220 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80021e8:	21fc      	movs	r1, #252	; 0xfc
 80021ea:	68b8      	ldr	r0, [r7, #8]
 80021ec:	f7ff fda2 	bl	8001d34 <SD_TxDataBlock>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <SD_disk_write+0xd0>
				buff += 512;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	3b01      	subs	r3, #1
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ee      	bne.n	80021e8 <SD_disk_write+0xac>
 800220a:	e000      	b.n	800220e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800220c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800220e:	21fd      	movs	r1, #253	; 0xfd
 8002210:	2000      	movs	r0, #0
 8002212:	f7ff fd8f 	bl	8001d34 <SD_TxDataBlock>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <SD_disk_write+0xe4>
			{
				count = 1;
 800221c:	2301      	movs	r3, #1
 800221e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002220:	f7ff fc78 	bl	8001b14 <DESELECT>
	SPI_RxByte();
 8002224:	f7ff fcb8 	bl	8001b98 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	2000000a 	.word	0x2000000a
 8002240:	20000248 	.word	0x20000248

08002244 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b08b      	sub	sp, #44	; 0x2c
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	603a      	str	r2, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
 8002250:	460b      	mov	r3, r1
 8002252:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SD_disk_ioctl+0x1e>
 800225e:	2304      	movs	r3, #4
 8002260:	e115      	b.n	800248e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d124      	bne.n	80022b8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d012      	beq.n	800229c <SD_disk_ioctl+0x58>
 8002276:	2b02      	cmp	r3, #2
 8002278:	dc1a      	bgt.n	80022b0 <SD_disk_ioctl+0x6c>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <SD_disk_ioctl+0x40>
 800227e:	2b01      	cmp	r3, #1
 8002280:	d006      	beq.n	8002290 <SD_disk_ioctl+0x4c>
 8002282:	e015      	b.n	80022b0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002284:	f7ff fd0e 	bl	8001ca4 <SD_PowerOff>
			res = RES_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800228e:	e0fc      	b.n	800248a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002290:	f7ff fcc6 	bl	8001c20 <SD_PowerOn>
			res = RES_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800229a:	e0f6      	b.n	800248a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	1c5c      	adds	r4, r3, #1
 80022a0:	f7ff fd0c 	bl	8001cbc <SD_CheckPower>
 80022a4:	4603      	mov	r3, r0
 80022a6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80022a8:	2300      	movs	r3, #0
 80022aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80022ae:	e0ec      	b.n	800248a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80022b0:	2304      	movs	r3, #4
 80022b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022b6:	e0e8      	b.n	800248a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80022b8:	4b77      	ldr	r3, [pc, #476]	; (8002498 <SD_disk_ioctl+0x254>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SD_disk_ioctl+0x86>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0e1      	b.n	800248e <SD_disk_ioctl+0x24a>

		SELECT();
 80022ca:	f7ff fc15 	bl	8001af8 <SELECT>

		switch (ctrl)
 80022ce:	79bb      	ldrb	r3, [r7, #6]
 80022d0:	2b0d      	cmp	r3, #13
 80022d2:	f200 80cb 	bhi.w	800246c <SD_disk_ioctl+0x228>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <SD_disk_ioctl+0x98>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080023d7 	.word	0x080023d7
 80022e0:	08002315 	.word	0x08002315
 80022e4:	080023c7 	.word	0x080023c7
 80022e8:	0800246d 	.word	0x0800246d
 80022ec:	0800246d 	.word	0x0800246d
 80022f0:	0800246d 	.word	0x0800246d
 80022f4:	0800246d 	.word	0x0800246d
 80022f8:	0800246d 	.word	0x0800246d
 80022fc:	0800246d 	.word	0x0800246d
 8002300:	0800246d 	.word	0x0800246d
 8002304:	0800246d 	.word	0x0800246d
 8002308:	080023e9 	.word	0x080023e9
 800230c:	0800240d 	.word	0x0800240d
 8002310:	08002431 	.word	0x08002431
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002314:	2100      	movs	r1, #0
 8002316:	2049      	movs	r0, #73	; 0x49
 8002318:	f7ff fd4f 	bl	8001dba <SD_SendCmd>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 80a8 	bne.w	8002474 <SD_disk_ioctl+0x230>
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	2110      	movs	r1, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fcd2 	bl	8001cd4 <SD_RxDataBlock>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 809e 	beq.w	8002474 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002338:	7b3b      	ldrb	r3, [r7, #12]
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002342:	7d7b      	ldrb	r3, [r7, #21]
 8002344:	b29a      	uxth	r2, r3
 8002346:	7d3b      	ldrb	r3, [r7, #20]
 8002348:	b29b      	uxth	r3, r3
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	4413      	add	r3, r2
 8002350:	b29b      	uxth	r3, r3
 8002352:	3301      	adds	r3, #1
 8002354:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002356:	8bfb      	ldrh	r3, [r7, #30]
 8002358:	029a      	lsls	r2, r3, #10
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e02e      	b.n	80023be <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002360:	7c7b      	ldrb	r3, [r7, #17]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	b2da      	uxtb	r2, r3
 8002368:	7dbb      	ldrb	r3, [r7, #22]
 800236a:	09db      	lsrs	r3, r3, #7
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4413      	add	r3, r2
 8002370:	b2da      	uxtb	r2, r3
 8002372:	7d7b      	ldrb	r3, [r7, #21]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f003 0306 	and.w	r3, r3, #6
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4413      	add	r3, r2
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3302      	adds	r3, #2
 8002384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002388:	7d3b      	ldrb	r3, [r7, #20]
 800238a:	099b      	lsrs	r3, r3, #6
 800238c:	b2db      	uxtb	r3, r3
 800238e:	b29a      	uxth	r2, r3
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	b29b      	uxth	r3, r3
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	b29b      	uxth	r3, r3
 8002398:	4413      	add	r3, r2
 800239a:	b29a      	uxth	r2, r3
 800239c:	7cbb      	ldrb	r3, [r7, #18]
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80023b0:	8bfa      	ldrh	r2, [r7, #30]
 80023b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023b6:	3b09      	subs	r3, #9
 80023b8:	409a      	lsls	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80023c4:	e056      	b.n	8002474 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023cc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80023d4:	e055      	b.n	8002482 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80023d6:	f7ff fc09 	bl	8001bec <SD_ReadyWait>
 80023da:	4603      	mov	r3, r0
 80023dc:	2bff      	cmp	r3, #255	; 0xff
 80023de:	d14b      	bne.n	8002478 <SD_disk_ioctl+0x234>
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80023e6:	e047      	b.n	8002478 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80023e8:	2100      	movs	r1, #0
 80023ea:	2049      	movs	r0, #73	; 0x49
 80023ec:	f7ff fce5 	bl	8001dba <SD_SendCmd>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d142      	bne.n	800247c <SD_disk_ioctl+0x238>
 80023f6:	2110      	movs	r1, #16
 80023f8:	6a38      	ldr	r0, [r7, #32]
 80023fa:	f7ff fc6b 	bl	8001cd4 <SD_RxDataBlock>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03b      	beq.n	800247c <SD_disk_ioctl+0x238>
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800240a:	e037      	b.n	800247c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800240c:	2100      	movs	r1, #0
 800240e:	204a      	movs	r0, #74	; 0x4a
 8002410:	f7ff fcd3 	bl	8001dba <SD_SendCmd>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d132      	bne.n	8002480 <SD_disk_ioctl+0x23c>
 800241a:	2110      	movs	r1, #16
 800241c:	6a38      	ldr	r0, [r7, #32]
 800241e:	f7ff fc59 	bl	8001cd4 <SD_RxDataBlock>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02b      	beq.n	8002480 <SD_disk_ioctl+0x23c>
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800242e:	e027      	b.n	8002480 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002430:	2100      	movs	r1, #0
 8002432:	207a      	movs	r0, #122	; 0x7a
 8002434:	f7ff fcc1 	bl	8001dba <SD_SendCmd>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d116      	bne.n	800246c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800243e:	2300      	movs	r3, #0
 8002440:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002444:	e00b      	b.n	800245e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002446:	6a3c      	ldr	r4, [r7, #32]
 8002448:	1c63      	adds	r3, r4, #1
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	f7ff fba4 	bl	8001b98 <SPI_RxByte>
 8002450:	4603      	mov	r3, r0
 8002452:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002458:	3301      	adds	r3, #1
 800245a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800245e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002462:	2b03      	cmp	r3, #3
 8002464:	d9ef      	bls.n	8002446 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800246c:	2304      	movs	r3, #4
 800246e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002472:	e006      	b.n	8002482 <SD_disk_ioctl+0x23e>
			break;
 8002474:	bf00      	nop
 8002476:	e004      	b.n	8002482 <SD_disk_ioctl+0x23e>
			break;
 8002478:	bf00      	nop
 800247a:	e002      	b.n	8002482 <SD_disk_ioctl+0x23e>
			break;
 800247c:	bf00      	nop
 800247e:	e000      	b.n	8002482 <SD_disk_ioctl+0x23e>
			break;
 8002480:	bf00      	nop
		}

		DESELECT();
 8002482:	f7ff fb47 	bl	8001b14 <DESELECT>
		SPI_RxByte();
 8002486:	f7ff fb87 	bl	8001b98 <SPI_RxByte>
	}

	return res;
 800248a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800248e:	4618      	mov	r0, r3
 8002490:	372c      	adds	r7, #44	; 0x2c
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	bf00      	nop
 8002498:	2000000a 	.word	0x2000000a

0800249c <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	e007      	b.n	80024b8 <clear_buffer+0x1c>
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <clear_buffer+0x30>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3301      	adds	r3, #1
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b7f      	cmp	r3, #127	; 0x7f
 80024bc:	ddf4      	ble.n	80024a8 <clear_buffer+0xc>
}
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	20002448 	.word	0x20002448

080024d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b0a8      	sub	sp, #160	; 0xa0
 80024d6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d8:	f000 fdd5 	bl	8003086 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024dc:	f000 f952 	bl	8002784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e0:	f000 faec 	bl	8002abc <MX_GPIO_Init>
  MX_SPI1_Init();
 80024e4:	f000 faac 	bl	8002a40 <MX_SPI1_Init>
  MX_FATFS_Init();
 80024e8:	f004 fe6c 	bl	80071c4 <MX_FATFS_Init>
  MX_I2C1_Init();
 80024ec:	f000 fa6a 	bl	80029c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80024f0:	f000 f98e 	bl	8002810 <MX_ADC1_Init>
  MX_ADC2_Init();
 80024f4:	f000 fa02 	bl	80028fc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //mount sd card
  fresult = f_mount(&fs, "/", 1);
 80024f8:	2201      	movs	r2, #1
 80024fa:	4989      	ldr	r1, [pc, #548]	; (8002720 <main+0x250>)
 80024fc:	4889      	ldr	r0, [pc, #548]	; (8002724 <main+0x254>)
 80024fe:	f007 f8af 	bl	8009660 <f_mount>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	4b88      	ldr	r3, [pc, #544]	; (8002728 <main+0x258>)
 8002508:	701a      	strb	r2, [r3, #0]
  	/*************** Card capacity details ********************/

  	/* Check free space */
  	//f_getfree("", &fre_clust, &pfs);

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800250a:	4b88      	ldr	r3, [pc, #544]	; (800272c <main+0x25c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	3b02      	subs	r3, #2
 8002512:	4a86      	ldr	r2, [pc, #536]	; (800272c <main+0x25c>)
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	8952      	ldrh	r2, [r2, #10]
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd fff1 	bl	8000504 <__aeabi_ui2d>
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	4b82      	ldr	r3, [pc, #520]	; (8002730 <main+0x260>)
 8002528:	f7fe f866 	bl	80005f8 <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f7fe fb38 	bl	8000ba8 <__aeabi_d2uiz>
 8002538:	4603      	mov	r3, r0
 800253a:	4a7e      	ldr	r2, [pc, #504]	; (8002734 <main+0x264>)
 800253c:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800253e:	4b7d      	ldr	r3, [pc, #500]	; (8002734 <main+0x264>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	497c      	ldr	r1, [pc, #496]	; (8002738 <main+0x268>)
 8002546:	487d      	ldr	r0, [pc, #500]	; (800273c <main+0x26c>)
 8002548:	f008 fbce 	bl	800ace8 <siprintf>
  	clear_buffer();
 800254c:	f7ff ffa6 	bl	800249c <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002550:	4b76      	ldr	r3, [pc, #472]	; (800272c <main+0x25c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	895b      	ldrh	r3, [r3, #10]
 8002556:	461a      	mov	r2, r3
 8002558:	4b79      	ldr	r3, [pc, #484]	; (8002740 <main+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd ffcf 	bl	8000504 <__aeabi_ui2d>
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	4b71      	ldr	r3, [pc, #452]	; (8002730 <main+0x260>)
 800256c:	f7fe f844 	bl	80005f8 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f7fe fb16 	bl	8000ba8 <__aeabi_d2uiz>
 800257c:	4603      	mov	r3, r0
 800257e:	4a71      	ldr	r2, [pc, #452]	; (8002744 <main+0x274>)
 8002580:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8002582:	4b70      	ldr	r3, [pc, #448]	; (8002744 <main+0x274>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	496f      	ldr	r1, [pc, #444]	; (8002748 <main+0x278>)
 800258a:	486c      	ldr	r0, [pc, #432]	; (800273c <main+0x26c>)
 800258c:	f008 fbac 	bl	800ace8 <siprintf>
  	clear_buffer();
 8002590:	f7ff ff84 	bl	800249c <clear_buffer>

  	/************* The following operation is using PUTS and GETS *********************/

  	  	/* Open file to write/ create a file if it doesn't exist */
  	    fresult = f_open(&fil, "FlightData.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002594:	2213      	movs	r2, #19
 8002596:	496d      	ldr	r1, [pc, #436]	; (800274c <main+0x27c>)
 8002598:	486d      	ldr	r0, [pc, #436]	; (8002750 <main+0x280>)
 800259a:	f007 f8a7 	bl	80096ec <f_open>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <main+0x258>)
 80025a4:	701a      	strb	r2, [r3, #0]

  	  	/* Writing text */
  	  	f_puts("\nTemperature(C), Pressure(Pa), Altitude(m), Acceleration(m/s^2), Strain(volts)\n", &fil);
 80025a6:	496a      	ldr	r1, [pc, #424]	; (8002750 <main+0x280>)
 80025a8:	486a      	ldr	r0, [pc, #424]	; (8002754 <main+0x284>)
 80025aa:	f007 fd1e 	bl	8009fea <f_puts>

  	  	/* Close file */
  	  	fresult = f_close(&fil);
 80025ae:	4868      	ldr	r0, [pc, #416]	; (8002750 <main+0x280>)
 80025b0:	f007 fc7a 	bl	8009ea8 <f_close>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <main+0x258>)
 80025ba:	701a      	strb	r2, [r3, #0]
  	  	/* Close file */
  	  	f_close(&fil);
 80025bc:	4864      	ldr	r0, [pc, #400]	; (8002750 <main+0x280>)
 80025be:	f007 fc73 	bl	8009ea8 <f_close>

  	  	clear_buffer();
 80025c2:	f7ff ff6b 	bl	800249c <clear_buffer>

  	   BMP280_init();
 80025c6:	f7fe fc5f 	bl	8000e88 <BMP280_init>

  	   bno055_assignI2C(&hi2c1);
 80025ca:	4863      	ldr	r0, [pc, #396]	; (8002758 <main+0x288>)
 80025cc:	f7ff f96a 	bl	80018a4 <bno055_assignI2C>
  	   bno055_setup();
 80025d0:	f7fe ffd0 	bl	8001574 <bno055_setup>
  	   bno055_setOperationModeNDOF();
 80025d4:	f7fe ffbb 	bl	800154e <bno055_setOperationModeNDOF>

  while (1)
  {

	  	// Collects Temp/Press/Altitude----------------------
	  	  	BMP280_calc_values();
 80025d8:	f7fe fc66 	bl	8000ea8 <BMP280_calc_values>
	  	// Calculate acceleration values---------------------
	  		bno055_vector_t l = bno055_getVectorLinearAccel();
 80025dc:	f7ff f934 	bl	8001848 <bno055_getVectorLinearAccel>
 80025e0:	eeb0 6a40 	vmov.f32	s12, s0
 80025e4:	eef0 6a60 	vmov.f32	s13, s1
 80025e8:	eeb0 7a41 	vmov.f32	s14, s2
 80025ec:	eef0 7a61 	vmov.f32	s15, s3
 80025f0:	ed87 6a02 	vstr	s12, [r7, #8]
 80025f4:	edc7 6a03 	vstr	s13, [r7, #12]
 80025f8:	ed87 7a04 	vstr	s14, [r7, #16]
 80025fc:	edc7 7a05 	vstr	s15, [r7, #20]
	  		Ax=l.x;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a56      	ldr	r2, [pc, #344]	; (800275c <main+0x28c>)
 8002604:	6013      	str	r3, [r2, #0]
	  		Ay=l.y;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4a55      	ldr	r2, [pc, #340]	; (8002760 <main+0x290>)
 800260a:	6013      	str	r3, [r2, #0]
	  		Az=l.z;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4a55      	ldr	r2, [pc, #340]	; (8002764 <main+0x294>)
 8002610:	6013      	str	r3, [r2, #0]
	  	    //Calculate strain values
	  	          HAL_ADC_Start(&hadc1);
 8002612:	4855      	ldr	r0, [pc, #340]	; (8002768 <main+0x298>)
 8002614:	f001 f916 	bl	8003844 <HAL_ADC_Start>
	  	        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	4852      	ldr	r0, [pc, #328]	; (8002768 <main+0x298>)
 800261e:	f001 f9cb 	bl	80039b8 <HAL_ADC_PollForConversion>
	  	          rawOne = HAL_ADC_GetValue(&hadc1);
 8002622:	4851      	ldr	r0, [pc, #324]	; (8002768 <main+0x298>)
 8002624:	f001 faa0 	bl	8003b68 <HAL_ADC_GetValue>
 8002628:	4603      	mov	r3, r0
 800262a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e



	  	          HAL_ADC_Start(&hadc2);
 800262e:	484f      	ldr	r0, [pc, #316]	; (800276c <main+0x29c>)
 8002630:	f001 f908 	bl	8003844 <HAL_ADC_Start>
	  	          HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	484c      	ldr	r0, [pc, #304]	; (800276c <main+0x29c>)
 800263a:	f001 f9bd 	bl	80039b8 <HAL_ADC_PollForConversion>
	  	          rawTwo = HAL_ADC_GetValue(&hadc2);
 800263e:	484b      	ldr	r0, [pc, #300]	; (800276c <main+0x29c>)
 8002640:	f001 fa92 	bl	8003b68 <HAL_ADC_GetValue>
 8002644:	4603      	mov	r3, r0
 8002646:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c



	  	          Str= ((float)(rawTwo - rawOne))*(3.3/4096);
 800264a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800264e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265c:	ee17 0a90 	vmov	r0, s15
 8002660:	f7fd ff72 	bl	8000548 <__aeabi_f2d>
 8002664:	a32c      	add	r3, pc, #176	; (adr r3, 8002718 <main+0x248>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffc5 	bl	80005f8 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f7fe fab7 	bl	8000be8 <__aeabi_d2f>
 800267a:	4603      	mov	r3, r0
 800267c:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <main+0x2a0>)
 800267e:	6013      	str	r3, [r2, #0]

	  	//Write Data to SD Card

	  		sprintf(output, "%.3f \t     %.3f    %.3f  %.3f    %.3f \t \n", temperature, pressure, altitude, Az, Str);
 8002680:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <main+0x2a4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff5f 	bl	8000548 <__aeabi_f2d>
 800268a:	e9c7 0100 	strd	r0, r1, [r7]
 800268e:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <main+0x2a8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff58 	bl	8000548 <__aeabi_f2d>
 8002698:	4604      	mov	r4, r0
 800269a:	460d      	mov	r5, r1
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <main+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff51 	bl	8000548 <__aeabi_f2d>
 80026a6:	4680      	mov	r8, r0
 80026a8:	4689      	mov	r9, r1
 80026aa:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <main+0x294>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd ff4a 	bl	8000548 <__aeabi_f2d>
 80026b4:	4682      	mov	sl, r0
 80026b6:	468b      	mov	fp, r1
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <main+0x2a0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff43 	bl	8000548 <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	f107 0018 	add.w	r0, r7, #24
 80026ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80026ce:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80026d2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80026d6:	e9cd 4500 	strd	r4, r5, [sp]
 80026da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026de:	4928      	ldr	r1, [pc, #160]	; (8002780 <main+0x2b0>)
 80026e0:	f008 fb02 	bl	800ace8 <siprintf>
	  		fresult = f_open(&fil, "FlightData.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 80026e4:	2233      	movs	r2, #51	; 0x33
 80026e6:	4919      	ldr	r1, [pc, #100]	; (800274c <main+0x27c>)
 80026e8:	4819      	ldr	r0, [pc, #100]	; (8002750 <main+0x280>)
 80026ea:	f006 ffff 	bl	80096ec <f_open>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <main+0x258>)
 80026f4:	701a      	strb	r2, [r3, #0]
	  		f_puts(output, &fil);
 80026f6:	f107 0318 	add.w	r3, r7, #24
 80026fa:	4915      	ldr	r1, [pc, #84]	; (8002750 <main+0x280>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f007 fc74 	bl	8009fea <f_puts>
	  		fresult = f_close(&fil);
 8002702:	4813      	ldr	r0, [pc, #76]	; (8002750 <main+0x280>)
 8002704:	f007 fbd0 	bl	8009ea8 <f_close>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <main+0x258>)
 800270e:	701a      	strb	r2, [r3, #0]
  {
 8002710:	e762      	b.n	80025d8 <main+0x108>
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	66666666 	.word	0x66666666
 800271c:	3f4a6666 	.word	0x3f4a6666
 8002720:	0800dbb4 	.word	0x0800dbb4
 8002724:	200003dc 	.word	0x200003dc
 8002728:	20002444 	.word	0x20002444
 800272c:	20002848 	.word	0x20002848
 8002730:	3fe00000 	.word	0x3fe00000
 8002734:	20002850 	.word	0x20002850
 8002738:	0800dbb8 	.word	0x0800dbb8
 800273c:	20002448 	.word	0x20002448
 8002740:	2000284c 	.word	0x2000284c
 8002744:	20002854 	.word	0x20002854
 8002748:	0800dbd4 	.word	0x0800dbd4
 800274c:	0800dbf0 	.word	0x0800dbf0
 8002750:	20001414 	.word	0x20001414
 8002754:	0800dc00 	.word	0x0800dc00
 8002758:	20000314 	.word	0x20000314
 800275c:	200003cc 	.word	0x200003cc
 8002760:	200003d0 	.word	0x200003d0
 8002764:	200003d4 	.word	0x200003d4
 8002768:	2000024c 	.word	0x2000024c
 800276c:	200002b0 	.word	0x200002b0
 8002770:	200003d8 	.word	0x200003d8
 8002774:	20000238 	.word	0x20000238
 8002778:	2000023c 	.word	0x2000023c
 800277c:	20000240 	.word	0x20000240
 8002780:	0800dc50 	.word	0x0800dc50

08002784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b096      	sub	sp, #88	; 0x58
 8002788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	2244      	movs	r2, #68	; 0x44
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f007 fda8 	bl	800a2e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002798:	463b      	mov	r3, r7
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027aa:	f002 ff59 	bl	8005660 <HAL_PWREx_ControlVoltageScaling>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80027b4:	f000 f9c0 	bl	8002b38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80027b8:	2310      	movs	r3, #16
 80027ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027bc:	2301      	movs	r3, #1
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80027c4:	2360      	movs	r3, #96	; 0x60
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 ff9b 	bl	800570c <HAL_RCC_OscConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80027dc:	f000 f9ac 	bl	8002b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e0:	230f      	movs	r3, #15
 80027e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80027e4:	2300      	movs	r3, #0
 80027e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027f4:	463b      	mov	r3, r7
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 fbe9 	bl	8005fd0 <HAL_RCC_ClockConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002804:	f000 f998 	bl	8002b38 <Error_Handler>
  }
}
 8002808:	bf00      	nop
 800280a:	3758      	adds	r7, #88	; 0x58
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
 8002830:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002832:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002834:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <MX_ADC1_Init+0xe4>)
 8002836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <MX_ADC1_Init+0xe0>)
 800283a:	2200      	movs	r2, #0
 800283c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800284a:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <MX_ADC1_Init+0xe0>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002852:	2204      	movs	r2, #4
 8002854:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002858:	2200      	movs	r2, #0
 800285a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <MX_ADC1_Init+0xe0>)
 800285e:	2200      	movs	r2, #0
 8002860:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002864:	2201      	movs	r2, #1
 8002866:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <MX_ADC1_Init+0xe0>)
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002872:	2200      	movs	r2, #0
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002878:	2200      	movs	r2, #0
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <MX_ADC1_Init+0xe0>)
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002886:	2200      	movs	r2, #0
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <MX_ADC1_Init+0xe0>)
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002892:	4817      	ldr	r0, [pc, #92]	; (80028f0 <MX_ADC1_Init+0xe0>)
 8002894:	f000 fe86 	bl	80035a4 <HAL_ADC_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800289e:	f000 f94b 	bl	8002b38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	4619      	mov	r1, r3
 80028ac:	4810      	ldr	r0, [pc, #64]	; (80028f0 <MX_ADC1_Init+0xe0>)
 80028ae:	f001 fe11 	bl	80044d4 <HAL_ADCEx_MultiModeConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80028b8:	f000 f93e 	bl	8002b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_ADC1_Init+0xe8>)
 80028be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028c0:	2306      	movs	r3, #6
 80028c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028c8:	237f      	movs	r3, #127	; 0x7f
 80028ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028cc:	2304      	movs	r3, #4
 80028ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <MX_ADC1_Init+0xe0>)
 80028da:	f001 f953 	bl	8003b84 <HAL_ADC_ConfigChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80028e4:	f000 f928 	bl	8002b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000024c 	.word	0x2000024c
 80028f4:	50040000 	.word	0x50040000
 80028f8:	25b00200 	.word	0x25b00200

080028fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002902:	463b      	mov	r3, r7
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
 8002910:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002914:	4a29      	ldr	r2, [pc, #164]	; (80029bc <MX_ADC2_Init+0xc0>)
 8002916:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <MX_ADC2_Init+0xbc>)
 800291a:	2200      	movs	r2, #0
 800291c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <MX_ADC2_Init+0xbc>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002932:	2204      	movs	r2, #4
 8002934:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002938:	2200      	movs	r2, #0
 800293a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <MX_ADC2_Init+0xbc>)
 800293e:	2200      	movs	r2, #0
 8002940:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002944:	2201      	movs	r2, #1
 8002946:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <MX_ADC2_Init+0xbc>)
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002952:	2200      	movs	r2, #0
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002958:	2200      	movs	r2, #0
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <MX_ADC2_Init+0xbc>)
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002966:	2200      	movs	r2, #0
 8002968:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_ADC2_Init+0xbc>)
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002972:	4811      	ldr	r0, [pc, #68]	; (80029b8 <MX_ADC2_Init+0xbc>)
 8002974:	f000 fe16 	bl	80035a4 <HAL_ADC_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800297e:	f000 f8db 	bl	8002b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <MX_ADC2_Init+0xc4>)
 8002984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002986:	2306      	movs	r3, #6
 8002988:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800298a:	2301      	movs	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800298e:	237f      	movs	r3, #127	; 0x7f
 8002990:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002992:	2304      	movs	r3, #4
 8002994:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800299a:	463b      	mov	r3, r7
 800299c:	4619      	mov	r1, r3
 800299e:	4806      	ldr	r0, [pc, #24]	; (80029b8 <MX_ADC2_Init+0xbc>)
 80029a0:	f001 f8f0 	bl	8003b84 <HAL_ADC_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80029aa:	f000 f8c5 	bl	8002b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200002b0 	.word	0x200002b0
 80029bc:	50040100 	.word	0x50040100
 80029c0:	2a000400 	.word	0x2a000400

080029c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <MX_I2C1_Init+0x78>)
 80029cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029d0:	f640 6214 	movw	r2, #3604	; 0xe14
 80029d4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029de:	2201      	movs	r2, #1
 80029e0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <MX_I2C1_Init+0x74>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <MX_I2C1_Init+0x74>)
 8002a02:	f002 f87b 	bl	8004afc <HAL_I2C_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a0c:	f000 f894 	bl	8002b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a10:	2100      	movs	r1, #0
 8002a12:	4809      	ldr	r0, [pc, #36]	; (8002a38 <MX_I2C1_Init+0x74>)
 8002a14:	f002 fd7e 	bl	8005514 <HAL_I2CEx_ConfigAnalogFilter>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002a1e:	f000 f88b 	bl	8002b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a22:	2100      	movs	r1, #0
 8002a24:	4804      	ldr	r0, [pc, #16]	; (8002a38 <MX_I2C1_Init+0x74>)
 8002a26:	f002 fdc0 	bl	80055aa <HAL_I2CEx_ConfigDigitalFilter>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002a30:	f000 f882 	bl	8002b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000314 	.word	0x20000314
 8002a3c:	40005400 	.word	0x40005400

08002a40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <MX_SPI1_Init+0x78>)
 8002a48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a8e:	2207      	movs	r2, #7
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_SPI1_Init+0x74>)
 8002aa0:	f003 fe08 	bl	80066b4 <HAL_SPI_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002aaa:	f000 f845 	bl	8002b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000368 	.word	0x20000368
 8002ab8:	40013000 	.word	0x40013000

08002abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <MX_GPIO_Init+0x74>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <MX_GPIO_Init+0x74>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MX_GPIO_Init+0x74>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_GPIO_Init+0x74>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <MX_GPIO_Init+0x74>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_GPIO_Init+0x74>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2101      	movs	r1, #1
 8002b06:	480b      	ldr	r0, [pc, #44]	; (8002b34 <MX_GPIO_Init+0x78>)
 8002b08:	f001 ffe0 	bl	8004acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b10:	2301      	movs	r3, #1
 8002b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	4619      	mov	r1, r3
 8002b22:	4804      	ldr	r0, [pc, #16]	; (8002b34 <MX_GPIO_Init+0x78>)
 8002b24:	f001 fe60 	bl	80047e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b28:	bf00      	nop
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	48000400 	.word	0x48000400

08002b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b3c:	b672      	cpsid	i
}
 8002b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <Error_Handler+0x8>
	...

08002b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_MspInit+0x44>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <HAL_MspInit+0x44>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6613      	str	r3, [r2, #96]	; 0x60
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_MspInit+0x44>)
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_MspInit+0x44>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <HAL_MspInit+0x44>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_MspInit+0x44>)
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08c      	sub	sp, #48	; 0x30
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <HAL_ADC_MspInit+0xf0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12e      	bne.n	8002c0c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_ADC_MspInit+0xf4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <HAL_ADC_MspInit+0xf4>)
 8002bb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_ADC_MspInit+0xf4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10b      	bne.n	8002bd8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc4:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002bc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bcc:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002bf0:	2330      	movs	r3, #48	; 0x30
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002bf4:	230b      	movs	r3, #11
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	4619      	mov	r1, r3
 8002c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c06:	f001 fdef 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002c0a:	e032      	b.n	8002c72 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_ADC_MspInit+0xfc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d12d      	bne.n	8002c72 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <HAL_ADC_MspInit+0xf4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <HAL_ADC_MspInit+0xf4>)
 8002c1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_ADC_MspInit+0xf4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10b      	bne.n	8002c40 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2c:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002c2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c34:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_ADC_MspInit+0xf8>)
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c58:	2330      	movs	r3, #48	; 0x30
 8002c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c5c:	230b      	movs	r3, #11
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c6e:	f001 fdbb 	bl	80047e8 <HAL_GPIO_Init>
}
 8002c72:	bf00      	nop
 8002c74:	3730      	adds	r7, #48	; 0x30
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	50040000 	.word	0x50040000
 8002c80:	20002858 	.word	0x20002858
 8002c84:	40021000 	.word	0x40021000
 8002c88:	50040100 	.word	0x50040100

08002c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b096      	sub	sp, #88	; 0x58
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ca4:	f107 0310 	add.w	r3, r7, #16
 8002ca8:	2234      	movs	r2, #52	; 0x34
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f007 fb1b 	bl	800a2e8 <memset>
  if(hi2c->Instance==I2C1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_I2C_MspInit+0xa8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d137      	bne.n	8002d2c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fb6d 	bl	80063a8 <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002cd4:	f7ff ff30 	bl	8002b38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cdc:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cf0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf6:	2312      	movs	r3, #18
 8002cf8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d02:	2304      	movs	r3, #4
 8002d04:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d10:	f001 fd6a 	bl	80047e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_I2C_MspInit+0xac>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d2c:	bf00      	nop
 8002d2e:	3758      	adds	r7, #88	; 0x58
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40005400 	.word	0x40005400
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_SPI_MspInit+0x7c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d128      	bne.n	8002db0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d68:	6613      	str	r3, [r2, #96]	; 0x60
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_SPI_MspInit+0x80>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002d8e:	23c2      	movs	r3, #194	; 0xc2
 8002d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d9e:	2305      	movs	r3, #5
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4619      	mov	r1, r3
 8002da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dac:	f001 fd1c 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002db0:	bf00      	nop
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40013000 	.word	0x40013000
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <SDTimer_Handler+0x40>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <SDTimer_Handler+0x1c>
    Timer1--;
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <SDTimer_Handler+0x40>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <SDTimer_Handler+0x40>)
 8002dda:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <SDTimer_Handler+0x44>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <SDTimer_Handler+0x34>
    Timer2--;
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <SDTimer_Handler+0x44>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SDTimer_Handler+0x44>)
 8002df2:	801a      	strh	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	2000285e 	.word	0x2000285e
 8002e04:	20002860 	.word	0x20002860

08002e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e0c:	e7fe      	b.n	8002e0c <NMI_Handler+0x4>

08002e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e12:	e7fe      	b.n	8002e12 <HardFault_Handler+0x4>

08002e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <MemManage_Handler+0x4>

08002e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <BusFault_Handler+0x4>

08002e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <UsageFault_Handler+0x4>

08002e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	 FatFsCnt++;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <SysTick_Handler+0x30>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <SysTick_Handler+0x30>)
 8002e60:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <SysTick_Handler+0x30>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	d904      	bls.n	8002e76 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Handler+0x30>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8002e72:	f7ff ffa5 	bl	8002dc0 <SDTimer_Handler>
		  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e76:	f000 f95b 	bl	8003130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000285c 	.word	0x2000285c

08002e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return 1;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_kill>:

int _kill(int pid, int sig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e9e:	f007 f9eb 	bl	800a278 <__errno>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2216      	movs	r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_exit>:

void _exit (int status)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ffe7 	bl	8002e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ec6:	e7fe      	b.n	8002ec6 <_exit+0x12>

08002ec8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e00a      	b.n	8002ef0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eda:	f3af 8000 	nop.w
 8002ede:	4601      	mov	r1, r0
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	60ba      	str	r2, [r7, #8]
 8002ee6:	b2ca      	uxtb	r2, r1
 8002ee8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	dbf0      	blt.n	8002eda <_read+0x12>
  }

  return len;
 8002ef8:	687b      	ldr	r3, [r7, #4]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e009      	b.n	8002f28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	60ba      	str	r2, [r7, #8]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3301      	adds	r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	dbf1      	blt.n	8002f14 <_write+0x12>
  }
  return len;
 8002f30:	687b      	ldr	r3, [r7, #4]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_close>:

int _close(int file)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f62:	605a      	str	r2, [r3, #4]
  return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <_isatty>:

int _isatty(int file)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f7a:	2301      	movs	r3, #1
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <_sbrk+0x5c>)
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <_sbrk+0x60>)
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <_sbrk+0x64>)
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <_sbrk+0x68>)
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d207      	bcs.n	8002fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd4:	f007 f950 	bl	800a278 <__errno>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	220c      	movs	r2, #12
 8002fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	e009      	b.n	8002ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <_sbrk+0x64>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <_sbrk+0x64>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <_sbrk+0x64>)
 8002ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	2000a000 	.word	0x2000a000
 8003004:	00000400 	.word	0x00000400
 8003008:	20002864 	.word	0x20002864
 800300c:	20002ab8 	.word	0x20002ab8

08003010 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <SystemInit+0x20>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	4a05      	ldr	r2, [pc, #20]	; (8003030 <SystemInit+0x20>)
 800301c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800306c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003038:	f7ff ffea 	bl	8003010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800303c:	480c      	ldr	r0, [pc, #48]	; (8003070 <LoopForever+0x6>)
  ldr r1, =_edata
 800303e:	490d      	ldr	r1, [pc, #52]	; (8003074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <LoopForever+0xe>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003044:	e002      	b.n	800304c <LoopCopyDataInit>

08003046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800304a:	3304      	adds	r3, #4

0800304c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800304c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800304e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003050:	d3f9      	bcc.n	8003046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003054:	4c0a      	ldr	r4, [pc, #40]	; (8003080 <LoopForever+0x16>)
  movs r3, #0
 8003056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003058:	e001      	b.n	800305e <LoopFillZerobss>

0800305a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800305a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800305c:	3204      	adds	r2, #4

0800305e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800305e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003060:	d3fb      	bcc.n	800305a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003062:	f007 f90f 	bl	800a284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003066:	f7ff fa33 	bl	80024d0 <main>

0800306a <LoopForever>:

LoopForever:
    b LoopForever
 800306a:	e7fe      	b.n	800306a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800306c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003074:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003078:	0800e53c 	.word	0x0800e53c
  ldr r2, =_sbss
 800307c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003080:	20002ab8 	.word	0x20002ab8

08003084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003084:	e7fe      	b.n	8003084 <ADC1_2_IRQHandler>

08003086 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003090:	2003      	movs	r0, #3
 8003092:	f001 fb75 	bl	8004780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003096:	200f      	movs	r0, #15
 8003098:	f000 f80e 	bl	80030b8 <HAL_InitTick>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	71fb      	strb	r3, [r7, #7]
 80030a6:	e001      	b.n	80030ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030a8:	f7ff fd4c 	bl	8002b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030ac:	79fb      	ldrb	r3, [r7, #7]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_InitTick+0x6c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d023      	beq.n	8003114 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030cc:	4b16      	ldr	r3, [pc, #88]	; (8003128 <HAL_InitTick+0x70>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_InitTick+0x6c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030da:	fbb3 f3f1 	udiv	r3, r3, r1
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 fb73 	bl	80047ce <HAL_SYSTICK_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b0f      	cmp	r3, #15
 80030f2:	d809      	bhi.n	8003108 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f4:	2200      	movs	r2, #0
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f001 fb4b 	bl	8004796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003100:	4a0a      	ldr	r2, [pc, #40]	; (800312c <HAL_InitTick+0x74>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e007      	b.n	8003118 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e004      	b.n	8003118 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	e001      	b.n	8003118 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000014 	.word	0x20000014
 8003128:	2000000c 	.word	0x2000000c
 800312c:	20000010 	.word	0x20000010

08003130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_IncTick+0x20>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_IncTick+0x24>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4413      	add	r3, r2
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <HAL_IncTick+0x24>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000014 	.word	0x20000014
 8003154:	20002868 	.word	0x20002868

08003158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return uwTick;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_GetTick+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20002868 	.word	0x20002868

08003170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff ffee 	bl	8003158 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d005      	beq.n	8003196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_Delay+0x44>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003196:	bf00      	nop
 8003198:	f7ff ffde 	bl	8003158 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d8f7      	bhi.n	8003198 <HAL_Delay+0x28>
  {
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000014 	.word	0x20000014

080031b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	461a      	mov	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <LL_ADC_SetOffset+0x44>)
 8003242:	4013      	ands	r3, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	4313      	orrs	r3, r2
 8003250:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	03fff000 	.word	0x03fff000

08003268 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3360      	adds	r3, #96	; 0x60
 8003276:	461a      	mov	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3360      	adds	r3, #96	; 0x60
 80032a4:	461a      	mov	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	615a      	str	r2, [r3, #20]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003316:	b480      	push	{r7}
 8003318:	b087      	sub	sp, #28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3330      	adds	r3, #48	; 0x30
 8003326:	461a      	mov	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	4413      	add	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	211f      	movs	r1, #31
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	401a      	ands	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0e9b      	lsrs	r3, r3, #26
 800334e:	f003 011f 	and.w	r1, r3, #31
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	431a      	orrs	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800336e:	b480      	push	{r7}
 8003370:	b087      	sub	sp, #28
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3314      	adds	r3, #20
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0e5b      	lsrs	r3, r3, #25
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	4413      	add	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	0d1b      	lsrs	r3, r3, #20
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	2107      	movs	r1, #7
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	401a      	ands	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	0d1b      	lsrs	r3, r3, #20
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	431a      	orrs	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0318 	and.w	r3, r3, #24
 80033e6:	4908      	ldr	r1, [pc, #32]	; (8003408 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033e8:	40d9      	lsrs	r1, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	400b      	ands	r3, r1
 80033ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f2:	431a      	orrs	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	0007ffff 	.word	0x0007ffff

0800340c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 031f 	and.w	r3, r3, #31
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6093      	str	r3, [r2, #8]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800347c:	d101      	bne.n	8003482 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80034a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034cc:	d101      	bne.n	80034d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <LL_ADC_IsEnabled+0x18>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <LL_ADC_IsEnabled+0x1a>
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800353e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003542:	f043 0204 	orr.w	r2, r3, #4
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d101      	bne.n	800356e <LL_ADC_REG_IsConversionOngoing+0x18>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d101      	bne.n	8003594 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e131      	b.n	8003822 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fadd 	bl	8002b8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff3f 	bl	8003468 <LL_ADC_IsDeepPowerDownEnabled>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff25 	bl	8003444 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff5a 	bl	80034b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d115      	bne.n	8003636 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff3e 	bl	8003490 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003614:	4b85      	ldr	r3, [pc, #532]	; (800382c <HAL_ADC_Init+0x288>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	4a85      	ldr	r2, [pc, #532]	; (8003830 <HAL_ADC_Init+0x28c>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	3301      	adds	r3, #1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003628:	e002      	b.n	8003630 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3b01      	subs	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f9      	bne.n	800362a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ff3c 	bl	80034b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f043 0210 	orr.w	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff ff75 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 800366c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 80ca 	bne.w	8003810 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 80c6 	bne.w	8003810 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800368c:	f043 0202 	orr.w	r2, r3, #2
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff35 	bl	8003508 <LL_ADC_IsEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d110      	bne.n	80036c6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036a4:	4863      	ldr	r0, [pc, #396]	; (8003834 <HAL_ADC_Init+0x290>)
 80036a6:	f7ff ff2f 	bl	8003508 <LL_ADC_IsEnabled>
 80036aa:	4604      	mov	r4, r0
 80036ac:	4862      	ldr	r0, [pc, #392]	; (8003838 <HAL_ADC_Init+0x294>)
 80036ae:	f7ff ff2b 	bl	8003508 <LL_ADC_IsEnabled>
 80036b2:	4603      	mov	r3, r0
 80036b4:	4323      	orrs	r3, r4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d105      	bne.n	80036c6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4619      	mov	r1, r3
 80036c0:	485e      	ldr	r0, [pc, #376]	; (800383c <HAL_ADC_Init+0x298>)
 80036c2:	f7ff fd79 	bl	80031b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7e5b      	ldrb	r3, [r3, #25]
 80036ca:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036d0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80036d6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80036dc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d106      	bne.n	8003702 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	3b01      	subs	r3, #1
 80036fa:	045b      	lsls	r3, r3, #17
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_ADC_Init+0x29c>)
 8003726:	4013      	ands	r3, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	69b9      	ldr	r1, [r7, #24]
 800372e:	430b      	orrs	r3, r1
 8003730:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff0d 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 800373c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff1a 	bl	800357c <LL_ADC_INJ_IsConversionOngoing>
 8003748:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d13d      	bne.n	80037cc <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d13a      	bne.n	80037cc <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800375a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003762:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003772:	f023 0302 	bic.w	r3, r3, #2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	430b      	orrs	r3, r1
 800377e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003786:	2b01      	cmp	r3, #1
 8003788:	d118      	bne.n	80037bc <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003794:	f023 0304 	bic.w	r3, r3, #4
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037a0:	4311      	orrs	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ac:	430a      	orrs	r2, r1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	e007      	b.n	80037cc <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10c      	bne.n	80037ee <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f023 010f 	bic.w	r1, r3, #15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	1e5a      	subs	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
 80037ec:	e007      	b.n	80037fe <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 020f 	bic.w	r2, r2, #15
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
 800380e:	e007      	b.n	8003820 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f043 0210 	orr.w	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003820:	7ffb      	ldrb	r3, [r7, #31]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}
 800382a:	bf00      	nop
 800382c:	2000000c 	.word	0x2000000c
 8003830:	053e2d63 	.word	0x053e2d63
 8003834:	50040000 	.word	0x50040000
 8003838:	50040100 	.word	0x50040100
 800383c:	50040300 	.word	0x50040300
 8003840:	fff0c007 	.word	0xfff0c007

08003844 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800384c:	4857      	ldr	r0, [pc, #348]	; (80039ac <HAL_ADC_Start+0x168>)
 800384e:	f7ff fddd 	bl	800340c <LL_ADC_GetMultimode>
 8003852:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fe7c 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	f040 809c 	bne.w	800399e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_ADC_Start+0x30>
 8003870:	2302      	movs	r3, #2
 8003872:	e097      	b.n	80039a4 <HAL_ADC_Start+0x160>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fd7d 	bl	800437c <ADC_Enable>
 8003882:	4603      	mov	r3, r0
 8003884:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 8083 	bne.w	8003994 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a42      	ldr	r2, [pc, #264]	; (80039b0 <HAL_ADC_Start+0x16c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d002      	beq.n	80038b2 <HAL_ADC_Start+0x6e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	e000      	b.n	80038b4 <HAL_ADC_Start+0x70>
 80038b2:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <HAL_ADC_Start+0x170>)
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d002      	beq.n	80038c2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	d106      	bne.n	80038ea <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	f023 0206 	bic.w	r2, r3, #6
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	659a      	str	r2, [r3, #88]	; 0x58
 80038e8:	e002      	b.n	80038f0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	221c      	movs	r2, #28
 80038f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <HAL_ADC_Start+0x16c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d002      	beq.n	8003910 <HAL_ADC_Start+0xcc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e000      	b.n	8003912 <HAL_ADC_Start+0xce>
 8003910:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_ADC_Start+0x170>)
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	4293      	cmp	r3, r2
 8003918:	d008      	beq.n	800392c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b05      	cmp	r3, #5
 8003924:	d002      	beq.n	800392c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b09      	cmp	r3, #9
 800392a:	d114      	bne.n	8003956 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003942:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fded 	bl	800352e <LL_ADC_REG_StartConversion>
 8003954:	e025      	b.n	80039a2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <HAL_ADC_Start+0x16c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d002      	beq.n	8003972 <HAL_ADC_Start+0x12e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	e000      	b.n	8003974 <HAL_ADC_Start+0x130>
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_ADC_Start+0x170>)
 8003974:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00f      	beq.n	80039a2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800398a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
 8003992:	e006      	b.n	80039a2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800399c:	e001      	b.n	80039a2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	50040300 	.word	0x50040300
 80039b0:	50040100 	.word	0x50040100
 80039b4:	50040000 	.word	0x50040000

080039b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039c2:	4866      	ldr	r0, [pc, #408]	; (8003b5c <HAL_ADC_PollForConversion+0x1a4>)
 80039c4:	f7ff fd22 	bl	800340c <LL_ADC_GetMultimode>
 80039c8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d102      	bne.n	80039d8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80039d2:	2308      	movs	r3, #8
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	e02a      	b.n	8003a2e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d002      	beq.n	80039ea <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b09      	cmp	r3, #9
 80039e8:	d111      	bne.n	8003a0e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0a4      	b.n	8003b52 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a08:	2304      	movs	r3, #4
 8003a0a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a0c:	e00f      	b.n	8003a2e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a0e:	4853      	ldr	r0, [pc, #332]	; (8003b5c <HAL_ADC_PollForConversion+0x1a4>)
 8003a10:	f7ff fd0a 	bl	8003428 <LL_ADC_GetMultiDMATransfer>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e093      	b.n	8003b52 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a2e:	f7ff fb93 	bl	8003158 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a34:	e021      	b.n	8003a7a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d01d      	beq.n	8003a7a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a3e:	f7ff fb8b 	bl	8003158 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <HAL_ADC_PollForConversion+0x9c>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d112      	bne.n	8003a7a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f043 0204 	orr.w	r2, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e06b      	b.n	8003b52 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0d6      	beq.n	8003a36 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fc29 	bl	80032f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01c      	beq.n	8003ade <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7e5b      	ldrb	r3, [r3, #25]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d118      	bne.n	8003ade <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d111      	bne.n	8003ade <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_ADC_PollForConversion+0x1a8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d002      	beq.n	8003aee <HAL_ADC_PollForConversion+0x136>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	e000      	b.n	8003af0 <HAL_ADC_PollForConversion+0x138>
 8003aee:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <HAL_ADC_PollForConversion+0x1ac>)
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d008      	beq.n	8003b0a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d002      	beq.n	8003b0a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b09      	cmp	r3, #9
 8003b08:	d104      	bne.n	8003b14 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e00c      	b.n	8003b2e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <HAL_ADC_PollForConversion+0x1a8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d002      	beq.n	8003b24 <HAL_ADC_PollForConversion+0x16c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	e000      	b.n	8003b26 <HAL_ADC_PollForConversion+0x16e>
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <HAL_ADC_PollForConversion+0x1ac>)
 8003b26:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d104      	bne.n	8003b3e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e008      	b.n	8003b50 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	220c      	movs	r2, #12
 8003b4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	50040300 	.word	0x50040300
 8003b60:	50040100 	.word	0x50040100
 8003b64:	50040000 	.word	0x50040000

08003b68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b0b6      	sub	sp, #216	; 0xd8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x22>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e3d5      	b.n	8004352 <HAL_ADC_ConfigChannel+0x7ce>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fccf 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 83ba 	bne.w	8004334 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d824      	bhi.n	8003c12 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	3b02      	subs	r3, #2
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d81b      	bhi.n	8003c0a <HAL_ADC_ConfigChannel+0x86>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <HAL_ADC_ConfigChannel+0x54>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003bf1 	.word	0x08003bf1
 8003be0:	08003bf9 	.word	0x08003bf9
 8003be4:	08003c01 	.word	0x08003c01
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	220c      	movs	r2, #12
 8003bec:	605a      	str	r2, [r3, #4]
          break;
 8003bee:	e011      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2212      	movs	r2, #18
 8003bf4:	605a      	str	r2, [r3, #4]
          break;
 8003bf6:	e00d      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2218      	movs	r2, #24
 8003bfc:	605a      	str	r2, [r3, #4]
          break;
 8003bfe:	e009      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c06:	605a      	str	r2, [r3, #4]
          break;
 8003c08:	e004      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2206      	movs	r2, #6
 8003c0e:	605a      	str	r2, [r3, #4]
          break;
 8003c10:	e000      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003c12:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	f7ff fb78 	bl	8003316 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fc93 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 8003c30:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fc9f 	bl	800357c <LL_ADC_INJ_IsConversionOngoing>
 8003c3e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 81c1 	bne.w	8003fce <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 81bc 	bne.w	8003fce <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c5e:	d10f      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f7ff fb7f 	bl	800336e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fb26 	bl	80032ca <LL_ADC_SetSamplingTimeCommonConfig>
 8003c7e:	e00e      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f7ff fb6e 	bl	800336e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fb16 	bl	80032ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6919      	ldr	r1, [r3, #16]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cd0:	f7ff faa6 	bl	8003220 <LL_ADC_SetOffset>
 8003cd4:	e17b      	b.n	8003fce <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fac3 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x17e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fab8 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	0e9b      	lsrs	r3, r3, #26
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	e01e      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x1bc>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff faad 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003d30:	2320      	movs	r3, #32
 8003d32:	e004      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003d34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x1d4>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0e9b      	lsrs	r3, r3, #26
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	e018      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x206>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003d7c:	2320      	movs	r3, #32
 8003d7e:	e004      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003d80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d106      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fa7c 	bl	8003294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fa60 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x244>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2101      	movs	r1, #1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fa55 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	0e9b      	lsrs	r3, r3, #26
 8003dc2:	f003 021f 	and.w	r2, r3, #31
 8003dc6:	e01e      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x282>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fa4a 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003df6:	2320      	movs	r3, #32
 8003df8:	e004      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x29a>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	0e9b      	lsrs	r3, r3, #26
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	e018      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x2cc>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003e32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003e42:	2320      	movs	r3, #32
 8003e44:	e004      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d106      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fa19 	bl	8003294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff f9fd 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x30a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f9f2 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003e84:	4603      	mov	r3, r0
 8003e86:	0e9b      	lsrs	r3, r3, #26
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	e01e      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x348>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff f9e7 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e004      	b.n	8003eca <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x360>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	e016      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x38e>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e004      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d106      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff f9b8 	bl	8003294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2103      	movs	r1, #3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f99c 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x3cc>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2103      	movs	r1, #3
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff f991 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003f46:	4603      	mov	r3, r0
 8003f48:	0e9b      	lsrs	r3, r3, #26
 8003f4a:	f003 021f 	and.w	r2, r3, #31
 8003f4e:	e017      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x3fc>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2103      	movs	r1, #3
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff f986 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f6a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003f72:	2320      	movs	r3, #32
 8003f74:	e003      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f78:	fab3 f383 	clz	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x414>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0e9b      	lsrs	r3, r3, #26
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	e011      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x438>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	e003      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d106      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2103      	movs	r1, #3
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff f963 	bl	8003294 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fa98 	bl	8003508 <LL_ADC_IsEnabled>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 8140 	bne.w	8004260 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	461a      	mov	r2, r3
 8003fee:	f7ff f9e9 	bl	80033c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	4a8f      	ldr	r2, [pc, #572]	; (8004234 <HAL_ADC_ConfigChannel+0x6b0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	f040 8131 	bne.w	8004260 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x4a2>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	0e9b      	lsrs	r3, r3, #26
 8004014:	3301      	adds	r3, #1
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2b09      	cmp	r3, #9
 800401c:	bf94      	ite	ls
 800401e:	2301      	movls	r3, #1
 8004020:	2300      	movhi	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	e019      	b.n	800405a <HAL_ADC_ConfigChannel+0x4d6>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004036:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800403e:	2320      	movs	r3, #32
 8004040:	e003      	b.n	800404a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	3301      	adds	r3, #1
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2b09      	cmp	r3, #9
 8004052:	bf94      	ite	ls
 8004054:	2301      	movls	r3, #1
 8004056:	2300      	movhi	r3, #0
 8004058:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800405a:	2b00      	cmp	r3, #0
 800405c:	d079      	beq.n	8004152 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <HAL_ADC_ConfigChannel+0x4f6>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	0e9b      	lsrs	r3, r3, #26
 8004070:	3301      	adds	r3, #1
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004078:	e015      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x522>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800408c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004092:	2320      	movs	r3, #32
 8004094:	e003      	b.n	800409e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004098:	fab3 f383 	clz	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	069b      	lsls	r3, r3, #26
 80040a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x542>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0e9b      	lsrs	r3, r3, #26
 80040b8:	3301      	adds	r3, #1
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2101      	movs	r1, #1
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	e017      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x572>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80040d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80040de:	2320      	movs	r3, #32
 80040e0:	e003      	b.n	80040ea <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80040e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	ea42 0103 	orr.w	r1, r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_ADC_ConfigChannel+0x598>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0e9b      	lsrs	r3, r3, #26
 800410c:	3301      	adds	r3, #1
 800410e:	f003 021f 	and.w	r2, r3, #31
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	051b      	lsls	r3, r3, #20
 800411a:	e018      	b.n	800414e <HAL_ADC_ConfigChannel+0x5ca>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004134:	2320      	movs	r3, #32
 8004136:	e003      	b.n	8004140 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3301      	adds	r3, #1
 8004142:	f003 021f 	and.w	r2, r3, #31
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800414e:	430b      	orrs	r3, r1
 8004150:	e081      	b.n	8004256 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415a:	2b00      	cmp	r3, #0
 800415c:	d107      	bne.n	800416e <HAL_ADC_ConfigChannel+0x5ea>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0e9b      	lsrs	r3, r3, #26
 8004164:	3301      	adds	r3, #1
 8004166:	069b      	lsls	r3, r3, #26
 8004168:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800416c:	e015      	b.n	800419a <HAL_ADC_ConfigChannel+0x616>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004186:	2320      	movs	r3, #32
 8004188:	e003      	b.n	8004192 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	3301      	adds	r3, #1
 8004194:	069b      	lsls	r3, r3, #26
 8004196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x636>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	0e9b      	lsrs	r3, r3, #26
 80041ac:	3301      	adds	r3, #1
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	2101      	movs	r1, #1
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	e017      	b.n	80041ea <HAL_ADC_ConfigChannel+0x666>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	61fb      	str	r3, [r7, #28]
  return result;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80041d2:	2320      	movs	r3, #32
 80041d4:	e003      	b.n	80041de <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	fab3 f383 	clz	r3, r3
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	3301      	adds	r3, #1
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	ea42 0103 	orr.w	r1, r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10d      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x692>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	0e9b      	lsrs	r3, r3, #26
 8004200:	3301      	adds	r3, #1
 8004202:	f003 021f 	and.w	r2, r3, #31
 8004206:	4613      	mov	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4413      	add	r3, r2
 800420c:	3b1e      	subs	r3, #30
 800420e:	051b      	lsls	r3, r3, #20
 8004210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004214:	e01e      	b.n	8004254 <HAL_ADC_ConfigChannel+0x6d0>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	613b      	str	r3, [r7, #16]
  return result;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800422e:	2320      	movs	r3, #32
 8004230:	e006      	b.n	8004240 <HAL_ADC_ConfigChannel+0x6bc>
 8004232:	bf00      	nop
 8004234:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3301      	adds	r3, #1
 8004242:	f003 021f 	and.w	r2, r3, #31
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	3b1e      	subs	r3, #30
 800424e:	051b      	lsls	r3, r3, #20
 8004250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004254:	430b      	orrs	r3, r1
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	4619      	mov	r1, r3
 800425c:	f7ff f887 	bl	800336e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b3d      	ldr	r3, [pc, #244]	; (800435c <HAL_ADC_ConfigChannel+0x7d8>)
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d06c      	beq.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800426c:	483c      	ldr	r0, [pc, #240]	; (8004360 <HAL_ADC_ConfigChannel+0x7dc>)
 800426e:	f7fe ffc9 	bl	8003204 <LL_ADC_GetCommonPathInternalCh>
 8004272:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3a      	ldr	r2, [pc, #232]	; (8004364 <HAL_ADC_ConfigChannel+0x7e0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d127      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d121      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a35      	ldr	r2, [pc, #212]	; (8004368 <HAL_ADC_ConfigChannel+0x7e4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d157      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800429a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800429e:	4619      	mov	r1, r3
 80042a0:	482f      	ldr	r0, [pc, #188]	; (8004360 <HAL_ADC_ConfigChannel+0x7dc>)
 80042a2:	f7fe ff9c 	bl	80031de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042a6:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_ADC_ConfigChannel+0x7e8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	4a30      	ldr	r2, [pc, #192]	; (8004370 <HAL_ADC_ConfigChannel+0x7ec>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	099b      	lsrs	r3, r3, #6
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	4613      	mov	r3, r2
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042c0:	e002      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f9      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ce:	e03a      	b.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <HAL_ADC_ConfigChannel+0x7f0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d113      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x77e>
 80042da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <HAL_ADC_ConfigChannel+0x7e4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d12a      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f8:	4619      	mov	r1, r3
 80042fa:	4819      	ldr	r0, [pc, #100]	; (8004360 <HAL_ADC_ConfigChannel+0x7dc>)
 80042fc:	f7fe ff6f 	bl	80031de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004300:	e021      	b.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <HAL_ADC_ConfigChannel+0x7f4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d11c      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800430c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d116      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a12      	ldr	r2, [pc, #72]	; (8004368 <HAL_ADC_ConfigChannel+0x7e4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d111      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004326:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800432a:	4619      	mov	r1, r3
 800432c:	480c      	ldr	r0, [pc, #48]	; (8004360 <HAL_ADC_ConfigChannel+0x7dc>)
 800432e:	f7fe ff56 	bl	80031de <LL_ADC_SetCommonPathInternalCh>
 8004332:	e008      	b.n	8004346 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800434e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004352:	4618      	mov	r0, r3
 8004354:	37d8      	adds	r7, #216	; 0xd8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	80080000 	.word	0x80080000
 8004360:	50040300 	.word	0x50040300
 8004364:	c7520000 	.word	0xc7520000
 8004368:	50040000 	.word	0x50040000
 800436c:	2000000c 	.word	0x2000000c
 8004370:	053e2d63 	.word	0x053e2d63
 8004374:	cb840000 	.word	0xcb840000
 8004378:	80000001 	.word	0x80000001

0800437c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff f8bb 	bl	8003508 <LL_ADC_IsEnabled>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d169      	bne.n	800446c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <ADC_Enable+0xfc>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f043 0201 	orr.w	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e055      	b.n	800446e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f88a 	bl	80034e0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80043cc:	482b      	ldr	r0, [pc, #172]	; (800447c <ADC_Enable+0x100>)
 80043ce:	f7fe ff19 	bl	8003204 <LL_ADC_GetCommonPathInternalCh>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043dc:	4b28      	ldr	r3, [pc, #160]	; (8004480 <ADC_Enable+0x104>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	4a28      	ldr	r2, [pc, #160]	; (8004484 <ADC_Enable+0x108>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	099b      	lsrs	r3, r3, #6
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	4613      	mov	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80043f6:	e002      	b.n	80043fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f9      	bne.n	80043f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004404:	f7fe fea8 	bl	8003158 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800440a:	e028      	b.n	800445e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff f879 	bl	8003508 <LL_ADC_IsEnabled>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff f85d 	bl	80034e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004426:	f7fe fe97 	bl	8003158 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d914      	bls.n	800445e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d00d      	beq.n	800445e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f043 0210 	orr.w	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e007      	b.n	800446e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d1cf      	bne.n	800440c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	8000003f 	.word	0x8000003f
 800447c:	50040300 	.word	0x50040300
 8004480:	2000000c 	.word	0x2000000c
 8004484:	053e2d63 	.word	0x053e2d63

08004488 <LL_ADC_IsEnabled>:
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <LL_ADC_IsEnabled+0x18>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <LL_ADC_IsEnabled+0x1a>
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <LL_ADC_REG_IsConversionOngoing>:
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d101      	bne.n	80044c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b09f      	sub	sp, #124	; 0x7c
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e089      	b.n	8004606 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044fa:	2300      	movs	r3, #0
 80044fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80044fe:	2300      	movs	r3, #0
 8004500:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a42      	ldr	r2, [pc, #264]	; (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d102      	bne.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800450c:	4b41      	ldr	r3, [pc, #260]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e001      	b.n	8004516 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e068      	b.n	8004606 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ffb9 	bl	80044ae <LL_ADC_REG_IsConversionOngoing>
 800453c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff ffb3 	bl	80044ae <LL_ADC_REG_IsConversionOngoing>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d14a      	bne.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800454e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004550:	2b00      	cmp	r3, #0
 8004552:	d147      	bne.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004556:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d027      	beq.n	80045b0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004572:	035b      	lsls	r3, r3, #13
 8004574:	430b      	orrs	r3, r1
 8004576:	431a      	orrs	r2, r3
 8004578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800457c:	4824      	ldr	r0, [pc, #144]	; (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800457e:	f7ff ff83 	bl	8004488 <LL_ADC_IsEnabled>
 8004582:	4604      	mov	r4, r0
 8004584:	4823      	ldr	r0, [pc, #140]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004586:	f7ff ff7f 	bl	8004488 <LL_ADC_IsEnabled>
 800458a:	4603      	mov	r3, r0
 800458c:	4323      	orrs	r3, r4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d132      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800459a:	f023 030f 	bic.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	6811      	ldr	r1, [r2, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	6892      	ldr	r2, [r2, #8]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	431a      	orrs	r2, r3
 80045aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045ae:	e023      	b.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80045b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045bc:	4814      	ldr	r0, [pc, #80]	; (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80045be:	f7ff ff63 	bl	8004488 <LL_ADC_IsEnabled>
 80045c2:	4604      	mov	r4, r0
 80045c4:	4813      	ldr	r0, [pc, #76]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80045c6:	f7ff ff5f 	bl	8004488 <LL_ADC_IsEnabled>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4323      	orrs	r3, r4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d112      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045da:	f023 030f 	bic.w	r3, r3, #15
 80045de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045e2:	e009      	b.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80045f6:	e000      	b.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004602:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004606:	4618      	mov	r0, r3
 8004608:	377c      	adds	r7, #124	; 0x7c
 800460a:	46bd      	mov	sp, r7
 800460c:	bd90      	pop	{r4, r7, pc}
 800460e:	bf00      	nop
 8004610:	50040000 	.word	0x50040000
 8004614:	50040100 	.word	0x50040100
 8004618:	50040300 	.word	0x50040300

0800461c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <__NVIC_SetPriorityGrouping+0x44>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004638:	4013      	ands	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <__NVIC_SetPriorityGrouping+0x44>)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	60d3      	str	r3, [r2, #12]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <__NVIC_GetPriorityGrouping+0x18>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	f003 0307 	and.w	r3, r3, #7
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	6039      	str	r1, [r7, #0]
 800468a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004690:	2b00      	cmp	r3, #0
 8004692:	db0a      	blt.n	80046aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	490c      	ldr	r1, [pc, #48]	; (80046cc <__NVIC_SetPriority+0x4c>)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	0112      	lsls	r2, r2, #4
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	440b      	add	r3, r1
 80046a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046a8:	e00a      	b.n	80046c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	4908      	ldr	r1, [pc, #32]	; (80046d0 <__NVIC_SetPriority+0x50>)
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	3b04      	subs	r3, #4
 80046b8:	0112      	lsls	r2, r2, #4
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	440b      	add	r3, r1
 80046be:	761a      	strb	r2, [r3, #24]
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	e000e100 	.word	0xe000e100
 80046d0:	e000ed00 	.word	0xe000ed00

080046d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	; 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f1c3 0307 	rsb	r3, r3, #7
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	bf28      	it	cs
 80046f2:	2304      	movcs	r3, #4
 80046f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	3304      	adds	r3, #4
 80046fa:	2b06      	cmp	r3, #6
 80046fc:	d902      	bls.n	8004704 <NVIC_EncodePriority+0x30>
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3b03      	subs	r3, #3
 8004702:	e000      	b.n	8004706 <NVIC_EncodePriority+0x32>
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43da      	mvns	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	401a      	ands	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800471c:	f04f 31ff 	mov.w	r1, #4294967295
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	fa01 f303 	lsl.w	r3, r1, r3
 8004726:	43d9      	mvns	r1, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800472c:	4313      	orrs	r3, r2
         );
}
 800472e:	4618      	mov	r0, r3
 8004730:	3724      	adds	r7, #36	; 0x24
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800474c:	d301      	bcc.n	8004752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800474e:	2301      	movs	r3, #1
 8004750:	e00f      	b.n	8004772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <SysTick_Config+0x40>)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800475a:	210f      	movs	r1, #15
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	f7ff ff8e 	bl	8004680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <SysTick_Config+0x40>)
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800476a:	4b04      	ldr	r3, [pc, #16]	; (800477c <SysTick_Config+0x40>)
 800476c:	2207      	movs	r2, #7
 800476e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	e000e010 	.word	0xe000e010

08004780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff47 	bl	800461c <__NVIC_SetPriorityGrouping>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	4603      	mov	r3, r0
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047a8:	f7ff ff5c 	bl	8004664 <__NVIC_GetPriorityGrouping>
 80047ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	6978      	ldr	r0, [r7, #20]
 80047b4:	f7ff ff8e 	bl	80046d4 <NVIC_EncodePriority>
 80047b8:	4602      	mov	r2, r0
 80047ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047be:	4611      	mov	r1, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ff5d 	bl	8004680 <__NVIC_SetPriority>
}
 80047c6:	bf00      	nop
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff ffb0 	bl	800473c <SysTick_Config>
 80047dc:	4603      	mov	r3, r0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f6:	e14e      	b.n	8004a96 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8140 	beq.w	8004a90 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d005      	beq.n	8004828 <HAL_GPIO_Init+0x40>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d130      	bne.n	800488a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485e:	2201      	movs	r2, #1
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0201 	and.w	r2, r3, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d017      	beq.n	80048c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d123      	bne.n	800491a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	08da      	lsrs	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3208      	adds	r2, #8
 80048da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	6939      	ldr	r1, [r7, #16]
 8004916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	2203      	movs	r2, #3
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 809a 	beq.w	8004a90 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495c:	4b55      	ldr	r3, [pc, #340]	; (8004ab4 <HAL_GPIO_Init+0x2cc>)
 800495e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004960:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <HAL_GPIO_Init+0x2cc>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6613      	str	r3, [r2, #96]	; 0x60
 8004968:	4b52      	ldr	r3, [pc, #328]	; (8004ab4 <HAL_GPIO_Init+0x2cc>)
 800496a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004974:	4a50      	ldr	r2, [pc, #320]	; (8004ab8 <HAL_GPIO_Init+0x2d0>)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	3302      	adds	r3, #2
 800497c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	220f      	movs	r2, #15
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800499e:	d013      	beq.n	80049c8 <HAL_GPIO_Init+0x1e0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a46      	ldr	r2, [pc, #280]	; (8004abc <HAL_GPIO_Init+0x2d4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00d      	beq.n	80049c4 <HAL_GPIO_Init+0x1dc>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a45      	ldr	r2, [pc, #276]	; (8004ac0 <HAL_GPIO_Init+0x2d8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <HAL_GPIO_Init+0x1d8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a44      	ldr	r2, [pc, #272]	; (8004ac4 <HAL_GPIO_Init+0x2dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <HAL_GPIO_Init+0x1d4>
 80049b8:	2303      	movs	r3, #3
 80049ba:	e006      	b.n	80049ca <HAL_GPIO_Init+0x1e2>
 80049bc:	2307      	movs	r3, #7
 80049be:	e004      	b.n	80049ca <HAL_GPIO_Init+0x1e2>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e002      	b.n	80049ca <HAL_GPIO_Init+0x1e2>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_GPIO_Init+0x1e2>
 80049c8:	2300      	movs	r3, #0
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	f002 0203 	and.w	r2, r2, #3
 80049d0:	0092      	lsls	r2, r2, #2
 80049d2:	4093      	lsls	r3, r2
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049da:	4937      	ldr	r1, [pc, #220]	; (8004ab8 <HAL_GPIO_Init+0x2d0>)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049e8:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <HAL_GPIO_Init+0x2e0>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4013      	ands	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a0c:	4a2e      	ldr	r2, [pc, #184]	; (8004ac8 <HAL_GPIO_Init+0x2e0>)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_GPIO_Init+0x2e0>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a36:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <HAL_GPIO_Init+0x2e0>)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a3c:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <HAL_GPIO_Init+0x2e0>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_GPIO_Init+0x2e0>)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <HAL_GPIO_Init+0x2e0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a8a:	4a0f      	ldr	r2, [pc, #60]	; (8004ac8 <HAL_GPIO_Init+0x2e0>)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3301      	adds	r3, #1
 8004a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f aea9 	bne.w	80047f8 <HAL_GPIO_Init+0x10>
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	48000400 	.word	0x48000400
 8004ac0:	48000800 	.word	0x48000800
 8004ac4:	48000c00 	.word	0x48000c00
 8004ac8:	40010400 	.word	0x40010400

08004acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	807b      	strh	r3, [r7, #2]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004adc:	787b      	ldrb	r3, [r7, #1]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ae8:	e002      	b.n	8004af0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aea:	887a      	ldrh	r2, [r7, #2]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e081      	b.n	8004c12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fe f8b2 	bl	8002c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d107      	bne.n	8004b76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	e006      	b.n	8004b84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d104      	bne.n	8004b96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69d9      	ldr	r1, [r3, #28]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	461a      	mov	r2, r3
 8004c28:	460b      	mov	r3, r1
 8004c2a:	817b      	strh	r3, [r7, #10]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	f040 80da 	bne.w	8004df2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_I2C_Master_Transmit+0x30>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0d3      	b.n	8004df4 <HAL_I2C_Master_Transmit+0x1d8>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c54:	f7fe fa80 	bl	8003158 <HAL_GetTick>
 8004c58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2319      	movs	r3, #25
 8004c60:	2201      	movs	r2, #1
 8004c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fa00 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0be      	b.n	8004df4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2221      	movs	r2, #33	; 0x21
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2210      	movs	r2, #16
 8004c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	893a      	ldrh	r2, [r7, #8]
 8004c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2bff      	cmp	r3, #255	; 0xff
 8004ca6:	d90e      	bls.n	8004cc6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	22ff      	movs	r2, #255	; 0xff
 8004cac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	8979      	ldrh	r1, [r7, #10]
 8004cb6:	4b51      	ldr	r3, [pc, #324]	; (8004dfc <HAL_I2C_Master_Transmit+0x1e0>)
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fbf6 	bl	80054b0 <I2C_TransferConfig>
 8004cc4:	e06c      	b.n	8004da0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	8979      	ldrh	r1, [r7, #10]
 8004cd8:	4b48      	ldr	r3, [pc, #288]	; (8004dfc <HAL_I2C_Master_Transmit+0x1e0>)
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fbe5 	bl	80054b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ce6:	e05b      	b.n	8004da0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	6a39      	ldr	r1, [r7, #32]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f9fd 	bl	80050ec <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e07b      	b.n	8004df4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d034      	beq.n	8004da0 <HAL_I2C_Master_Transmit+0x184>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d130      	bne.n	8004da0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f98f 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e04d      	b.n	8004df4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2bff      	cmp	r3, #255	; 0xff
 8004d60:	d90e      	bls.n	8004d80 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	22ff      	movs	r2, #255	; 0xff
 8004d66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	8979      	ldrh	r1, [r7, #10]
 8004d70:	2300      	movs	r3, #0
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fb99 	bl	80054b0 <I2C_TransferConfig>
 8004d7e:	e00f      	b.n	8004da0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	8979      	ldrh	r1, [r7, #10]
 8004d92:	2300      	movs	r3, #0
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fb88 	bl	80054b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d19e      	bne.n	8004ce8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	6a39      	ldr	r1, [r7, #32]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f9dc 	bl	800516c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e01a      	b.n	8004df4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_I2C_Master_Transmit+0x1e4>)
 8004dd2:	400b      	ands	r3, r1
 8004dd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	80002000 	.word	0x80002000
 8004e00:	fe00e800 	.word	0xfe00e800

08004e04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	460b      	mov	r3, r1
 8004e12:	817b      	strh	r3, [r7, #10]
 8004e14:	4613      	mov	r3, r2
 8004e16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	f040 80db 	bne.w	8004fdc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_I2C_Master_Receive+0x30>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e0d4      	b.n	8004fde <HAL_I2C_Master_Receive+0x1da>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e3c:	f7fe f98c 	bl	8003158 <HAL_GetTick>
 8004e40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2319      	movs	r3, #25
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f90c 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e0bf      	b.n	8004fde <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2222      	movs	r2, #34	; 0x22
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2210      	movs	r2, #16
 8004e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	893a      	ldrh	r2, [r7, #8]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2bff      	cmp	r3, #255	; 0xff
 8004e8e:	d90e      	bls.n	8004eae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	22ff      	movs	r2, #255	; 0xff
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	8979      	ldrh	r1, [r7, #10]
 8004e9e:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <HAL_I2C_Master_Receive+0x1e4>)
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fb02 	bl	80054b0 <I2C_TransferConfig>
 8004eac:	e06d      	b.n	8004f8a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	8979      	ldrh	r1, [r7, #10]
 8004ec0:	4b49      	ldr	r3, [pc, #292]	; (8004fe8 <HAL_I2C_Master_Receive+0x1e4>)
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 faf1 	bl	80054b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004ece:	e05c      	b.n	8004f8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	6a39      	ldr	r1, [r7, #32]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f985 	bl	80051e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e07c      	b.n	8004fde <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d034      	beq.n	8004f8a <HAL_I2C_Master_Receive+0x186>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d130      	bne.n	8004f8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f89a 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e04d      	b.n	8004fde <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2bff      	cmp	r3, #255	; 0xff
 8004f4a:	d90e      	bls.n	8004f6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	22ff      	movs	r2, #255	; 0xff
 8004f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	8979      	ldrh	r1, [r7, #10]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 faa4 	bl	80054b0 <I2C_TransferConfig>
 8004f68:	e00f      	b.n	8004f8a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	8979      	ldrh	r1, [r7, #10]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fa93 	bl	80054b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d19d      	bne.n	8004ed0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	6a39      	ldr	r1, [r7, #32]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f8e7 	bl	800516c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e01a      	b.n	8004fde <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2220      	movs	r2, #32
 8004fae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_I2C_Master_Receive+0x1e8>)
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e000      	b.n	8004fde <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
  }
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	80002400 	.word	0x80002400
 8004fec:	fe00e800 	.word	0xfe00e800

08004ff0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffe:	b2db      	uxtb	r3, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b02      	cmp	r3, #2
 8005038:	d103      	bne.n	8005042 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d007      	beq.n	8005060 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	619a      	str	r2, [r3, #24]
  }
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800507c:	e022      	b.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d01e      	beq.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fe f867 	bl	8003158 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d113      	bne.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e00f      	b.n	80050e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4013      	ands	r3, r2
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	bf0c      	ite	eq
 80050d4:	2301      	moveq	r3, #1
 80050d6:	2300      	movne	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d0cd      	beq.n	800507e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050f8:	e02c      	b.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f8ea 	bl	80052d8 <I2C_IsErrorOccurred>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e02a      	b.n	8005164 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d01e      	beq.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005116:	f7fe f81f 	bl	8003158 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d113      	bne.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e007      	b.n	8005164 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b02      	cmp	r3, #2
 8005160:	d1cb      	bne.n	80050fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005178:	e028      	b.n	80051cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f8aa 	bl	80052d8 <I2C_IsErrorOccurred>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e026      	b.n	80051dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7fd ffe3 	bl	8003158 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d113      	bne.n	80051cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e007      	b.n	80051dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d1cf      	bne.n	800517a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051f0:	e064      	b.n	80052bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f86e 	bl	80052d8 <I2C_IsErrorOccurred>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e062      	b.n	80052cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b20      	cmp	r3, #32
 8005212:	d138      	bne.n	8005286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b04      	cmp	r3, #4
 8005220:	d105      	bne.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e04e      	b.n	80052cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b10      	cmp	r3, #16
 800523a:	d107      	bne.n	800524c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2210      	movs	r2, #16
 8005242:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2204      	movs	r2, #4
 8005248:	645a      	str	r2, [r3, #68]	; 0x44
 800524a:	e002      	b.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2220      	movs	r2, #32
 8005258:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005266:	400b      	ands	r3, r1
 8005268:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e022      	b.n	80052cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fd ff67 	bl	8003158 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10f      	bne.n	80052bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e007      	b.n	80052cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d193      	bne.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	fe00e800 	.word	0xfe00e800

080052d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d075      	beq.n	80053f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2210      	movs	r2, #16
 800530a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800530c:	e056      	b.n	80053bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d052      	beq.n	80053bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fd ff1f 	bl	8003158 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <I2C_IsErrorOccurred+0x54>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d147      	bne.n	80053bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005336:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800533e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800534a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534e:	d12e      	bne.n	80053ae <I2C_IsErrorOccurred+0xd6>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005356:	d02a      	beq.n	80053ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	2b20      	cmp	r3, #32
 800535c:	d027      	beq.n	80053ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800536c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800536e:	f7fd fef3 	bl	8003158 <HAL_GetTick>
 8005372:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005374:	e01b      	b.n	80053ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005376:	f7fd feef 	bl	8003158 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b19      	cmp	r3, #25
 8005382:	d914      	bls.n	80053ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d1dc      	bne.n	8005376 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d003      	beq.n	80053d2 <I2C_IsErrorOccurred+0xfa>
 80053ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d09d      	beq.n	800530e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2220      	movs	r2, #32
 80053e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005412:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f043 0308 	orr.w	r3, r3, #8
 800542a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f043 0302 	orr.w	r3, r3, #2
 800544c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005456:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800545e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01c      	beq.n	80054a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7ff fddc 	bl	8005024 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <I2C_IsErrorOccurred+0x1d4>)
 8005478:	400b      	ands	r3, r1
 800547a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	431a      	orrs	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80054a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3728      	adds	r7, #40	; 0x28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	fe00e800 	.word	0xfe00e800

080054b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	817b      	strh	r3, [r7, #10]
 80054be:	4613      	mov	r3, r2
 80054c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054c8:	7a7b      	ldrb	r3, [r7, #9]
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	4313      	orrs	r3, r2
 80054da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	0d5b      	lsrs	r3, r3, #21
 80054ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <I2C_TransferConfig+0x60>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	43db      	mvns	r3, r3
 80054f4:	ea02 0103 	and.w	r1, r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	03ff63ff 	.word	0x03ff63ff

08005514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b20      	cmp	r3, #32
 8005528:	d138      	bne.n	800559c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005534:	2302      	movs	r3, #2
 8005536:	e032      	b.n	800559e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2224      	movs	r2, #36	; 0x24
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d139      	bne.n	8005634 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e033      	b.n	8005636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2224      	movs	r2, #36	; 0x24
 80055da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e000      	b.n	8005636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005634:	2302      	movs	r3, #2
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005648:	4b04      	ldr	r3, [pc, #16]	; (800565c <HAL_PWREx_GetVoltageRange+0x18>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40007000 	.word	0x40007000

08005660 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566e:	d130      	bne.n	80056d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005670:	4b23      	ldr	r3, [pc, #140]	; (8005700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800567c:	d038      	beq.n	80056f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800567e:	4b20      	ldr	r3, [pc, #128]	; (8005700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005686:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800568c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800568e:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2232      	movs	r2, #50	; 0x32
 8005694:	fb02 f303 	mul.w	r3, r2, r3
 8005698:	4a1b      	ldr	r2, [pc, #108]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	0c9b      	lsrs	r3, r3, #18
 80056a0:	3301      	adds	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056a4:	e002      	b.n	80056ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ac:	4b14      	ldr	r3, [pc, #80]	; (8005700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b8:	d102      	bne.n	80056c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f2      	bne.n	80056a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056c0:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056cc:	d110      	bne.n	80056f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e00f      	b.n	80056f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056de:	d007      	beq.n	80056f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056e8:	4a05      	ldr	r2, [pc, #20]	; (8005700 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40007000 	.word	0x40007000
 8005704:	2000000c 	.word	0x2000000c
 8005708:	431bde83 	.word	0x431bde83

0800570c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	; 0x28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f000 bc4f 	b.w	8005fbe <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005720:	4b97      	ldr	r3, [pc, #604]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 030c 	and.w	r3, r3, #12
 8005728:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800572a:	4b95      	ldr	r3, [pc, #596]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80e6 	beq.w	800590e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_RCC_OscConfig+0x4c>
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b0c      	cmp	r3, #12
 800574c:	f040 808d 	bne.w	800586a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b01      	cmp	r3, #1
 8005754:	f040 8089 	bne.w	800586a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005758:	4b89      	ldr	r3, [pc, #548]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d006      	beq.n	8005772 <HAL_RCC_OscConfig+0x66>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	f000 bc26 	b.w	8005fbe <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005776:	4b82      	ldr	r3, [pc, #520]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <HAL_RCC_OscConfig+0x80>
 8005782:	4b7f      	ldr	r3, [pc, #508]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578a:	e005      	b.n	8005798 <HAL_RCC_OscConfig+0x8c>
 800578c:	4b7c      	ldr	r3, [pc, #496]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800578e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005798:	4293      	cmp	r3, r2
 800579a:	d224      	bcs.n	80057e6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fda1 	bl	80062e8 <RCC_SetFlashLatencyFromMSIRange>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f000 bc06 	b.w	8005fbe <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057b2:	4b73      	ldr	r3, [pc, #460]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a72      	ldr	r2, [pc, #456]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4b70      	ldr	r3, [pc, #448]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	496d      	ldr	r1, [pc, #436]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057d0:	4b6b      	ldr	r3, [pc, #428]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	4968      	ldr	r1, [pc, #416]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]
 80057e4:	e025      	b.n	8005832 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057e6:	4b66      	ldr	r3, [pc, #408]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a65      	ldr	r2, [pc, #404]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057ec:	f043 0308 	orr.w	r3, r3, #8
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b63      	ldr	r3, [pc, #396]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	4960      	ldr	r1, [pc, #384]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005800:	4313      	orrs	r3, r2
 8005802:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005804:	4b5e      	ldr	r3, [pc, #376]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	495b      	ldr	r1, [pc, #364]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fd60 	bl	80062e8 <RCC_SetFlashLatencyFromMSIRange>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e3c5      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005832:	f000 fccd 	bl	80061d0 <HAL_RCC_GetSysClockFreq>
 8005836:	4602      	mov	r2, r0
 8005838:	4b51      	ldr	r3, [pc, #324]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	4950      	ldr	r1, [pc, #320]	; (8005984 <HAL_RCC_OscConfig+0x278>)
 8005844:	5ccb      	ldrb	r3, [r1, r3]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	fa22 f303 	lsr.w	r3, r2, r3
 800584e:	4a4e      	ldr	r2, [pc, #312]	; (8005988 <HAL_RCC_OscConfig+0x27c>)
 8005850:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005852:	4b4e      	ldr	r3, [pc, #312]	; (800598c <HAL_RCC_OscConfig+0x280>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7fd fc2e 	bl	80030b8 <HAL_InitTick>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d052      	beq.n	800590c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	e3a9      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d032      	beq.n	80058d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005872:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a42      	ldr	r2, [pc, #264]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800587e:	f7fd fc6b 	bl	8003158 <HAL_GetTick>
 8005882:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005886:	f7fd fc67 	bl	8003158 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e392      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005898:	4b39      	ldr	r3, [pc, #228]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058a4:	4b36      	ldr	r3, [pc, #216]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a35      	ldr	r2, [pc, #212]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058aa:	f043 0308 	orr.w	r3, r3, #8
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	4b33      	ldr	r3, [pc, #204]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	4930      	ldr	r1, [pc, #192]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	492b      	ldr	r1, [pc, #172]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	604b      	str	r3, [r1, #4]
 80058d6:	e01a      	b.n	800590e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058d8:	4b29      	ldr	r3, [pc, #164]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058e4:	f7fd fc38 	bl	8003158 <HAL_GetTick>
 80058e8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058ec:	f7fd fc34 	bl	8003158 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e35f      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058fe:	4b20      	ldr	r3, [pc, #128]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x1e0>
 800590a:	e000      	b.n	800590e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800590c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d073      	beq.n	8005a02 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d005      	beq.n	800592c <HAL_RCC_OscConfig+0x220>
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2b0c      	cmp	r3, #12
 8005924:	d10e      	bne.n	8005944 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d10b      	bne.n	8005944 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	4b14      	ldr	r3, [pc, #80]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d063      	beq.n	8005a00 <HAL_RCC_OscConfig+0x2f4>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d15f      	bne.n	8005a00 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e33c      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x250>
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e025      	b.n	80059a8 <HAL_RCC_OscConfig+0x29c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005964:	d114      	bne.n	8005990 <HAL_RCC_OscConfig+0x284>
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a05      	ldr	r2, [pc, #20]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800596c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b03      	ldr	r3, [pc, #12]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a02      	ldr	r2, [pc, #8]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e013      	b.n	80059a8 <HAL_RCC_OscConfig+0x29c>
 8005980:	40021000 	.word	0x40021000
 8005984:	0800dcc4 	.word	0x0800dcc4
 8005988:	2000000c 	.word	0x2000000c
 800598c:	20000010 	.word	0x20000010
 8005990:	4b8f      	ldr	r3, [pc, #572]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a8e      	ldr	r2, [pc, #568]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4b8c      	ldr	r3, [pc, #560]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a8b      	ldr	r2, [pc, #556]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 80059a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b0:	f7fd fbd2 	bl	8003158 <HAL_GetTick>
 80059b4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b8:	f7fd fbce 	bl	8003158 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b64      	cmp	r3, #100	; 0x64
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e2f9      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ca:	4b81      	ldr	r3, [pc, #516]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f0      	beq.n	80059b8 <HAL_RCC_OscConfig+0x2ac>
 80059d6:	e014      	b.n	8005a02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fd fbbe 	bl	8003158 <HAL_GetTick>
 80059dc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e0:	f7fd fbba 	bl	8003158 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e2e5      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059f2:	4b77      	ldr	r3, [pc, #476]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x2d4>
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d060      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_OscConfig+0x314>
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d119      	bne.n	8005a4e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d116      	bne.n	8005a4e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a20:	4b6b      	ldr	r3, [pc, #428]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_OscConfig+0x32c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e2c2      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a38:	4b65      	ldr	r3, [pc, #404]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	061b      	lsls	r3, r3, #24
 8005a46:	4962      	ldr	r1, [pc, #392]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4c:	e040      	b.n	8005ad0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d023      	beq.n	8005a9e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a56:	4b5e      	ldr	r3, [pc, #376]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5d      	ldr	r2, [pc, #372]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a62:	f7fd fb79 	bl	8003158 <HAL_GetTick>
 8005a66:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a6a:	f7fd fb75 	bl	8003158 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e2a0      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a7c:	4b54      	ldr	r3, [pc, #336]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a88:	4b51      	ldr	r3, [pc, #324]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	061b      	lsls	r3, r3, #24
 8005a96:	494e      	ldr	r1, [pc, #312]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	604b      	str	r3, [r1, #4]
 8005a9c:	e018      	b.n	8005ad0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9e:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a4b      	ldr	r2, [pc, #300]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aaa:	f7fd fb55 	bl	8003158 <HAL_GetTick>
 8005aae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab2:	f7fd fb51 	bl	8003158 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e27c      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ac4:	4b42      	ldr	r3, [pc, #264]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f0      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8082 	beq.w	8005be2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d05f      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005ae6:	4b3a      	ldr	r3, [pc, #232]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aec:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d037      	beq.n	8005b6c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d006      	beq.n	8005b14 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e254      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01b      	beq.n	8005b56 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b24:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b2e:	f7fd fb13 	bl	8003158 <HAL_GetTick>
 8005b32:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b36:	f7fd fb0f 	bl	8003158 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b11      	cmp	r3, #17
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e23a      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b48:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1ef      	bne.n	8005b36 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005b56:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b5c:	f023 0210 	bic.w	r2, r3, #16
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	491a      	ldr	r1, [pc, #104]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b6c:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fd faec 	bl	8003158 <HAL_GetTick>
 8005b80:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b84:	f7fd fae8 	bl	8003158 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b11      	cmp	r3, #17
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e213      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0ef      	beq.n	8005b84 <HAL_RCC_OscConfig+0x478>
 8005ba4:	e01d      	b.n	8005be2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bac:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <HAL_RCC_OscConfig+0x4c4>)
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb6:	f7fd facf 	bl	8003158 <HAL_GetTick>
 8005bba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bbc:	e00a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bbe:	f7fd facb 	bl	8003158 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b11      	cmp	r3, #17
 8005bca:	d903      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e1f6      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
 8005bd0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bd4:	4ba9      	ldr	r3, [pc, #676]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1ed      	bne.n	8005bbe <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80bd 	beq.w	8005d6a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005bf6:	4ba1      	ldr	r3, [pc, #644]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10e      	bne.n	8005c20 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c02:	4b9e      	ldr	r3, [pc, #632]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	4a9d      	ldr	r2, [pc, #628]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c0e:	4b9b      	ldr	r3, [pc, #620]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c20:	4b97      	ldr	r3, [pc, #604]	; (8005e80 <HAL_RCC_OscConfig+0x774>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d118      	bne.n	8005c5e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c2c:	4b94      	ldr	r3, [pc, #592]	; (8005e80 <HAL_RCC_OscConfig+0x774>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a93      	ldr	r2, [pc, #588]	; (8005e80 <HAL_RCC_OscConfig+0x774>)
 8005c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c38:	f7fd fa8e 	bl	8003158 <HAL_GetTick>
 8005c3c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c40:	f7fd fa8a 	bl	8003158 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e1b5      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c52:	4b8b      	ldr	r3, [pc, #556]	; (8005e80 <HAL_RCC_OscConfig+0x774>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d02c      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005c6a:	4b84      	ldr	r3, [pc, #528]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	497f      	ldr	r1, [pc, #508]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005c90:	4b7a      	ldr	r3, [pc, #488]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	4a79      	ldr	r2, [pc, #484]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005c98:	f043 0304 	orr.w	r3, r3, #4
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ca0:	4b76      	ldr	r3, [pc, #472]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	4a75      	ldr	r2, [pc, #468]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cb0:	e018      	b.n	8005ce4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005cb2:	4b72      	ldr	r3, [pc, #456]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	4a70      	ldr	r2, [pc, #448]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc2:	e00f      	b.n	8005ce4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005cc4:	4b6d      	ldr	r3, [pc, #436]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	4a6c      	ldr	r2, [pc, #432]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005cd4:	4b69      	ldr	r3, [pc, #420]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	4a68      	ldr	r2, [pc, #416]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005cdc:	f023 0304 	bic.w	r3, r3, #4
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d016      	beq.n	8005d1a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fd fa34 	bl	8003158 <HAL_GetTick>
 8005cf0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fd fa30 	bl	8003158 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e159      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0a:	4b5c      	ldr	r3, [pc, #368]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ed      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x5e8>
 8005d18:	e01d      	b.n	8005d56 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1a:	f7fd fa1d 	bl	8003158 <HAL_GetTick>
 8005d1e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d20:	e00a      	b.n	8005d38 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d22:	f7fd fa19 	bl	8003158 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e142      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d38:	4b50      	ldr	r3, [pc, #320]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ed      	bne.n	8005d22 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005d46:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4c:	4a4b      	ldr	r2, [pc, #300]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d105      	bne.n	8005d6a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5e:	4b47      	ldr	r3, [pc, #284]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d62:	4a46      	ldr	r2, [pc, #280]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d03c      	beq.n	8005df0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01c      	beq.n	8005db8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d7e:	4b3f      	ldr	r3, [pc, #252]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d84:	4a3d      	ldr	r2, [pc, #244]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8e:	f7fd f9e3 	bl	8003158 <HAL_GetTick>
 8005d92:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d96:	f7fd f9df 	bl	8003158 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e10a      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005da8:	4b34      	ldr	r3, [pc, #208]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0ef      	beq.n	8005d96 <HAL_RCC_OscConfig+0x68a>
 8005db6:	e01b      	b.n	8005df0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005db8:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dbe:	4a2f      	ldr	r2, [pc, #188]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc8:	f7fd f9c6 	bl	8003158 <HAL_GetTick>
 8005dcc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dd0:	f7fd f9c2 	bl	8003158 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e0ed      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005de2:	4b26      	ldr	r3, [pc, #152]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ef      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 80e1 	beq.w	8005fbc <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	f040 80b5 	bne.w	8005f6e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e04:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f003 0203 	and.w	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d124      	bne.n	8005e62 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	3b01      	subs	r3, #1
 8005e24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d11b      	bne.n	8005e62 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d113      	bne.n	8005e62 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	3b01      	subs	r3, #1
 8005e48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d109      	bne.n	8005e62 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d05f      	beq.n	8005f22 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	2b0c      	cmp	r3, #12
 8005e66:	d05a      	beq.n	8005f1e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e68:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a03      	ldr	r2, [pc, #12]	; (8005e7c <HAL_RCC_OscConfig+0x770>)
 8005e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e74:	f7fd f970 	bl	8003158 <HAL_GetTick>
 8005e78:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e7a:	e00c      	b.n	8005e96 <HAL_RCC_OscConfig+0x78a>
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e84:	f7fd f968 	bl	8003158 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e093      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e96:	4b4c      	ldr	r3, [pc, #304]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f0      	bne.n	8005e84 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	4b49      	ldr	r3, [pc, #292]	; (8005fcc <HAL_RCC_OscConfig+0x8c0>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eb2:	3a01      	subs	r2, #1
 8005eb4:	0112      	lsls	r2, r2, #4
 8005eb6:	4311      	orrs	r1, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ebc:	0212      	lsls	r2, r2, #8
 8005ebe:	4311      	orrs	r1, r2
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ec4:	0852      	lsrs	r2, r2, #1
 8005ec6:	3a01      	subs	r2, #1
 8005ec8:	0552      	lsls	r2, r2, #21
 8005eca:	4311      	orrs	r1, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ed0:	0852      	lsrs	r2, r2, #1
 8005ed2:	3a01      	subs	r2, #1
 8005ed4:	0652      	lsls	r2, r2, #25
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	493b      	ldr	r1, [pc, #236]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ede:	4b3a      	ldr	r3, [pc, #232]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a39      	ldr	r2, [pc, #228]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eea:	4b37      	ldr	r3, [pc, #220]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	4a36      	ldr	r2, [pc, #216]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ef4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ef6:	f7fd f92f 	bl	8003158 <HAL_GetTick>
 8005efa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005efe:	f7fd f92b 	bl	8003158 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e056      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0f0      	beq.n	8005efe <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f1c:	e04e      	b.n	8005fbc <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e04d      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f22:	4b29      	ldr	r3, [pc, #164]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d146      	bne.n	8005fbc <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f2e:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f38:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f3a:	4b23      	ldr	r3, [pc, #140]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f44:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f46:	f7fd f907 	bl	8003158 <HAL_GetTick>
 8005f4a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f4e:	f7fd f903 	bl	8003158 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e02e      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f60:	4b19      	ldr	r3, [pc, #100]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x842>
 8005f6c:	e026      	b.n	8005fbc <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	d021      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f74:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fd f8ea 	bl	8003158 <HAL_GetTick>
 8005f84:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f88:	f7fd f8e6 	bl	8003158 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e011      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005fa6:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <HAL_RCC_OscConfig+0x8bc>)
 8005fac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005fb0:	f023 0303 	bic.w	r3, r3, #3
 8005fb4:	60d3      	str	r3, [r2, #12]
 8005fb6:	e001      	b.n	8005fbc <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3728      	adds	r7, #40	; 0x28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	f99f808c 	.word	0xf99f808c

08005fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0e7      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe4:	4b75      	ldr	r3, [pc, #468]	; (80061bc <HAL_RCC_ClockConfig+0x1ec>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d910      	bls.n	8006014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff2:	4b72      	ldr	r3, [pc, #456]	; (80061bc <HAL_RCC_ClockConfig+0x1ec>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f023 0207 	bic.w	r2, r3, #7
 8005ffa:	4970      	ldr	r1, [pc, #448]	; (80061bc <HAL_RCC_ClockConfig+0x1ec>)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006002:	4b6e      	ldr	r3, [pc, #440]	; (80061bc <HAL_RCC_ClockConfig+0x1ec>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d001      	beq.n	8006014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0cf      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	4b66      	ldr	r3, [pc, #408]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800602c:	429a      	cmp	r2, r3
 800602e:	d908      	bls.n	8006042 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006030:	4b63      	ldr	r3, [pc, #396]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	4960      	ldr	r1, [pc, #384]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d04c      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b03      	cmp	r3, #3
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006056:	4b5a      	ldr	r3, [pc, #360]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d121      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0a6      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d107      	bne.n	800607e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800606e:	4b54      	ldr	r3, [pc, #336]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d115      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e09a      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006086:	4b4e      	ldr	r3, [pc, #312]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e08e      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006096:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e086      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060a6:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f023 0203 	bic.w	r2, r3, #3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4943      	ldr	r1, [pc, #268]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b8:	f7fd f84e 	bl	8003158 <HAL_GetTick>
 80060bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c0:	f7fd f84a 	bl	8003158 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e06e      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d6:	4b3a      	ldr	r3, [pc, #232]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 020c 	and.w	r2, r3, #12
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d1eb      	bne.n	80060c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d010      	beq.n	8006116 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006100:	429a      	cmp	r2, r3
 8006102:	d208      	bcs.n	8006116 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006104:	4b2e      	ldr	r3, [pc, #184]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	492b      	ldr	r1, [pc, #172]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <HAL_RCC_ClockConfig+0x1ec>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	429a      	cmp	r2, r3
 8006122:	d210      	bcs.n	8006146 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <HAL_RCC_ClockConfig+0x1ec>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f023 0207 	bic.w	r2, r3, #7
 800612c:	4923      	ldr	r1, [pc, #140]	; (80061bc <HAL_RCC_ClockConfig+0x1ec>)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006134:	4b21      	ldr	r3, [pc, #132]	; (80061bc <HAL_RCC_ClockConfig+0x1ec>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d001      	beq.n	8006146 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e036      	b.n	80061b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006152:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	4918      	ldr	r1, [pc, #96]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006160:	4313      	orrs	r3, r2
 8006162:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d009      	beq.n	8006184 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006170:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4910      	ldr	r1, [pc, #64]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 8006180:	4313      	orrs	r3, r2
 8006182:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006184:	f000 f824 	bl	80061d0 <HAL_RCC_GetSysClockFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <HAL_RCC_ClockConfig+0x1f0>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	091b      	lsrs	r3, r3, #4
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	490b      	ldr	r1, [pc, #44]	; (80061c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
 80061a0:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <HAL_RCC_ClockConfig+0x1f8>)
 80061a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <HAL_RCC_ClockConfig+0x1fc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fc ff85 	bl	80030b8 <HAL_InitTick>
 80061ae:	4603      	mov	r3, r0
 80061b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80061b2:	7afb      	ldrb	r3, [r7, #11]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40022000 	.word	0x40022000
 80061c0:	40021000 	.word	0x40021000
 80061c4:	0800dcc4 	.word	0x0800dcc4
 80061c8:	2000000c 	.word	0x2000000c
 80061cc:	20000010 	.word	0x20000010

080061d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b089      	sub	sp, #36	; 0x24
 80061d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061de:	4b3e      	ldr	r3, [pc, #248]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 030c 	and.w	r3, r3, #12
 80061e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061e8:	4b3b      	ldr	r3, [pc, #236]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0x34>
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	d121      	bne.n	8006242 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d11e      	bne.n	8006242 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006204:	4b34      	ldr	r3, [pc, #208]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d107      	bne.n	8006220 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006210:	4b31      	ldr	r3, [pc, #196]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006216:	0a1b      	lsrs	r3, r3, #8
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	e005      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006220:	4b2d      	ldr	r3, [pc, #180]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	091b      	lsrs	r3, r3, #4
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800622c:	4a2b      	ldr	r2, [pc, #172]	; (80062dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006234:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10d      	bne.n	8006258 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006240:	e00a      	b.n	8006258 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b04      	cmp	r3, #4
 8006246:	d102      	bne.n	800624e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	e004      	b.n	8006258 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d101      	bne.n	8006258 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006254:	4b23      	ldr	r3, [pc, #140]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006256:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b0c      	cmp	r3, #12
 800625c:	d134      	bne.n	80062c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800625e:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d003      	beq.n	8006276 <HAL_RCC_GetSysClockFreq+0xa6>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d003      	beq.n	800627c <HAL_RCC_GetSysClockFreq+0xac>
 8006274:	e005      	b.n	8006282 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006276:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006278:	617b      	str	r3, [r7, #20]
      break;
 800627a:	e005      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800627c:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800627e:	617b      	str	r3, [r7, #20]
      break;
 8006280:	e002      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	617b      	str	r3, [r7, #20]
      break;
 8006286:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	3301      	adds	r3, #1
 8006294:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	fb03 f202 	mul.w	r2, r3, r2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	0e5b      	lsrs	r3, r3, #25
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	3301      	adds	r3, #1
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062c8:	69bb      	ldr	r3, [r7, #24]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3724      	adds	r7, #36	; 0x24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	0800dcd4 	.word	0x0800dcd4
 80062e0:	00f42400 	.word	0x00f42400
 80062e4:	007a1200 	.word	0x007a1200

080062e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062f4:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006300:	f7ff f9a0 	bl	8005644 <HAL_PWREx_GetVoltageRange>
 8006304:	6178      	str	r0, [r7, #20]
 8006306:	e014      	b.n	8006332 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006308:	4b25      	ldr	r3, [pc, #148]	; (80063a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800630a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630c:	4a24      	ldr	r2, [pc, #144]	; (80063a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800630e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006312:	6593      	str	r3, [r2, #88]	; 0x58
 8006314:	4b22      	ldr	r3, [pc, #136]	; (80063a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006320:	f7ff f990 	bl	8005644 <HAL_PWREx_GetVoltageRange>
 8006324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006326:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632a:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800632c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006330:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006338:	d10b      	bne.n	8006352 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b80      	cmp	r3, #128	; 0x80
 800633e:	d919      	bls.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2ba0      	cmp	r3, #160	; 0xa0
 8006344:	d902      	bls.n	800634c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006346:	2302      	movs	r3, #2
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	e013      	b.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800634c:	2301      	movs	r3, #1
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	e010      	b.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	d902      	bls.n	800635e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006358:	2303      	movs	r3, #3
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	e00a      	b.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d102      	bne.n	800636a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006364:	2302      	movs	r3, #2
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	e004      	b.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b70      	cmp	r3, #112	; 0x70
 800636e:	d101      	bne.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006370:	2301      	movs	r3, #1
 8006372:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f023 0207 	bic.w	r2, r3, #7
 800637c:	4909      	ldr	r1, [pc, #36]	; (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	d001      	beq.n	8006396 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40021000 	.word	0x40021000
 80063a4:	40022000 	.word	0x40022000

080063a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063b0:	2300      	movs	r3, #0
 80063b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063b4:	2300      	movs	r3, #0
 80063b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 809e 	beq.w	8006502 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063c6:	2300      	movs	r3, #0
 80063c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063ca:	4b46      	ldr	r3, [pc, #280]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80063cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063e0:	4b40      	ldr	r3, [pc, #256]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	4a3f      	ldr	r2, [pc, #252]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80063e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ea:	6593      	str	r3, [r2, #88]	; 0x58
 80063ec:	4b3d      	ldr	r3, [pc, #244]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063f8:	2301      	movs	r3, #1
 80063fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063fc:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a39      	ldr	r2, [pc, #228]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006408:	f7fc fea6 	bl	8003158 <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800640e:	e009      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006410:	f7fc fea2 	bl	8003158 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d902      	bls.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	74fb      	strb	r3, [r7, #19]
        break;
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006424:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ef      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006430:	7cfb      	ldrb	r3, [r7, #19]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d15a      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006436:	4b2b      	ldr	r3, [pc, #172]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006440:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01e      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	429a      	cmp	r2, r3
 8006450:	d019      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006452:	4b24      	ldr	r3, [pc, #144]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800645e:	4b21      	ldr	r3, [pc, #132]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	4a1f      	ldr	r2, [pc, #124]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800646e:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006474:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800647e:	4a19      	ldr	r2, [pc, #100]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d016      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7fc fe62 	bl	8003158 <HAL_GetTick>
 8006494:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006496:	e00b      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006498:	f7fc fe5e 	bl	8003158 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d902      	bls.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	74fb      	strb	r3, [r7, #19]
            break;
 80064ae:	e006      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0ec      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80064be:	7cfb      	ldrb	r3, [r7, #19]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10b      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064c4:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	4904      	ldr	r1, [pc, #16]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064da:	e009      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064dc:	7cfb      	ldrb	r3, [r7, #19]
 80064de:	74bb      	strb	r3, [r7, #18]
 80064e0:	e006      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80064e2:	bf00      	nop
 80064e4:	40021000 	.word	0x40021000
 80064e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ec:	7cfb      	ldrb	r3, [r7, #19]
 80064ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064f0:	7c7b      	ldrb	r3, [r7, #17]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d105      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064f6:	4b6e      	ldr	r3, [pc, #440]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	4a6d      	ldr	r2, [pc, #436]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80064fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800650e:	4b68      	ldr	r3, [pc, #416]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006514:	f023 0203 	bic.w	r2, r3, #3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4964      	ldr	r1, [pc, #400]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006530:	4b5f      	ldr	r3, [pc, #380]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006536:	f023 020c 	bic.w	r2, r3, #12
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	495c      	ldr	r1, [pc, #368]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006552:	4b57      	ldr	r3, [pc, #348]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4953      	ldr	r1, [pc, #332]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006574:	4b4e      	ldr	r3, [pc, #312]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	494b      	ldr	r1, [pc, #300]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006596:	4b46      	ldr	r3, [pc, #280]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	4942      	ldr	r1, [pc, #264]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065b8:	4b3d      	ldr	r3, [pc, #244]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	493a      	ldr	r1, [pc, #232]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065da:	4b35      	ldr	r3, [pc, #212]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	4931      	ldr	r1, [pc, #196]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065fc:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	4929      	ldr	r1, [pc, #164]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800661e:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	4920      	ldr	r1, [pc, #128]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d015      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	4918      	ldr	r1, [pc, #96]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800665e:	d105      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006660:	4b13      	ldr	r3, [pc, #76]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a12      	ldr	r2, [pc, #72]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800666a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d015      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006678:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	490a      	ldr	r1, [pc, #40]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006696:	d105      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006698:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4a04      	ldr	r2, [pc, #16]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800669e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80066a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000

080066b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e095      	b.n	80067f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d108      	bne.n	80066e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d6:	d009      	beq.n	80066ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	61da      	str	r2, [r3, #28]
 80066de:	e005      	b.n	80066ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fc fb18 	bl	8002d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006722:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800672c:	d902      	bls.n	8006734 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	e002      	b.n	800673a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006738:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006742:	d007      	beq.n	8006754 <HAL_SPI_Init+0xa0>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800674c:	d002      	beq.n	8006754 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006796:	ea42 0103 	orr.w	r1, r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	0c1b      	lsrs	r3, r3, #16
 80067b0:	f003 0204 	and.w	r2, r3, #4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f003 0310 	and.w	r3, r3, #16
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067d0:	ea42 0103 	orr.w	r1, r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b088      	sub	sp, #32
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	4613      	mov	r3, r2
 8006808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_SPI_Transmit+0x22>
 8006818:	2302      	movs	r3, #2
 800681a:	e158      	b.n	8006ace <HAL_SPI_Transmit+0x2d4>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006824:	f7fc fc98 	bl	8003158 <HAL_GetTick>
 8006828:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b01      	cmp	r3, #1
 8006838:	d002      	beq.n	8006840 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800683a:	2302      	movs	r3, #2
 800683c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800683e:	e13d      	b.n	8006abc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_SPI_Transmit+0x52>
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d102      	bne.n	8006852 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006850:	e134      	b.n	8006abc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2203      	movs	r2, #3
 8006856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	88fa      	ldrh	r2, [r7, #6]
 800686a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689c:	d10f      	bne.n	80068be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d007      	beq.n	80068dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068e4:	d94b      	bls.n	800697e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <HAL_SPI_Transmit+0xfa>
 80068ee:	8afb      	ldrh	r3, [r7, #22]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d13e      	bne.n	8006972 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	881a      	ldrh	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	1c9a      	adds	r2, r3, #2
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006918:	e02b      	b.n	8006972 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d112      	bne.n	800694e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	1c9a      	adds	r2, r3, #2
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800694c:	e011      	b.n	8006972 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800694e:	f7fc fc03 	bl	8003158 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d803      	bhi.n	8006966 <HAL_SPI_Transmit+0x16c>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d102      	bne.n	800696c <HAL_SPI_Transmit+0x172>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d102      	bne.n	8006972 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006970:	e0a4      	b.n	8006abc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1ce      	bne.n	800691a <HAL_SPI_Transmit+0x120>
 800697c:	e07c      	b.n	8006a78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_SPI_Transmit+0x192>
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d170      	bne.n	8006a6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b01      	cmp	r3, #1
 8006994:	d912      	bls.n	80069bc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b02      	subs	r3, #2
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069ba:	e058      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	7812      	ldrb	r2, [r2, #0]
 80069c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80069e2:	e044      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d12b      	bne.n	8006a4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d912      	bls.n	8006a22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	881a      	ldrh	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	1c9a      	adds	r2, r3, #2
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b02      	subs	r3, #2
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a20:	e025      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	7812      	ldrb	r2, [r2, #0]
 8006a2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a48:	e011      	b.n	8006a6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4a:	f7fc fb85 	bl	8003158 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d803      	bhi.n	8006a62 <HAL_SPI_Transmit+0x268>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d102      	bne.n	8006a68 <HAL_SPI_Transmit+0x26e>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a6c:	e026      	b.n	8006abc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1b5      	bne.n	80069e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fb5b 	bl	8007138 <SPI_EndRxTxTransaction>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a96:	2300      	movs	r3, #0
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e000      	b.n	8006abc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08a      	sub	sp, #40	; 0x28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
 8006ae2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x26>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e1fb      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x41e>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b04:	f7fc fb28 	bl	8003158 <HAL_GetTick>
 8006b08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006b18:	887b      	ldrh	r3, [r7, #2]
 8006b1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b20:	7efb      	ldrb	r3, [r7, #27]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d00e      	beq.n	8006b44 <HAL_SPI_TransmitReceive+0x6e>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b2c:	d106      	bne.n	8006b3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d102      	bne.n	8006b3c <HAL_SPI_TransmitReceive+0x66>
 8006b36:	7efb      	ldrb	r3, [r7, #27]
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d003      	beq.n	8006b44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b42:	e1cd      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_SPI_TransmitReceive+0x80>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_SPI_TransmitReceive+0x80>
 8006b50:	887b      	ldrh	r3, [r7, #2]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b5c:	e1c0      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d003      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2205      	movs	r2, #5
 8006b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	887a      	ldrh	r2, [r7, #2]
 8006b82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	887a      	ldrh	r2, [r7, #2]
 8006b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	887a      	ldrh	r2, [r7, #2]
 8006b98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	887a      	ldrh	r2, [r7, #2]
 8006b9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bb4:	d802      	bhi.n	8006bbc <HAL_SPI_TransmitReceive+0xe6>
 8006bb6:	8a3b      	ldrh	r3, [r7, #16]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d908      	bls.n	8006bce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bca:	605a      	str	r2, [r3, #4]
 8006bcc:	e007      	b.n	8006bde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bdc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d007      	beq.n	8006bfc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c04:	d97c      	bls.n	8006d00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x13e>
 8006c0e:	8a7b      	ldrh	r3, [r7, #18]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d169      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	881a      	ldrh	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	1c9a      	adds	r2, r3, #2
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c38:	e056      	b.n	8006ce8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d11b      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0x1aa>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d016      	beq.n	8006c80 <HAL_SPI_TransmitReceive+0x1aa>
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d113      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	881a      	ldrh	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	1c9a      	adds	r2, r3, #2
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d11c      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x1f2>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	b292      	uxth	r2, r2
 8006ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cc8:	f7fc fa46 	bl	8003158 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d807      	bhi.n	8006ce8 <HAL_SPI_TransmitReceive+0x212>
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d003      	beq.n	8006ce8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ce6:	e0fb      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1a3      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x164>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d19d      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x164>
 8006cfe:	e0df      	b.n	8006ec0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_SPI_TransmitReceive+0x23a>
 8006d08:	8a7b      	ldrh	r3, [r7, #18]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	f040 80cb 	bne.w	8006ea6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d912      	bls.n	8006d40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1e:	881a      	ldrh	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	1c9a      	adds	r2, r3, #2
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b02      	subs	r3, #2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d3e:	e0b2      	b.n	8006ea6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d66:	e09e      	b.n	8006ea6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d134      	bne.n	8006de0 <HAL_SPI_TransmitReceive+0x30a>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d02f      	beq.n	8006de0 <HAL_SPI_TransmitReceive+0x30a>
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d12c      	bne.n	8006de0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d912      	bls.n	8006db6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	881a      	ldrh	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	1c9a      	adds	r2, r3, #2
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b02      	subs	r3, #2
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006db4:	e012      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	7812      	ldrb	r2, [r2, #0]
 8006dc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d148      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x3aa>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d042      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d923      	bls.n	8006e4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	b292      	uxth	r2, r2
 8006e12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	1c9a      	adds	r2, r3, #2
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b02      	subs	r3, #2
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d81f      	bhi.n	8006e7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e4a:	605a      	str	r2, [r3, #4]
 8006e4c:	e016      	b.n	8006e7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f103 020c 	add.w	r2, r3, #12
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e80:	f7fc f96a 	bl	8003158 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d803      	bhi.n	8006e98 <HAL_SPI_TransmitReceive+0x3c2>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d102      	bne.n	8006e9e <HAL_SPI_TransmitReceive+0x3c8>
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ea4:	e01c      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f47f af5b 	bne.w	8006d68 <HAL_SPI_TransmitReceive+0x292>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f47f af54 	bne.w	8006d68 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f937 	bl	8007138 <SPI_EndRxTxTransaction>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d006      	beq.n	8006ede <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	661a      	str	r2, [r3, #96]	; 0x60
 8006edc:	e000      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3728      	adds	r7, #40	; 0x28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f0c:	f7fc f924 	bl	8003158 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	4413      	add	r3, r2
 8006f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f1c:	f7fc f91c 	bl	8003158 <HAL_GetTick>
 8006f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f22:	4b39      	ldr	r3, [pc, #228]	; (8007008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	015b      	lsls	r3, r3, #5
 8006f28:	0d1b      	lsrs	r3, r3, #20
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	fb02 f303 	mul.w	r3, r2, r3
 8006f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f32:	e054      	b.n	8006fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d050      	beq.n	8006fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f3c:	f7fc f90c 	bl	8003158 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d902      	bls.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d13d      	bne.n	8006fce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f6a:	d111      	bne.n	8006f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f74:	d004      	beq.n	8006f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7e:	d107      	bne.n	8006f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f98:	d10f      	bne.n	8006fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e017      	b.n	8006ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	bf0c      	ite	eq
 8006fee:	2301      	moveq	r3, #1
 8006ff0:	2300      	movne	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d19b      	bne.n	8006f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	2000000c 	.word	0x2000000c

0800700c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08a      	sub	sp, #40	; 0x28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800701e:	f7fc f89b 	bl	8003158 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	4413      	add	r3, r2
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800702e:	f7fc f893 	bl	8003158 <HAL_GetTick>
 8007032:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800703c:	4b3d      	ldr	r3, [pc, #244]	; (8007134 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	00da      	lsls	r2, r3, #3
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	0d1b      	lsrs	r3, r3, #20
 800704c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007054:	e060      	b.n	8007118 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800705c:	d107      	bne.n	800706e <SPI_WaitFifoStateUntilTimeout+0x62>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800706c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d050      	beq.n	8007118 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007076:	f7fc f86f 	bl	8003158 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007082:	429a      	cmp	r2, r3
 8007084:	d902      	bls.n	800708c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	d13d      	bne.n	8007108 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800709a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070a4:	d111      	bne.n	80070ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ae:	d004      	beq.n	80070ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b8:	d107      	bne.n	80070ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d2:	d10f      	bne.n	80070f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e010      	b.n	800712a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	3b01      	subs	r3, #1
 8007116:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	429a      	cmp	r2, r3
 8007126:	d196      	bne.n	8007056 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3728      	adds	r7, #40	; 0x28
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2000000c 	.word	0x2000000c

08007138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff ff5b 	bl	800700c <SPI_WaitFifoStateUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007160:	f043 0220 	orr.w	r2, r3, #32
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e027      	b.n	80071bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff fec0 	bl	8006efc <SPI_WaitFlagStateUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007186:	f043 0220 	orr.w	r2, r3, #32
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e014      	b.n	80071bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2200      	movs	r2, #0
 800719a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff ff34 	bl	800700c <SPI_WaitFifoStateUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ae:	f043 0220 	orr.w	r2, r3, #32
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e000      	b.n	80071bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80071c8:	4904      	ldr	r1, [pc, #16]	; (80071dc <MX_FATFS_Init+0x18>)
 80071ca:	4805      	ldr	r0, [pc, #20]	; (80071e0 <MX_FATFS_Init+0x1c>)
 80071cc:	f002 ff7e 	bl	800a0cc <FATFS_LinkDriver>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <MX_FATFS_Init+0x20>)
 80071d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80071d8:	bf00      	nop
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20002870 	.word	0x20002870
 80071e0:	20000018 	.word	0x20000018
 80071e4:	2000286c 	.word	0x2000286c

080071e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80071ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	4618      	mov	r0, r3
 8007206:	f7fa fe2d 	bl	8001e64 <SD_disk_initialize>
 800720a:	4603      	mov	r3, r0
 800720c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	4603      	mov	r3, r0
 800721e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	4618      	mov	r0, r3
 8007224:	f7fa ff0a 	bl	800203c <SD_disk_status>
 8007228:	4603      	mov	r3, r0
 800722a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007244:	7bf8      	ldrb	r0, [r7, #15]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	f7fa ff0c 	bl	8002068 <SD_disk_read>
 8007250:	4603      	mov	r3, r0
 8007252:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800726c:	7bf8      	ldrb	r0, [r7, #15]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	f7fa ff62 	bl	800213c <SD_disk_write>
 8007278:	4603      	mov	r3, r0
 800727a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	603a      	str	r2, [r7, #0]
 800728e:	71fb      	strb	r3, [r7, #7]
 8007290:	460b      	mov	r3, r1
 8007292:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	79b9      	ldrb	r1, [r7, #6]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f7fa ffd2 	bl	8002244 <SD_disk_ioctl>
 80072a0:	4603      	mov	r3, r0
 80072a2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	4a08      	ldr	r2, [pc, #32]	; (80072dc <disk_status+0x30>)
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	79fa      	ldrb	r2, [r7, #7]
 80072c4:	4905      	ldr	r1, [pc, #20]	; (80072dc <disk_status+0x30>)
 80072c6:	440a      	add	r2, r1
 80072c8:	7a12      	ldrb	r2, [r2, #8]
 80072ca:	4610      	mov	r0, r2
 80072cc:	4798      	blx	r3
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20002a9c 	.word	0x20002a9c

080072e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	4a0d      	ldr	r2, [pc, #52]	; (8007328 <disk_initialize+0x48>)
 80072f2:	5cd3      	ldrb	r3, [r2, r3]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d111      	bne.n	800731c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	4a0b      	ldr	r2, [pc, #44]	; (8007328 <disk_initialize+0x48>)
 80072fc:	2101      	movs	r1, #1
 80072fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	4a09      	ldr	r2, [pc, #36]	; (8007328 <disk_initialize+0x48>)
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	79fa      	ldrb	r2, [r7, #7]
 800730e:	4906      	ldr	r1, [pc, #24]	; (8007328 <disk_initialize+0x48>)
 8007310:	440a      	add	r2, r1
 8007312:	7a12      	ldrb	r2, [r2, #8]
 8007314:	4610      	mov	r0, r2
 8007316:	4798      	blx	r3
 8007318:	4603      	mov	r3, r0
 800731a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20002a9c 	.word	0x20002a9c

0800732c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	4a0a      	ldr	r2, [pc, #40]	; (8007368 <disk_read+0x3c>)
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	689c      	ldr	r4, [r3, #8]
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	4a07      	ldr	r2, [pc, #28]	; (8007368 <disk_read+0x3c>)
 800734c:	4413      	add	r3, r2
 800734e:	7a18      	ldrb	r0, [r3, #8]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	47a0      	blx	r4
 8007358:	4603      	mov	r3, r0
 800735a:	75fb      	strb	r3, [r7, #23]
  return res;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
}
 800735e:	4618      	mov	r0, r3
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	bd90      	pop	{r4, r7, pc}
 8007366:	bf00      	nop
 8007368:	20002a9c 	.word	0x20002a9c

0800736c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800736c:	b590      	push	{r4, r7, lr}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	4a0a      	ldr	r2, [pc, #40]	; (80073a8 <disk_write+0x3c>)
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	68dc      	ldr	r4, [r3, #12]
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4a07      	ldr	r2, [pc, #28]	; (80073a8 <disk_write+0x3c>)
 800738c:	4413      	add	r3, r2
 800738e:	7a18      	ldrb	r0, [r3, #8]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	47a0      	blx	r4
 8007398:	4603      	mov	r3, r0
 800739a:	75fb      	strb	r3, [r7, #23]
  return res;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd90      	pop	{r4, r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20002a9c 	.word	0x20002a9c

080073ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	603a      	str	r2, [r7, #0]
 80073b6:	71fb      	strb	r3, [r7, #7]
 80073b8:	460b      	mov	r3, r1
 80073ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	4a09      	ldr	r2, [pc, #36]	; (80073e4 <disk_ioctl+0x38>)
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	79fa      	ldrb	r2, [r7, #7]
 80073ca:	4906      	ldr	r1, [pc, #24]	; (80073e4 <disk_ioctl+0x38>)
 80073cc:	440a      	add	r2, r1
 80073ce:	7a10      	ldrb	r0, [r2, #8]
 80073d0:	79b9      	ldrb	r1, [r7, #6]
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	4798      	blx	r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80073da:	7bfb      	ldrb	r3, [r7, #15]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20002a9c 	.word	0x20002a9c

080073e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3301      	adds	r3, #1
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	b21a      	sxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b21b      	sxth	r3, r3
 8007404:	4313      	orrs	r3, r2
 8007406:	b21b      	sxth	r3, r3
 8007408:	81fb      	strh	r3, [r7, #14]
	return rv;
 800740a:	89fb      	ldrh	r3, [r7, #14]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3303      	adds	r3, #3
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	3202      	adds	r2, #2
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	021b      	lsls	r3, r3, #8
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	3201      	adds	r2, #1
 800743e:	7812      	ldrb	r2, [r2, #0]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	021b      	lsls	r3, r3, #8
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	7812      	ldrb	r2, [r2, #0]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007450:	68fb      	ldr	r3, [r7, #12]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	887a      	ldrh	r2, [r7, #2]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	887b      	ldrh	r3, [r7, #2]
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	607a      	str	r2, [r7, #4]
 8007482:	887a      	ldrh	r2, [r7, #2]
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	0a1b      	lsrs	r3, r3, #8
 80074ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	607a      	str	r2, [r7, #4]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	0a1b      	lsrs	r3, r3, #8
 80074d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00d      	beq.n	8007522 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	1c53      	adds	r3, r2, #1
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	1c59      	adds	r1, r3, #1
 8007510:	6179      	str	r1, [r7, #20]
 8007512:	7812      	ldrb	r2, [r2, #0]
 8007514:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3b01      	subs	r3, #1
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f1      	bne.n	8007506 <mem_cpy+0x1a>
	}
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800752e:	b480      	push	{r7}
 8007530:	b087      	sub	sp, #28
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	617a      	str	r2, [r7, #20]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3b01      	subs	r3, #1
 800754e:	607b      	str	r3, [r7, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f3      	bne.n	800753e <mem_set+0x10>
}
 8007556:	bf00      	nop
 8007558:	bf00      	nop
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007564:	b480      	push	{r7}
 8007566:	b089      	sub	sp, #36	; 0x24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	61fa      	str	r2, [r7, #28]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	4619      	mov	r1, r3
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	61ba      	str	r2, [r7, #24]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	1acb      	subs	r3, r1, r3
 8007590:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3b01      	subs	r3, #1
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <mem_cmp+0x40>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0eb      	beq.n	800757c <mem_cmp+0x18>

	return r;
 80075a4:	697b      	ldr	r3, [r7, #20]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3724      	adds	r7, #36	; 0x24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80075bc:	e002      	b.n	80075c4 <chk_chr+0x12>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3301      	adds	r3, #1
 80075c2:	607b      	str	r3, [r7, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <chk_chr+0x26>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d1f2      	bne.n	80075be <chk_chr+0xc>
	return *str;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	781b      	ldrb	r3, [r3, #0]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80075f2:	2300      	movs	r3, #0
 80075f4:	60bb      	str	r3, [r7, #8]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e029      	b.n	8007650 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80075fc:	4a27      	ldr	r2, [pc, #156]	; (800769c <chk_lock+0xb4>)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	4413      	add	r3, r2
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d01d      	beq.n	8007646 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800760a:	4a24      	ldr	r2, [pc, #144]	; (800769c <chk_lock+0xb4>)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	4413      	add	r3, r2
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d116      	bne.n	800764a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800761c:	4a1f      	ldr	r2, [pc, #124]	; (800769c <chk_lock+0xb4>)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	4413      	add	r3, r2
 8007624:	3304      	adds	r3, #4
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800762c:	429a      	cmp	r2, r3
 800762e:	d10c      	bne.n	800764a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007630:	4a1a      	ldr	r2, [pc, #104]	; (800769c <chk_lock+0xb4>)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	4413      	add	r3, r2
 8007638:	3308      	adds	r3, #8
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007640:	429a      	cmp	r2, r3
 8007642:	d102      	bne.n	800764a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007644:	e007      	b.n	8007656 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007646:	2301      	movs	r3, #1
 8007648:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3301      	adds	r3, #1
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d9d2      	bls.n	80075fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b02      	cmp	r3, #2
 800765a:	d109      	bne.n	8007670 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <chk_lock+0x80>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d101      	bne.n	800766c <chk_lock+0x84>
 8007668:	2300      	movs	r3, #0
 800766a:	e010      	b.n	800768e <chk_lock+0xa6>
 800766c:	2312      	movs	r3, #18
 800766e:	e00e      	b.n	800768e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d108      	bne.n	8007688 <chk_lock+0xa0>
 8007676:	4a09      	ldr	r2, [pc, #36]	; (800769c <chk_lock+0xb4>)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	4413      	add	r3, r2
 800767e:	330c      	adds	r3, #12
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007686:	d101      	bne.n	800768c <chk_lock+0xa4>
 8007688:	2310      	movs	r3, #16
 800768a:	e000      	b.n	800768e <chk_lock+0xa6>
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	2000287c 	.word	0x2000287c

080076a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076a6:	2300      	movs	r3, #0
 80076a8:	607b      	str	r3, [r7, #4]
 80076aa:	e002      	b.n	80076b2 <enq_lock+0x12>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3301      	adds	r3, #1
 80076b0:	607b      	str	r3, [r7, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d806      	bhi.n	80076c6 <enq_lock+0x26>
 80076b8:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <enq_lock+0x40>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	4413      	add	r3, r2
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1f2      	bne.n	80076ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	bf14      	ite	ne
 80076cc:	2301      	movne	r3, #1
 80076ce:	2300      	moveq	r3, #0
 80076d0:	b2db      	uxtb	r3, r3
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	2000287c 	.word	0x2000287c

080076e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	e01f      	b.n	8007734 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80076f4:	4a41      	ldr	r2, [pc, #260]	; (80077fc <inc_lock+0x118>)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	4413      	add	r3, r2
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d113      	bne.n	800772e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007706:	4a3d      	ldr	r2, [pc, #244]	; (80077fc <inc_lock+0x118>)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	4413      	add	r3, r2
 800770e:	3304      	adds	r3, #4
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007716:	429a      	cmp	r2, r3
 8007718:	d109      	bne.n	800772e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800771a:	4a38      	ldr	r2, [pc, #224]	; (80077fc <inc_lock+0x118>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	4413      	add	r3, r2
 8007722:	3308      	adds	r3, #8
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800772a:	429a      	cmp	r2, r3
 800772c:	d006      	beq.n	800773c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d9dc      	bls.n	80076f4 <inc_lock+0x10>
 800773a:	e000      	b.n	800773e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800773c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d132      	bne.n	80077aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	e002      	b.n	8007750 <inc_lock+0x6c>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d806      	bhi.n	8007764 <inc_lock+0x80>
 8007756:	4a29      	ldr	r2, [pc, #164]	; (80077fc <inc_lock+0x118>)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	4413      	add	r3, r2
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f2      	bne.n	800774a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d101      	bne.n	800776e <inc_lock+0x8a>
 800776a:	2300      	movs	r3, #0
 800776c:	e040      	b.n	80077f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4922      	ldr	r1, [pc, #136]	; (80077fc <inc_lock+0x118>)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	440b      	add	r3, r1
 800777a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	491e      	ldr	r1, [pc, #120]	; (80077fc <inc_lock+0x118>)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	440b      	add	r3, r1
 8007788:	3304      	adds	r3, #4
 800778a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	491a      	ldr	r1, [pc, #104]	; (80077fc <inc_lock+0x118>)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	440b      	add	r3, r1
 8007798:	3308      	adds	r3, #8
 800779a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800779c:	4a17      	ldr	r2, [pc, #92]	; (80077fc <inc_lock+0x118>)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	4413      	add	r3, r2
 80077a4:	330c      	adds	r3, #12
 80077a6:	2200      	movs	r2, #0
 80077a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d009      	beq.n	80077c4 <inc_lock+0xe0>
 80077b0:	4a12      	ldr	r2, [pc, #72]	; (80077fc <inc_lock+0x118>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	4413      	add	r3, r2
 80077b8:	330c      	adds	r3, #12
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <inc_lock+0xe0>
 80077c0:	2300      	movs	r3, #0
 80077c2:	e015      	b.n	80077f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d108      	bne.n	80077dc <inc_lock+0xf8>
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <inc_lock+0x118>)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	4413      	add	r3, r2
 80077d2:	330c      	adds	r3, #12
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	3301      	adds	r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	e001      	b.n	80077e0 <inc_lock+0xfc>
 80077dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077e0:	4906      	ldr	r1, [pc, #24]	; (80077fc <inc_lock+0x118>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	440b      	add	r3, r1
 80077e8:	330c      	adds	r3, #12
 80077ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3301      	adds	r3, #1
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	2000287c 	.word	0x2000287c

08007800 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3b01      	subs	r3, #1
 800780c:	607b      	str	r3, [r7, #4]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d825      	bhi.n	8007860 <dec_lock+0x60>
		n = Files[i].ctr;
 8007814:	4a17      	ldr	r2, [pc, #92]	; (8007874 <dec_lock+0x74>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	4413      	add	r3, r2
 800781c:	330c      	adds	r3, #12
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007822:	89fb      	ldrh	r3, [r7, #14]
 8007824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007828:	d101      	bne.n	800782e <dec_lock+0x2e>
 800782a:	2300      	movs	r3, #0
 800782c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800782e:	89fb      	ldrh	r3, [r7, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <dec_lock+0x3a>
 8007834:	89fb      	ldrh	r3, [r7, #14]
 8007836:	3b01      	subs	r3, #1
 8007838:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800783a:	4a0e      	ldr	r2, [pc, #56]	; (8007874 <dec_lock+0x74>)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	4413      	add	r3, r2
 8007842:	330c      	adds	r3, #12
 8007844:	89fa      	ldrh	r2, [r7, #14]
 8007846:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007848:	89fb      	ldrh	r3, [r7, #14]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d105      	bne.n	800785a <dec_lock+0x5a>
 800784e:	4a09      	ldr	r2, [pc, #36]	; (8007874 <dec_lock+0x74>)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	4413      	add	r3, r2
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	737b      	strb	r3, [r7, #13]
 800785e:	e001      	b.n	8007864 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007860:	2302      	movs	r3, #2
 8007862:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007864:	7b7b      	ldrb	r3, [r7, #13]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	2000287c 	.word	0x2000287c

08007878 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	e010      	b.n	80078a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007886:	4a0d      	ldr	r2, [pc, #52]	; (80078bc <clear_lock+0x44>)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	4413      	add	r3, r2
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	429a      	cmp	r2, r3
 8007894:	d105      	bne.n	80078a2 <clear_lock+0x2a>
 8007896:	4a09      	ldr	r2, [pc, #36]	; (80078bc <clear_lock+0x44>)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	4413      	add	r3, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3301      	adds	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d9eb      	bls.n	8007886 <clear_lock+0xe>
	}
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	2000287c 	.word	0x2000287c

080078c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	78db      	ldrb	r3, [r3, #3]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d034      	beq.n	800793e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7858      	ldrb	r0, [r3, #1]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80078e4:	2301      	movs	r3, #1
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	f7ff fd40 	bl	800736c <disk_write>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	73fb      	strb	r3, [r7, #15]
 80078f6:	e022      	b.n	800793e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	1ad2      	subs	r2, r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	429a      	cmp	r2, r3
 800790c:	d217      	bcs.n	800793e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	789b      	ldrb	r3, [r3, #2]
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	e010      	b.n	8007938 <sync_window+0x78>
					wsect += fs->fsize;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4413      	add	r3, r2
 800791e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7858      	ldrb	r0, [r3, #1]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800792a:	2301      	movs	r3, #1
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	f7ff fd1d 	bl	800736c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	3b01      	subs	r3, #1
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d8eb      	bhi.n	8007916 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d01b      	beq.n	8007998 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff ffad 	bl	80078c0 <sync_window>
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d113      	bne.n	8007998 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	7858      	ldrb	r0, [r3, #1]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800797a:	2301      	movs	r3, #1
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	f7ff fcd5 	bl	800732c <disk_read>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007988:	f04f 33ff 	mov.w	r3, #4294967295
 800798c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800798e:	2301      	movs	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007998:	7bfb      	ldrb	r3, [r7, #15]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff ff87 	bl	80078c0 <sync_window>
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d159      	bne.n	8007a70 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d149      	bne.n	8007a58 <sync_fs+0xb4>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	791b      	ldrb	r3, [r3, #4]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d145      	bne.n	8007a58 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	899b      	ldrh	r3, [r3, #12]
 80079d6:	461a      	mov	r2, r3
 80079d8:	2100      	movs	r1, #0
 80079da:	f7ff fda8 	bl	800752e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3338      	adds	r3, #56	; 0x38
 80079e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079e6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff fd37 	bl	800745e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3338      	adds	r3, #56	; 0x38
 80079f4:	4921      	ldr	r1, [pc, #132]	; (8007a7c <sync_fs+0xd8>)
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fd4c 	bl	8007494 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3338      	adds	r3, #56	; 0x38
 8007a00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a04:	491e      	ldr	r1, [pc, #120]	; (8007a80 <sync_fs+0xdc>)
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fd44 	bl	8007494 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3338      	adds	r3, #56	; 0x38
 8007a10:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7ff fd3a 	bl	8007494 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3338      	adds	r3, #56	; 0x38
 8007a24:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7ff fd30 	bl	8007494 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7858      	ldrb	r0, [r3, #1]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f7ff fc8d 	bl	800736c <disk_write>
			fs->fsi_flag = 0;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff fca3 	bl	80073ac <disk_ioctl>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <sync_fs+0xcc>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	41615252 	.word	0x41615252
 8007a80:	61417272 	.word	0x61417272

08007a84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	3b02      	subs	r3, #2
 8007a92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	3b02      	subs	r3, #2
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d301      	bcc.n	8007aa4 <clust2sect+0x20>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	e008      	b.n	8007ab6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	895b      	ldrh	r3, [r3, #10]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	fb03 f202 	mul.w	r2, r3, r2
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab4:	4413      	add	r3, r2
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b086      	sub	sp, #24
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d904      	bls.n	8007ae2 <get_fat+0x20>
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d302      	bcc.n	8007ae8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	e0bb      	b.n	8007c60 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8007aec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	f000 8083 	beq.w	8007bfe <get_fat+0x13c>
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	f300 80a7 	bgt.w	8007c4c <get_fat+0x18a>
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d002      	beq.n	8007b08 <get_fat+0x46>
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d056      	beq.n	8007bb4 <get_fat+0xf2>
 8007b06:	e0a1      	b.n	8007c4c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	899b      	ldrh	r3, [r3, #12]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b26:	4413      	add	r3, r2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6938      	ldr	r0, [r7, #16]
 8007b2c:	f7ff ff0c 	bl	8007948 <move_window>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f040 808d 	bne.w	8007c52 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	60fa      	str	r2, [r7, #12]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	8992      	ldrh	r2, [r2, #12]
 8007b42:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b46:	fb01 f202 	mul.w	r2, r1, r2
 8007b4a:	1a9b      	subs	r3, r3, r2
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	899b      	ldrh	r3, [r3, #12]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b66:	4413      	add	r3, r2
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6938      	ldr	r0, [r7, #16]
 8007b6c:	f7ff feec 	bl	8007948 <move_window>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d16f      	bne.n	8007c56 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	899b      	ldrh	r3, [r3, #12]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b82:	fb01 f202 	mul.w	r2, r1, r2
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	461a      	mov	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <get_fat+0xe8>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	e002      	b.n	8007bb0 <get_fat+0xee>
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bb0:	617b      	str	r3, [r7, #20]
			break;
 8007bb2:	e055      	b.n	8007c60 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	899b      	ldrh	r3, [r3, #12]
 8007bbc:	085b      	lsrs	r3, r3, #1
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bc8:	4413      	add	r3, r2
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6938      	ldr	r0, [r7, #16]
 8007bce:	f7ff febb 	bl	8007948 <move_window>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d140      	bne.n	8007c5a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	8992      	ldrh	r2, [r2, #12]
 8007be6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bea:	fb00 f202 	mul.w	r2, r0, r2
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff fbf8 	bl	80073e8 <ld_word>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	617b      	str	r3, [r7, #20]
			break;
 8007bfc:	e030      	b.n	8007c60 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	899b      	ldrh	r3, [r3, #12]
 8007c06:	089b      	lsrs	r3, r3, #2
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c12:	4413      	add	r3, r2
 8007c14:	4619      	mov	r1, r3
 8007c16:	6938      	ldr	r0, [r7, #16]
 8007c18:	f7ff fe96 	bl	8007948 <move_window>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d11d      	bne.n	8007c5e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	8992      	ldrh	r2, [r2, #12]
 8007c30:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c34:	fb00 f202 	mul.w	r2, r0, r2
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff fbeb 	bl	8007418 <ld_dword>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c48:	617b      	str	r3, [r7, #20]
			break;
 8007c4a:	e009      	b.n	8007c60 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e006      	b.n	8007c60 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c52:	bf00      	nop
 8007c54:	e004      	b.n	8007c60 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c56:	bf00      	nop
 8007c58:	e002      	b.n	8007c60 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c5a:	bf00      	nop
 8007c5c:	e000      	b.n	8007c60 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c5e:	bf00      	nop
		}
	}

	return val;
 8007c60:	697b      	ldr	r3, [r7, #20]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007c6a:	b590      	push	{r4, r7, lr}
 8007c6c:	b089      	sub	sp, #36	; 0x24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007c76:	2302      	movs	r3, #2
 8007c78:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f240 8102 	bls.w	8007e86 <put_fat+0x21c>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	f080 80fc 	bcs.w	8007e86 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	f000 80b6 	beq.w	8007e04 <put_fat+0x19a>
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	f300 80fd 	bgt.w	8007e98 <put_fat+0x22e>
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d003      	beq.n	8007caa <put_fat+0x40>
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	f000 8083 	beq.w	8007dae <put_fat+0x144>
 8007ca8:	e0f6      	b.n	8007e98 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	61bb      	str	r3, [r7, #24]
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	899b      	ldrh	r3, [r3, #12]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cc8:	4413      	add	r3, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff fe3b 	bl	8007948 <move_window>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cd6:	7ffb      	ldrb	r3, [r7, #31]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f040 80d6 	bne.w	8007e8a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	61ba      	str	r2, [r7, #24]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	8992      	ldrh	r2, [r2, #12]
 8007cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cf2:	fb00 f202 	mul.w	r2, r0, r2
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <put_fat+0xb8>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b25b      	sxtb	r3, r3
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	b25a      	sxtb	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	b25b      	sxtb	r3, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	e001      	b.n	8007d26 <put_fat+0xbc>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	899b      	ldrh	r3, [r3, #12]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d40:	4413      	add	r3, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff fdff 	bl	8007948 <move_window>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d4e:	7ffb      	ldrb	r3, [r7, #31]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f040 809c 	bne.w	8007e8e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	899b      	ldrh	r3, [r3, #12]
 8007d60:	461a      	mov	r2, r3
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d68:	fb00 f202 	mul.w	r2, r0, r2
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	440b      	add	r3, r1
 8007d70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <put_fat+0x11a>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	091b      	lsrs	r3, r3, #4
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	e00e      	b.n	8007da2 <put_fat+0x138>
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b25b      	sxtb	r3, r3
 8007d8a:	f023 030f 	bic.w	r3, r3, #15
 8007d8e:	b25a      	sxtb	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	b25b      	sxtb	r3, r3
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	b25b      	sxtb	r3, r3
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	70da      	strb	r2, [r3, #3]
			break;
 8007dac:	e074      	b.n	8007e98 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	899b      	ldrh	r3, [r3, #12]
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dc2:	4413      	add	r3, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff fdbe 	bl	8007948 <move_window>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007dd0:	7ffb      	ldrb	r3, [r7, #31]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d15d      	bne.n	8007e92 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	8992      	ldrh	r2, [r2, #12]
 8007de4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007de8:	fb00 f202 	mul.w	r2, r0, r2
 8007dec:	1a9b      	subs	r3, r3, r2
 8007dee:	440b      	add	r3, r1
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	b292      	uxth	r2, r2
 8007df4:	4611      	mov	r1, r2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff fb31 	bl	800745e <st_word>
			fs->wflag = 1;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	70da      	strb	r2, [r3, #3]
			break;
 8007e02:	e049      	b.n	8007e98 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	899b      	ldrh	r3, [r3, #12]
 8007e0c:	089b      	lsrs	r3, r3, #2
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e18:	4413      	add	r3, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff fd93 	bl	8007948 <move_window>
 8007e22:	4603      	mov	r3, r0
 8007e24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e26:	7ffb      	ldrb	r3, [r7, #31]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d134      	bne.n	8007e96 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	8992      	ldrh	r2, [r2, #12]
 8007e40:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e44:	fb00 f202 	mul.w	r2, r0, r2
 8007e48:	1a9b      	subs	r3, r3, r2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff fae3 	bl	8007418 <ld_dword>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e58:	4323      	orrs	r3, r4
 8007e5a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	8992      	ldrh	r2, [r2, #12]
 8007e6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e6e:	fb00 f202 	mul.w	r2, r0, r2
 8007e72:	1a9b      	subs	r3, r3, r2
 8007e74:	440b      	add	r3, r1
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff fb0b 	bl	8007494 <st_dword>
			fs->wflag = 1;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	70da      	strb	r2, [r3, #3]
			break;
 8007e84:	e008      	b.n	8007e98 <put_fat+0x22e>
		}
	}
 8007e86:	bf00      	nop
 8007e88:	e006      	b.n	8007e98 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007e8a:	bf00      	nop
 8007e8c:	e004      	b.n	8007e98 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007e8e:	bf00      	nop
 8007e90:	e002      	b.n	8007e98 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007e92:	bf00      	nop
 8007e94:	e000      	b.n	8007e98 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007e96:	bf00      	nop
	return res;
 8007e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3724      	adds	r7, #36	; 0x24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd90      	pop	{r4, r7, pc}

08007ea2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d904      	bls.n	8007ec8 <remove_chain+0x26>
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d301      	bcc.n	8007ecc <remove_chain+0x2a>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e04b      	b.n	8007f64 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00c      	beq.n	8007eec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	69b8      	ldr	r0, [r7, #24]
 8007eda:	f7ff fec6 	bl	8007c6a <put_fat>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007ee2:	7ffb      	ldrb	r3, [r7, #31]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <remove_chain+0x4a>
 8007ee8:	7ffb      	ldrb	r3, [r7, #31]
 8007eea:	e03b      	b.n	8007f64 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007eec:	68b9      	ldr	r1, [r7, #8]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7ff fde7 	bl	8007ac2 <get_fat>
 8007ef4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d031      	beq.n	8007f60 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <remove_chain+0x64>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e02e      	b.n	8007f64 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0c:	d101      	bne.n	8007f12 <remove_chain+0x70>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e028      	b.n	8007f64 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f12:	2200      	movs	r2, #0
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	69b8      	ldr	r0, [r7, #24]
 8007f18:	f7ff fea7 	bl	8007c6a <put_fat>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f20:	7ffb      	ldrb	r3, [r7, #31]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <remove_chain+0x88>
 8007f26:	7ffb      	ldrb	r3, [r7, #31]
 8007f28:	e01c      	b.n	8007f64 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	3b02      	subs	r3, #2
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d20b      	bcs.n	8007f50 <remove_chain+0xae>
			fs->free_clst++;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	791b      	ldrb	r3, [r3, #4]
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d3c6      	bcc.n	8007eec <remove_chain+0x4a>
 8007f5e:	e000      	b.n	8007f62 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f60:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3720      	adds	r7, #32
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b088      	sub	sp, #32
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10d      	bne.n	8007f9e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <create_chain+0x2c>
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d31b      	bcc.n	8007fd0 <create_chain+0x64>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	61bb      	str	r3, [r7, #24]
 8007f9c:	e018      	b.n	8007fd0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff fd8e 	bl	8007ac2 <get_fat>
 8007fa6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d801      	bhi.n	8007fb2 <create_chain+0x46>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e070      	b.n	8008094 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb8:	d101      	bne.n	8007fbe <create_chain+0x52>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	e06a      	b.n	8008094 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d201      	bcs.n	8007fcc <create_chain+0x60>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	e063      	b.n	8008094 <create_chain+0x128>
		scl = clst;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d307      	bcc.n	8007ff4 <create_chain+0x88>
				ncl = 2;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d901      	bls.n	8007ff4 <create_chain+0x88>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e04f      	b.n	8008094 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff fd63 	bl	8007ac2 <get_fat>
 8007ffc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00e      	beq.n	8008022 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d003      	beq.n	8008012 <create_chain+0xa6>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d101      	bne.n	8008016 <create_chain+0xaa>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e03e      	b.n	8008094 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	429a      	cmp	r2, r3
 800801c:	d1da      	bne.n	8007fd4 <create_chain+0x68>
 800801e:	2300      	movs	r3, #0
 8008020:	e038      	b.n	8008094 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008022:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008024:	f04f 32ff 	mov.w	r2, #4294967295
 8008028:	69f9      	ldr	r1, [r7, #28]
 800802a:	6938      	ldr	r0, [r7, #16]
 800802c:	f7ff fe1d 	bl	8007c6a <put_fat>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <create_chain+0xe2>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d006      	beq.n	800804e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008040:	69fa      	ldr	r2, [r7, #28]
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6938      	ldr	r0, [r7, #16]
 8008046:	f7ff fe10 	bl	8007c6a <put_fat>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d116      	bne.n	8008082 <create_chain+0x116>
		fs->last_clst = ncl;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	3b02      	subs	r3, #2
 8008064:	429a      	cmp	r2, r3
 8008066:	d804      	bhi.n	8008072 <create_chain+0x106>
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	1e5a      	subs	r2, r3, #1
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	791b      	ldrb	r3, [r3, #4]
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	b2da      	uxtb	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	711a      	strb	r2, [r3, #4]
 8008080:	e007      	b.n	8008092 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d102      	bne.n	800808e <create_chain+0x122>
 8008088:	f04f 33ff 	mov.w	r3, #4294967295
 800808c:	e000      	b.n	8008090 <create_chain+0x124>
 800808e:	2301      	movs	r3, #1
 8008090:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008092:	69fb      	ldr	r3, [r7, #28]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3720      	adds	r7, #32
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	3304      	adds	r3, #4
 80080b2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	899b      	ldrh	r3, [r3, #12]
 80080b8:	461a      	mov	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	8952      	ldrh	r2, [r2, #10]
 80080c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80080c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1d1a      	adds	r2, r3, #4
 80080ce:	613a      	str	r2, [r7, #16]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <clmt_clust+0x42>
 80080da:	2300      	movs	r3, #0
 80080dc:	e010      	b.n	8008100 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d307      	bcc.n	80080f6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3304      	adds	r3, #4
 80080f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080f4:	e7e9      	b.n	80080ca <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80080f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	4413      	add	r3, r2
}
 8008100:	4618      	mov	r0, r3
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008122:	d204      	bcs.n	800812e <dir_sdi+0x22>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	f003 031f 	and.w	r3, r3, #31
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <dir_sdi+0x26>
		return FR_INT_ERR;
 800812e:	2302      	movs	r3, #2
 8008130:	e071      	b.n	8008216 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <dir_sdi+0x46>
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d902      	bls.n	8008152 <dir_sdi+0x46>
		clst = fs->dirbase;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10c      	bne.n	8008172 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	8912      	ldrh	r2, [r2, #8]
 8008160:	4293      	cmp	r3, r2
 8008162:	d301      	bcc.n	8008168 <dir_sdi+0x5c>
 8008164:	2302      	movs	r3, #2
 8008166:	e056      	b.n	8008216 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	61da      	str	r2, [r3, #28]
 8008170:	e02d      	b.n	80081ce <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	895b      	ldrh	r3, [r3, #10]
 8008176:	461a      	mov	r2, r3
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	899b      	ldrh	r3, [r3, #12]
 800817c:	fb02 f303 	mul.w	r3, r2, r3
 8008180:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008182:	e019      	b.n	80081b8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6979      	ldr	r1, [r7, #20]
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff fc9a 	bl	8007ac2 <get_fat>
 800818e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008196:	d101      	bne.n	800819c <dir_sdi+0x90>
 8008198:	2301      	movs	r3, #1
 800819a:	e03c      	b.n	8008216 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d904      	bls.n	80081ac <dir_sdi+0xa0>
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d301      	bcc.n	80081b0 <dir_sdi+0xa4>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e032      	b.n	8008216 <dir_sdi+0x10a>
			ofs -= csz;
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d2e1      	bcs.n	8008184 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80081c0:	6979      	ldr	r1, [r7, #20]
 80081c2:	6938      	ldr	r0, [r7, #16]
 80081c4:	f7ff fc5e 	bl	8007a84 <clust2sect>
 80081c8:	4602      	mov	r2, r0
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <dir_sdi+0xd4>
 80081dc:	2302      	movs	r3, #2
 80081de:	e01a      	b.n	8008216 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	899b      	ldrh	r3, [r3, #12]
 80081e8:	4619      	mov	r1, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80081f0:	441a      	add	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	899b      	ldrh	r3, [r3, #12]
 8008200:	461a      	mov	r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	fbb3 f0f2 	udiv	r0, r3, r2
 8008208:	fb00 f202 	mul.w	r2, r0, r2
 800820c:	1a9b      	subs	r3, r3, r2
 800820e:	18ca      	adds	r2, r1, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b086      	sub	sp, #24
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	3320      	adds	r3, #32
 8008234:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <dir_next+0x28>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008244:	d301      	bcc.n	800824a <dir_next+0x2c>
 8008246:	2304      	movs	r3, #4
 8008248:	e0bb      	b.n	80083c2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	899b      	ldrh	r3, [r3, #12]
 800824e:	461a      	mov	r2, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	fbb3 f1f2 	udiv	r1, r3, r2
 8008256:	fb01 f202 	mul.w	r2, r1, r2
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 809d 	bne.w	800839c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	8912      	ldrh	r2, [r2, #8]
 800827c:	4293      	cmp	r3, r2
 800827e:	f0c0 808d 	bcc.w	800839c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	61da      	str	r2, [r3, #28]
 8008288:	2304      	movs	r3, #4
 800828a:	e09a      	b.n	80083c2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	899b      	ldrh	r3, [r3, #12]
 8008290:	461a      	mov	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	fbb3 f3f2 	udiv	r3, r3, r2
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	8952      	ldrh	r2, [r2, #10]
 800829c:	3a01      	subs	r2, #1
 800829e:	4013      	ands	r3, r2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d17b      	bne.n	800839c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f7ff fc08 	bl	8007ac2 <get_fat>
 80082b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d801      	bhi.n	80082be <dir_next+0xa0>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e081      	b.n	80083c2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d101      	bne.n	80082ca <dir_next+0xac>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e07b      	b.n	80083c2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d359      	bcc.n	8008388 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d104      	bne.n	80082e4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	61da      	str	r2, [r3, #28]
 80082e0:	2304      	movs	r3, #4
 80082e2:	e06e      	b.n	80083c2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7ff fe3d 	bl	8007f6c <create_chain>
 80082f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <dir_next+0xe0>
 80082fa:	2307      	movs	r3, #7
 80082fc:	e061      	b.n	80083c2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <dir_next+0xea>
 8008304:	2302      	movs	r3, #2
 8008306:	e05c      	b.n	80083c2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d101      	bne.n	8008314 <dir_next+0xf6>
 8008310:	2301      	movs	r3, #1
 8008312:	e056      	b.n	80083c2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff fad3 	bl	80078c0 <sync_window>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <dir_next+0x106>
 8008320:	2301      	movs	r3, #1
 8008322:	e04e      	b.n	80083c2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	899b      	ldrh	r3, [r3, #12]
 800832e:	461a      	mov	r2, r3
 8008330:	2100      	movs	r1, #0
 8008332:	f7ff f8fc 	bl	800752e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	6979      	ldr	r1, [r7, #20]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f7ff fba1 	bl	8007a84 <clust2sect>
 8008342:	4602      	mov	r2, r0
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	635a      	str	r2, [r3, #52]	; 0x34
 8008348:	e012      	b.n	8008370 <dir_next+0x152>
						fs->wflag = 1;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7ff fab5 	bl	80078c0 <sync_window>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <dir_next+0x142>
 800835c:	2301      	movs	r3, #1
 800835e:	e030      	b.n	80083c2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	3301      	adds	r3, #1
 8008364:	613b      	str	r3, [r7, #16]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	635a      	str	r2, [r3, #52]	; 0x34
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	895b      	ldrh	r3, [r3, #10]
 8008374:	461a      	mov	r2, r3
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4293      	cmp	r3, r2
 800837a:	d3e6      	bcc.n	800834a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	1ad2      	subs	r2, r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800838e:	6979      	ldr	r1, [r7, #20]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fb77 	bl	8007a84 <clust2sect>
 8008396:	4602      	mov	r2, r0
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	899b      	ldrh	r3, [r3, #12]
 80083ac:	461a      	mov	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80083b4:	fb00 f202 	mul.w	r2, r0, r2
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	18ca      	adds	r2, r1, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80083da:	2100      	movs	r1, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff fe95 	bl	800810c <dir_sdi>
 80083e2:	4603      	mov	r3, r0
 80083e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d12b      	bne.n	8008444 <dir_alloc+0x7a>
		n = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	4619      	mov	r1, r3
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff faa6 	bl	8007948 <move_window>
 80083fc:	4603      	mov	r3, r0
 80083fe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d11d      	bne.n	8008442 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2be5      	cmp	r3, #229	; 0xe5
 800840e:	d004      	beq.n	800841a <dir_alloc+0x50>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d107      	bne.n	800842a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	3301      	adds	r3, #1
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d102      	bne.n	800842e <dir_alloc+0x64>
 8008428:	e00c      	b.n	8008444 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800842a:	2300      	movs	r3, #0
 800842c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800842e:	2101      	movs	r1, #1
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff fef4 	bl	800821e <dir_next>
 8008436:	4603      	mov	r3, r0
 8008438:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0d7      	beq.n	80083f0 <dir_alloc+0x26>
 8008440:	e000      	b.n	8008444 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008442:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	2b04      	cmp	r3, #4
 8008448:	d101      	bne.n	800844e <dir_alloc+0x84>
 800844a:	2307      	movs	r3, #7
 800844c:	75fb      	strb	r3, [r7, #23]
	return res;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	331a      	adds	r3, #26
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe ffbe 	bl	80073e8 <ld_word>
 800846c:	4603      	mov	r3, r0
 800846e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b03      	cmp	r3, #3
 8008476:	d109      	bne.n	800848c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	3314      	adds	r3, #20
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe ffb3 	bl	80073e8 <ld_word>
 8008482:	4603      	mov	r3, r0
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	331a      	adds	r3, #26
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	b292      	uxth	r2, r2
 80084aa:	4611      	mov	r1, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe ffd6 	bl	800745e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d109      	bne.n	80084ce <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f103 0214 	add.w	r2, r3, #20
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	0c1b      	lsrs	r3, r3, #16
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7fe ffc8 	bl	800745e <st_word>
	}
}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	331a      	adds	r3, #26
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe ff7e 	bl	80073e8 <ld_word>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <cmp_lfn+0x1e>
 80084f2:	2300      	movs	r3, #0
 80084f4:	e059      	b.n	80085aa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084fe:	1e5a      	subs	r2, r3, #1
 8008500:	4613      	mov	r3, r2
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800850c:	2301      	movs	r3, #1
 800850e:	81fb      	strh	r3, [r7, #14]
 8008510:	2300      	movs	r3, #0
 8008512:	613b      	str	r3, [r7, #16]
 8008514:	e033      	b.n	800857e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008516:	4a27      	ldr	r2, [pc, #156]	; (80085b4 <cmp_lfn+0xdc>)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	4413      	add	r3, r2
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	4413      	add	r3, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe ff5f 	bl	80073e8 <ld_word>
 800852a:	4603      	mov	r3, r0
 800852c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800852e:	89fb      	ldrh	r3, [r7, #14]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01a      	beq.n	800856a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2bfe      	cmp	r3, #254	; 0xfe
 8008538:	d812      	bhi.n	8008560 <cmp_lfn+0x88>
 800853a:	89bb      	ldrh	r3, [r7, #12]
 800853c:	4618      	mov	r0, r3
 800853e:	f001 fe11 	bl	800a164 <ff_wtoupper>
 8008542:	4603      	mov	r3, r0
 8008544:	461c      	mov	r4, r3
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	617a      	str	r2, [r7, #20]
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	4413      	add	r3, r2
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f001 fe05 	bl	800a164 <ff_wtoupper>
 800855a:	4603      	mov	r3, r0
 800855c:	429c      	cmp	r4, r3
 800855e:	d001      	beq.n	8008564 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008560:	2300      	movs	r3, #0
 8008562:	e022      	b.n	80085aa <cmp_lfn+0xd2>
			}
			wc = uc;
 8008564:	89bb      	ldrh	r3, [r7, #12]
 8008566:	81fb      	strh	r3, [r7, #14]
 8008568:	e006      	b.n	8008578 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800856a:	89bb      	ldrh	r3, [r7, #12]
 800856c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008570:	4293      	cmp	r3, r2
 8008572:	d001      	beq.n	8008578 <cmp_lfn+0xa0>
 8008574:	2300      	movs	r3, #0
 8008576:	e018      	b.n	80085aa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	3301      	adds	r3, #1
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	2b0c      	cmp	r3, #12
 8008582:	d9c8      	bls.n	8008516 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <cmp_lfn+0xd0>
 8008590:	89fb      	ldrh	r3, [r7, #14]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d008      	beq.n	80085a8 <cmp_lfn+0xd0>
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <cmp_lfn+0xd0>
 80085a4:	2300      	movs	r3, #0
 80085a6:	e000      	b.n	80085aa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80085a8:	2301      	movs	r3, #1
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	371c      	adds	r7, #28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd90      	pop	{r4, r7, pc}
 80085b2:	bf00      	nop
 80085b4:	0800dd84 	.word	0x0800dd84

080085b8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4611      	mov	r1, r2
 80085c4:	461a      	mov	r2, r3
 80085c6:	460b      	mov	r3, r1
 80085c8:	71fb      	strb	r3, [r7, #7]
 80085ca:	4613      	mov	r3, r2
 80085cc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	330d      	adds	r3, #13
 80085d2:	79ba      	ldrb	r2, [r7, #6]
 80085d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	330b      	adds	r3, #11
 80085da:	220f      	movs	r2, #15
 80085dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	330c      	adds	r3, #12
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	331a      	adds	r3, #26
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fe ff36 	bl	800745e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	1e5a      	subs	r2, r3, #1
 80085f6:	4613      	mov	r3, r2
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	4413      	add	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	82fb      	strh	r3, [r7, #22]
 8008606:	2300      	movs	r3, #0
 8008608:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800860a:	8afb      	ldrh	r3, [r7, #22]
 800860c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008610:	4293      	cmp	r3, r2
 8008612:	d007      	beq.n	8008624 <put_lfn+0x6c>
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	61fa      	str	r2, [r7, #28]
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008624:	4a17      	ldr	r2, [pc, #92]	; (8008684 <put_lfn+0xcc>)
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	4413      	add	r3, r2
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	461a      	mov	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	4413      	add	r3, r2
 8008632:	8afa      	ldrh	r2, [r7, #22]
 8008634:	4611      	mov	r1, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe ff11 	bl	800745e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800863c:	8afb      	ldrh	r3, [r7, #22]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d102      	bne.n	8008648 <put_lfn+0x90>
 8008642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008646:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	3301      	adds	r3, #1
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b0c      	cmp	r3, #12
 8008652:	d9da      	bls.n	800860a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008654:	8afb      	ldrh	r3, [r7, #22]
 8008656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800865a:	4293      	cmp	r3, r2
 800865c:	d006      	beq.n	800866c <put_lfn+0xb4>
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d103      	bne.n	8008674 <put_lfn+0xbc>
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008672:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	79fa      	ldrb	r2, [r7, #7]
 8008678:	701a      	strb	r2, [r3, #0]
}
 800867a:	bf00      	nop
 800867c:	3720      	adds	r7, #32
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	0800dd84 	.word	0x0800dd84

08008688 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08c      	sub	sp, #48	; 0x30
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008696:	220b      	movs	r2, #11
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f7fe ff26 	bl	80074ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	d92b      	bls.n	80086fe <gen_numname+0x76>
		sr = seq;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80086aa:	e022      	b.n	80086f2 <gen_numname+0x6a>
			wc = *lfn++;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	1c9a      	adds	r2, r3, #2
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80086b6:	2300      	movs	r3, #0
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ba:	e017      	b.n	80086ec <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	005a      	lsls	r2, r3, #1
 80086c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	4413      	add	r3, r2
 80086c8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80086ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086cc:	085b      	lsrs	r3, r3, #1
 80086ce:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <gen_numname+0x5e>
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80086e0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80086e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	3301      	adds	r3, #1
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2b0f      	cmp	r3, #15
 80086f0:	d9e4      	bls.n	80086bc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1d8      	bne.n	80086ac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80086fe:	2307      	movs	r3, #7
 8008700:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	b2db      	uxtb	r3, r3
 800870c:	3330      	adds	r3, #48	; 0x30
 800870e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008716:	2b39      	cmp	r3, #57	; 0x39
 8008718:	d904      	bls.n	8008724 <gen_numname+0x9c>
 800871a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800871e:	3307      	adds	r3, #7
 8008720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	1e5a      	subs	r2, r3, #1
 8008728:	62ba      	str	r2, [r7, #40]	; 0x28
 800872a:	3330      	adds	r3, #48	; 0x30
 800872c:	443b      	add	r3, r7
 800872e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008732:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	091b      	lsrs	r3, r3, #4
 800873a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1df      	bne.n	8008702 <gen_numname+0x7a>
	ns[i] = '~';
 8008742:	f107 0214 	add.w	r2, r7, #20
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	4413      	add	r3, r2
 800874a:	227e      	movs	r2, #126	; 0x7e
 800874c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800874e:	2300      	movs	r3, #0
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
 8008752:	e002      	b.n	800875a <gen_numname+0xd2>
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	3301      	adds	r3, #1
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
 800875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	429a      	cmp	r2, r3
 8008760:	d205      	bcs.n	800876e <gen_numname+0xe6>
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	4413      	add	r3, r2
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b20      	cmp	r3, #32
 800876c:	d1f2      	bne.n	8008754 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	2b07      	cmp	r3, #7
 8008772:	d807      	bhi.n	8008784 <gen_numname+0xfc>
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	62ba      	str	r2, [r7, #40]	; 0x28
 800877a:	3330      	adds	r3, #48	; 0x30
 800877c:	443b      	add	r3, r7
 800877e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008782:	e000      	b.n	8008786 <gen_numname+0xfe>
 8008784:	2120      	movs	r1, #32
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	627a      	str	r2, [r7, #36]	; 0x24
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	460a      	mov	r2, r1
 8008792:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	2b07      	cmp	r3, #7
 8008798:	d9e9      	bls.n	800876e <gen_numname+0xe6>
}
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	3730      	adds	r7, #48	; 0x30
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80087b0:	230b      	movs	r3, #11
 80087b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	0852      	lsrs	r2, r2, #1
 80087ba:	01db      	lsls	r3, r3, #7
 80087bc:	4313      	orrs	r3, r2
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	1c59      	adds	r1, r3, #1
 80087c4:	6079      	str	r1, [r7, #4]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	4413      	add	r3, r2
 80087ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	60bb      	str	r3, [r7, #8]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1ed      	bne.n	80087b4 <sum_sfn+0x10>
	return sum;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b086      	sub	sp, #24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80087f4:	2100      	movs	r1, #0
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff fc88 	bl	800810c <dir_sdi>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <dir_find+0x24>
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	e0a9      	b.n	800895e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800880a:	23ff      	movs	r3, #255	; 0xff
 800880c:	753b      	strb	r3, [r7, #20]
 800880e:	7d3b      	ldrb	r3, [r7, #20]
 8008810:	757b      	strb	r3, [r7, #21]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f04f 32ff 	mov.w	r2, #4294967295
 8008818:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	4619      	mov	r1, r3
 8008820:	6938      	ldr	r0, [r7, #16]
 8008822:	f7ff f891 	bl	8007948 <move_window>
 8008826:	4603      	mov	r3, r0
 8008828:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f040 8090 	bne.w	8008952 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800883a:	7dbb      	ldrb	r3, [r7, #22]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <dir_find+0x60>
 8008840:	2304      	movs	r3, #4
 8008842:	75fb      	strb	r3, [r7, #23]
 8008844:	e08a      	b.n	800895c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	330b      	adds	r3, #11
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008852:	73fb      	strb	r3, [r7, #15]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7bfa      	ldrb	r2, [r7, #15]
 8008858:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800885a:	7dbb      	ldrb	r3, [r7, #22]
 800885c:	2be5      	cmp	r3, #229	; 0xe5
 800885e:	d007      	beq.n	8008870 <dir_find+0x8a>
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <dir_find+0x98>
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	2b0f      	cmp	r3, #15
 800886e:	d006      	beq.n	800887e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008870:	23ff      	movs	r3, #255	; 0xff
 8008872:	757b      	strb	r3, [r7, #21]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f04f 32ff 	mov.w	r2, #4294967295
 800887a:	631a      	str	r2, [r3, #48]	; 0x30
 800887c:	e05e      	b.n	800893c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d136      	bne.n	80088f2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800888a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888e:	2b00      	cmp	r3, #0
 8008890:	d154      	bne.n	800893c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008892:	7dbb      	ldrb	r3, [r7, #22]
 8008894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00d      	beq.n	80088b8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	7b5b      	ldrb	r3, [r3, #13]
 80088a2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80088a4:	7dbb      	ldrb	r3, [r7, #22]
 80088a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088aa:	75bb      	strb	r3, [r7, #22]
 80088ac:	7dbb      	ldrb	r3, [r7, #22]
 80088ae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	695a      	ldr	r2, [r3, #20]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80088b8:	7dba      	ldrb	r2, [r7, #22]
 80088ba:	7d7b      	ldrb	r3, [r7, #21]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d115      	bne.n	80088ec <dir_find+0x106>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	330d      	adds	r3, #13
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	7d3a      	ldrb	r2, [r7, #20]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d10e      	bne.n	80088ec <dir_find+0x106>
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	4619      	mov	r1, r3
 80088d8:	4610      	mov	r0, r2
 80088da:	f7ff fdfd 	bl	80084d8 <cmp_lfn>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <dir_find+0x106>
 80088e4:	7d7b      	ldrb	r3, [r7, #21]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	e000      	b.n	80088ee <dir_find+0x108>
 80088ec:	23ff      	movs	r3, #255	; 0xff
 80088ee:	757b      	strb	r3, [r7, #21]
 80088f0:	e024      	b.n	800893c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80088f2:	7d7b      	ldrb	r3, [r7, #21]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d109      	bne.n	800890c <dir_find+0x126>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff ff51 	bl	80087a4 <sum_sfn>
 8008902:	4603      	mov	r3, r0
 8008904:	461a      	mov	r2, r3
 8008906:	7d3b      	ldrb	r3, [r7, #20]
 8008908:	4293      	cmp	r3, r2
 800890a:	d024      	beq.n	8008956 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <dir_find+0x14a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a18      	ldr	r0, [r3, #32]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3324      	adds	r3, #36	; 0x24
 8008922:	220b      	movs	r2, #11
 8008924:	4619      	mov	r1, r3
 8008926:	f7fe fe1d 	bl	8007564 <mem_cmp>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d014      	beq.n	800895a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008930:	23ff      	movs	r3, #255	; 0xff
 8008932:	757b      	strb	r3, [r7, #21]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f04f 32ff 	mov.w	r2, #4294967295
 800893a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff fc6d 	bl	800821e <dir_next>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	2b00      	cmp	r3, #0
 800894c:	f43f af65 	beq.w	800881a <dir_find+0x34>
 8008950:	e004      	b.n	800895c <dir_find+0x176>
		if (res != FR_OK) break;
 8008952:	bf00      	nop
 8008954:	e002      	b.n	800895c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800895a:	bf00      	nop

	return res;
 800895c:	7dfb      	ldrb	r3, [r7, #23]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08c      	sub	sp, #48	; 0x30
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800897c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <dir_register+0x20>
 8008984:	2306      	movs	r3, #6
 8008986:	e0e0      	b.n	8008b4a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008988:	2300      	movs	r3, #0
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
 800898c:	e002      	b.n	8008994 <dir_register+0x2c>
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	3301      	adds	r3, #1
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	4413      	add	r3, r2
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1f4      	bne.n	800898e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80089aa:	f107 030c 	add.w	r3, r7, #12
 80089ae:	220c      	movs	r2, #12
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe fd9b 	bl	80074ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d032      	beq.n	8008a26 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2240      	movs	r2, #64	; 0x40
 80089c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80089c8:	2301      	movs	r3, #1
 80089ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80089cc:	e016      	b.n	80089fc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	f107 010c 	add.w	r1, r7, #12
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	f7ff fe53 	bl	8008688 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff feff 	bl	80087e6 <dir_find>
 80089e8:	4603      	mov	r3, r0
 80089ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80089ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	3301      	adds	r3, #1
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	2b63      	cmp	r3, #99	; 0x63
 8008a00:	d9e5      	bls.n	80089ce <dir_register+0x66>
 8008a02:	e000      	b.n	8008a06 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008a04:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	2b64      	cmp	r3, #100	; 0x64
 8008a0a:	d101      	bne.n	8008a10 <dir_register+0xa8>
 8008a0c:	2307      	movs	r3, #7
 8008a0e:	e09c      	b.n	8008b4a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d002      	beq.n	8008a1e <dir_register+0xb6>
 8008a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a1c:	e095      	b.n	8008b4a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008a1e:	7dfa      	ldrb	r2, [r7, #23]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d007      	beq.n	8008a40 <dir_register+0xd8>
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	330c      	adds	r3, #12
 8008a34:	4a47      	ldr	r2, [pc, #284]	; (8008b54 <dir_register+0x1ec>)
 8008a36:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3a:	089b      	lsrs	r3, r3, #2
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	e000      	b.n	8008a42 <dir_register+0xda>
 8008a40:	2301      	movs	r3, #1
 8008a42:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008a44:	6a39      	ldr	r1, [r7, #32]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fcbf 	bl	80083ca <dir_alloc>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d148      	bne.n	8008aec <dir_register+0x184>
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	623b      	str	r3, [r7, #32]
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d042      	beq.n	8008aec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	015b      	lsls	r3, r3, #5
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff fb4a 	bl	800810c <dir_sdi>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d132      	bne.n	8008aec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3324      	adds	r3, #36	; 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fe8a 	bl	80087a4 <sum_sfn>
 8008a90:	4603      	mov	r3, r0
 8008a92:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	69f8      	ldr	r0, [r7, #28]
 8008a9c:	f7fe ff54 	bl	8007948 <move_window>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d11d      	bne.n	8008aea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	6918      	ldr	r0, [r3, #16]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a19      	ldr	r1, [r3, #32]
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	7efb      	ldrb	r3, [r7, #27]
 8008abc:	f7ff fd7c 	bl	80085b8 <put_lfn>
				fs->wflag = 1;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff fba8 	bl	800821e <dir_next>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d107      	bne.n	8008aec <dir_register+0x184>
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	623b      	str	r3, [r7, #32]
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1d5      	bne.n	8008a94 <dir_register+0x12c>
 8008ae8:	e000      	b.n	8008aec <dir_register+0x184>
				if (res != FR_OK) break;
 8008aea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d128      	bne.n	8008b46 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	4619      	mov	r1, r3
 8008afa:	69f8      	ldr	r0, [r7, #28]
 8008afc:	f7fe ff24 	bl	8007948 <move_window>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d11b      	bne.n	8008b46 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	2220      	movs	r2, #32
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fd09 	bl	800752e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a18      	ldr	r0, [r3, #32]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3324      	adds	r3, #36	; 0x24
 8008b24:	220b      	movs	r2, #11
 8008b26:	4619      	mov	r1, r3
 8008b28:	f7fe fce0 	bl	80074ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	330c      	adds	r3, #12
 8008b38:	f002 0218 	and.w	r2, r2, #24
 8008b3c:	b2d2      	uxtb	r2, r2
 8008b3e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	2201      	movs	r2, #1
 8008b44:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3730      	adds	r7, #48	; 0x30
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	4ec4ec4f 	.word	0x4ec4ec4f

08008b58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08a      	sub	sp, #40	; 0x28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	61ba      	str	r2, [r7, #24]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4413      	add	r3, r2
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b88:	2b1f      	cmp	r3, #31
 8008b8a:	d940      	bls.n	8008c0e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b8e:	2b2f      	cmp	r3, #47	; 0x2f
 8008b90:	d006      	beq.n	8008ba0 <create_name+0x48>
 8008b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b94:	2b5c      	cmp	r3, #92	; 0x5c
 8008b96:	d110      	bne.n	8008bba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008b98:	e002      	b.n	8008ba0 <create_name+0x48>
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	61bb      	str	r3, [r7, #24]
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b2f      	cmp	r3, #47	; 0x2f
 8008baa:	d0f6      	beq.n	8008b9a <create_name+0x42>
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8008bb6:	d0f0      	beq.n	8008b9a <create_name+0x42>
			break;
 8008bb8:	e02a      	b.n	8008c10 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2bfe      	cmp	r3, #254	; 0xfe
 8008bbe:	d901      	bls.n	8008bc4 <create_name+0x6c>
 8008bc0:	2306      	movs	r3, #6
 8008bc2:	e17d      	b.n	8008ec0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bcc:	2101      	movs	r1, #1
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 fa8c 	bl	800a0ec <ff_convert>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <create_name+0x8a>
 8008bde:	2306      	movs	r3, #6
 8008be0:	e16e      	b.n	8008ec0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be4:	2b7f      	cmp	r3, #127	; 0x7f
 8008be6:	d809      	bhi.n	8008bfc <create_name+0xa4>
 8008be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bea:	4619      	mov	r1, r3
 8008bec:	488d      	ldr	r0, [pc, #564]	; (8008e24 <create_name+0x2cc>)
 8008bee:	f7fe fce0 	bl	80075b2 <chk_chr>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <create_name+0xa4>
 8008bf8:	2306      	movs	r3, #6
 8008bfa:	e161      	b.n	8008ec0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	617a      	str	r2, [r7, #20]
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c0a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008c0c:	e7b4      	b.n	8008b78 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008c0e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	441a      	add	r2, r3
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c1c:	2b1f      	cmp	r3, #31
 8008c1e:	d801      	bhi.n	8008c24 <create_name+0xcc>
 8008c20:	2304      	movs	r3, #4
 8008c22:	e000      	b.n	8008c26 <create_name+0xce>
 8008c24:	2300      	movs	r3, #0
 8008c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008c2a:	e011      	b.n	8008c50 <create_name+0xf8>
		w = lfn[di - 1];
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c32:	3b01      	subs	r3, #1
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d002      	beq.n	8008c4a <create_name+0xf2>
 8008c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c46:	2b2e      	cmp	r3, #46	; 0x2e
 8008c48:	d106      	bne.n	8008c58 <create_name+0x100>
		di--;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1ea      	bne.n	8008c2c <create_name+0xd4>
 8008c56:	e000      	b.n	8008c5a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008c58:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <create_name+0x118>
 8008c6c:	2306      	movs	r3, #6
 8008c6e:	e127      	b.n	8008ec0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3324      	adds	r3, #36	; 0x24
 8008c74:	220b      	movs	r2, #11
 8008c76:	2120      	movs	r1, #32
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe fc58 	bl	800752e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008c7e:	2300      	movs	r3, #0
 8008c80:	61bb      	str	r3, [r7, #24]
 8008c82:	e002      	b.n	8008c8a <create_name+0x132>
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	3301      	adds	r3, #1
 8008c88:	61bb      	str	r3, [r7, #24]
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d0f5      	beq.n	8008c84 <create_name+0x12c>
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca4:	d0ee      	beq.n	8008c84 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d009      	beq.n	8008cc0 <create_name+0x168>
 8008cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cb0:	f043 0303 	orr.w	r3, r3, #3
 8008cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008cb8:	e002      	b.n	8008cc0 <create_name+0x168>
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <create_name+0x182>
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd8:	d1ef      	bne.n	8008cba <create_name+0x162>

	i = b = 0; ni = 8;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	623b      	str	r3, [r7, #32]
 8008ce4:	2308      	movs	r3, #8
 8008ce6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	61ba      	str	r2, [r7, #24]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8090 	beq.w	8008e20 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	d006      	beq.n	8008d14 <create_name+0x1bc>
 8008d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d08:	2b2e      	cmp	r3, #46	; 0x2e
 8008d0a:	d10a      	bne.n	8008d22 <create_name+0x1ca>
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d006      	beq.n	8008d22 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d18:	f043 0303 	orr.w	r3, r3, #3
 8008d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d20:	e07d      	b.n	8008e1e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008d22:	6a3a      	ldr	r2, [r7, #32]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d203      	bcs.n	8008d32 <create_name+0x1da>
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d123      	bne.n	8008d7a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	2b0b      	cmp	r3, #11
 8008d36:	d106      	bne.n	8008d46 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d3c:	f043 0303 	orr.w	r3, r3, #3
 8008d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d44:	e075      	b.n	8008e32 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d005      	beq.n	8008d5a <create_name+0x202>
 8008d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d52:	f043 0303 	orr.w	r3, r3, #3
 8008d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d866      	bhi.n	8008e30 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	61bb      	str	r3, [r7, #24]
 8008d66:	2308      	movs	r3, #8
 8008d68:	623b      	str	r3, [r7, #32]
 8008d6a:	230b      	movs	r3, #11
 8008d6c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008d6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d78:	e051      	b.n	8008e1e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8008d7e:	d914      	bls.n	8008daa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d82:	2100      	movs	r1, #0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 f9b1 	bl	800a0ec <ff_convert>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d004      	beq.n	8008d9e <create_name+0x246>
 8008d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d96:	3b80      	subs	r3, #128	; 0x80
 8008d98:	4a23      	ldr	r2, [pc, #140]	; (8008e28 <create_name+0x2d0>)
 8008d9a:	5cd3      	ldrb	r3, [r2, r3]
 8008d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008da2:	f043 0302 	orr.w	r3, r3, #2
 8008da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d007      	beq.n	8008dc0 <create_name+0x268>
 8008db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008db2:	4619      	mov	r1, r3
 8008db4:	481d      	ldr	r0, [pc, #116]	; (8008e2c <create_name+0x2d4>)
 8008db6:	f7fe fbfc 	bl	80075b2 <chk_chr>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d008      	beq.n	8008dd2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008dc0:	235f      	movs	r3, #95	; 0x5f
 8008dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc8:	f043 0303 	orr.w	r3, r3, #3
 8008dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dd0:	e01b      	b.n	8008e0a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dd4:	2b40      	cmp	r3, #64	; 0x40
 8008dd6:	d909      	bls.n	8008dec <create_name+0x294>
 8008dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dda:	2b5a      	cmp	r3, #90	; 0x5a
 8008ddc:	d806      	bhi.n	8008dec <create_name+0x294>
					b |= 2;
 8008dde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008de2:	f043 0302 	orr.w	r3, r3, #2
 8008de6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008dea:	e00e      	b.n	8008e0a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dee:	2b60      	cmp	r3, #96	; 0x60
 8008df0:	d90b      	bls.n	8008e0a <create_name+0x2b2>
 8008df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df4:	2b7a      	cmp	r3, #122	; 0x7a
 8008df6:	d808      	bhi.n	8008e0a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e06:	3b20      	subs	r3, #32
 8008e08:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	623a      	str	r2, [r7, #32]
 8008e10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e12:	b2d1      	uxtb	r1, r2
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	4413      	add	r3, r2
 8008e18:	460a      	mov	r2, r1
 8008e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008e1e:	e763      	b.n	8008ce8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008e20:	bf00      	nop
 8008e22:	e006      	b.n	8008e32 <create_name+0x2da>
 8008e24:	0800dc7c 	.word	0x0800dc7c
 8008e28:	0800dd04 	.word	0x0800dd04
 8008e2c:	0800dc88 	.word	0x0800dc88
			if (si > di) break;			/* No extension */
 8008e30:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e38:	2be5      	cmp	r3, #229	; 0xe5
 8008e3a:	d103      	bne.n	8008e44 <create_name+0x2ec>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2205      	movs	r2, #5
 8008e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	2b08      	cmp	r3, #8
 8008e48:	d104      	bne.n	8008e54 <create_name+0x2fc>
 8008e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008e54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e58:	f003 030c 	and.w	r3, r3, #12
 8008e5c:	2b0c      	cmp	r3, #12
 8008e5e:	d005      	beq.n	8008e6c <create_name+0x314>
 8008e60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e64:	f003 0303 	and.w	r3, r3, #3
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	d105      	bne.n	8008e78 <create_name+0x320>
 8008e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e70:	f043 0302 	orr.w	r3, r3, #2
 8008e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d117      	bne.n	8008eb4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008e84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e88:	f003 0303 	and.w	r3, r3, #3
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d105      	bne.n	8008e9c <create_name+0x344>
 8008e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e94:	f043 0310 	orr.w	r3, r3, #16
 8008e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ea0:	f003 030c 	and.w	r3, r3, #12
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d105      	bne.n	8008eb4 <create_name+0x35c>
 8008ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eac:	f043 0308 	orr.w	r3, r3, #8
 8008eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008eba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008ebe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3728      	adds	r7, #40	; 0x28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008edc:	e002      	b.n	8008ee4 <follow_path+0x1c>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b2f      	cmp	r3, #47	; 0x2f
 8008eea:	d0f8      	beq.n	8008ede <follow_path+0x16>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b5c      	cmp	r3, #92	; 0x5c
 8008ef2:	d0f4      	beq.n	8008ede <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b1f      	cmp	r3, #31
 8008f00:	d80a      	bhi.n	8008f18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2280      	movs	r2, #128	; 0x80
 8008f06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff f8fd 	bl	800810c <dir_sdi>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75fb      	strb	r3, [r7, #23]
 8008f16:	e048      	b.n	8008faa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f18:	463b      	mov	r3, r7
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff fe1b 	bl	8008b58 <create_name>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d139      	bne.n	8008fa0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff fc5a 	bl	80087e6 <dir_find>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00a      	beq.n	8008f5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d12c      	bne.n	8008fa4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008f4a:	7afb      	ldrb	r3, [r7, #11]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d127      	bne.n	8008fa4 <follow_path+0xdc>
 8008f54:	2305      	movs	r3, #5
 8008f56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008f58:	e024      	b.n	8008fa4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f5a:	7afb      	ldrb	r3, [r7, #11]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d121      	bne.n	8008fa8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	799b      	ldrb	r3, [r3, #6]
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008f70:	2305      	movs	r3, #5
 8008f72:	75fb      	strb	r3, [r7, #23]
 8008f74:	e019      	b.n	8008faa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	8992      	ldrh	r2, [r2, #12]
 8008f84:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f88:	fb00 f202 	mul.w	r2, r0, r2
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	440b      	add	r3, r1
 8008f90:	4619      	mov	r1, r3
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff fa60 	bl	8008458 <ld_clust>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f9e:	e7bb      	b.n	8008f18 <follow_path+0x50>
			if (res != FR_OK) break;
 8008fa0:	bf00      	nop
 8008fa2:	e002      	b.n	8008faa <follow_path+0xe2>
				break;
 8008fa4:	bf00      	nop
 8008fa6:	e000      	b.n	8008faa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008fa8:	bf00      	nop
			}
		}
	}

	return res;
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d031      	beq.n	800902e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	e002      	b.n	8008fd8 <get_ldnumber+0x24>
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b1f      	cmp	r3, #31
 8008fde:	d903      	bls.n	8008fe8 <get_ldnumber+0x34>
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b3a      	cmp	r3, #58	; 0x3a
 8008fe6:	d1f4      	bne.n	8008fd2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b3a      	cmp	r3, #58	; 0x3a
 8008fee:	d11c      	bne.n	800902a <get_ldnumber+0x76>
			tp = *path;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	60fa      	str	r2, [r7, #12]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	3b30      	subs	r3, #48	; 0x30
 8009000:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b09      	cmp	r3, #9
 8009006:	d80e      	bhi.n	8009026 <get_ldnumber+0x72>
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	429a      	cmp	r2, r3
 800900e:	d10a      	bne.n	8009026 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d107      	bne.n	8009026 <get_ldnumber+0x72>
					vol = (int)i;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	3301      	adds	r3, #1
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	e002      	b.n	8009030 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800902a:	2300      	movs	r3, #0
 800902c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800902e:	693b      	ldr	r3, [r7, #16]
}
 8009030:	4618      	mov	r0, r3
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	70da      	strb	r2, [r3, #3]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f04f 32ff 	mov.w	r2, #4294967295
 8009052:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7fe fc76 	bl	8007948 <move_window>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <check_fs+0x2a>
 8009062:	2304      	movs	r3, #4
 8009064:	e038      	b.n	80090d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3338      	adds	r3, #56	; 0x38
 800906a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe f9ba 	bl	80073e8 <ld_word>
 8009074:	4603      	mov	r3, r0
 8009076:	461a      	mov	r2, r3
 8009078:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800907c:	429a      	cmp	r2, r3
 800907e:	d001      	beq.n	8009084 <check_fs+0x48>
 8009080:	2303      	movs	r3, #3
 8009082:	e029      	b.n	80090d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800908a:	2be9      	cmp	r3, #233	; 0xe9
 800908c:	d009      	beq.n	80090a2 <check_fs+0x66>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009094:	2beb      	cmp	r3, #235	; 0xeb
 8009096:	d11e      	bne.n	80090d6 <check_fs+0x9a>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800909e:	2b90      	cmp	r3, #144	; 0x90
 80090a0:	d119      	bne.n	80090d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	3338      	adds	r3, #56	; 0x38
 80090a6:	3336      	adds	r3, #54	; 0x36
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fe f9b5 	bl	8007418 <ld_dword>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090b4:	4a0a      	ldr	r2, [pc, #40]	; (80090e0 <check_fs+0xa4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d101      	bne.n	80090be <check_fs+0x82>
 80090ba:	2300      	movs	r3, #0
 80090bc:	e00c      	b.n	80090d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3338      	adds	r3, #56	; 0x38
 80090c2:	3352      	adds	r3, #82	; 0x52
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe f9a7 	bl	8007418 <ld_dword>
 80090ca:	4603      	mov	r3, r0
 80090cc:	4a05      	ldr	r2, [pc, #20]	; (80090e4 <check_fs+0xa8>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d101      	bne.n	80090d6 <check_fs+0x9a>
 80090d2:	2300      	movs	r3, #0
 80090d4:	e000      	b.n	80090d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80090d6:	2302      	movs	r3, #2
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	00544146 	.word	0x00544146
 80090e4:	33544146 	.word	0x33544146

080090e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b096      	sub	sp, #88	; 0x58
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2200      	movs	r2, #0
 80090fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7ff ff59 	bl	8008fb4 <get_ldnumber>
 8009102:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009106:	2b00      	cmp	r3, #0
 8009108:	da01      	bge.n	800910e <find_volume+0x26>
 800910a:	230b      	movs	r3, #11
 800910c:	e265      	b.n	80095da <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800910e:	4a9f      	ldr	r2, [pc, #636]	; (800938c <find_volume+0x2a4>)
 8009110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009116:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <find_volume+0x3a>
 800911e:	230c      	movs	r3, #12
 8009120:	e25b      	b.n	80095da <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009126:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	f023 0301 	bic.w	r3, r3, #1
 800912e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d01a      	beq.n	800916e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe f8b5 	bl	80072ac <disk_status>
 8009142:	4603      	mov	r3, r0
 8009144:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10c      	bne.n	800916e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d007      	beq.n	800916a <find_volume+0x82>
 800915a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800915e:	f003 0304 	and.w	r3, r3, #4
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009166:	230a      	movs	r3, #10
 8009168:	e237      	b.n	80095da <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800916a:	2300      	movs	r3, #0
 800916c:	e235      	b.n	80095da <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	2200      	movs	r2, #0
 8009172:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009176:	b2da      	uxtb	r2, r3
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	4618      	mov	r0, r3
 8009182:	f7fe f8ad 	bl	80072e0 <disk_initialize>
 8009186:	4603      	mov	r3, r0
 8009188:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800918c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009198:	2303      	movs	r3, #3
 800919a:	e21e      	b.n	80095da <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <find_volume+0xca>
 80091a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80091ae:	230a      	movs	r3, #10
 80091b0:	e213      	b.n	80095da <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	7858      	ldrb	r0, [r3, #1]
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	330c      	adds	r3, #12
 80091ba:	461a      	mov	r2, r3
 80091bc:	2102      	movs	r1, #2
 80091be:	f7fe f8f5 	bl	80073ac <disk_ioctl>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <find_volume+0xe4>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e206      	b.n	80095da <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	899b      	ldrh	r3, [r3, #12]
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d4:	d80d      	bhi.n	80091f2 <find_volume+0x10a>
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	899b      	ldrh	r3, [r3, #12]
 80091da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091de:	d308      	bcc.n	80091f2 <find_volume+0x10a>
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	899b      	ldrh	r3, [r3, #12]
 80091e4:	461a      	mov	r2, r3
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	899b      	ldrh	r3, [r3, #12]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	4013      	ands	r3, r2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <find_volume+0x10e>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e1f1      	b.n	80095da <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80091fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091fe:	f7ff ff1d 	bl	800903c <check_fs>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800920c:	2b02      	cmp	r3, #2
 800920e:	d149      	bne.n	80092a4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009210:	2300      	movs	r3, #0
 8009212:	643b      	str	r3, [r7, #64]	; 0x40
 8009214:	e01e      	b.n	8009254 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800921c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009224:	4413      	add	r3, r2
 8009226:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	3304      	adds	r3, #4
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d006      	beq.n	8009240 <find_volume+0x158>
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	3308      	adds	r3, #8
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe f8ee 	bl	8007418 <ld_dword>
 800923c:	4602      	mov	r2, r0
 800923e:	e000      	b.n	8009242 <find_volume+0x15a>
 8009240:	2200      	movs	r2, #0
 8009242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	3358      	adds	r3, #88	; 0x58
 8009248:	443b      	add	r3, r7
 800924a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800924e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009250:	3301      	adds	r3, #1
 8009252:	643b      	str	r3, [r7, #64]	; 0x40
 8009254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009256:	2b03      	cmp	r3, #3
 8009258:	d9dd      	bls.n	8009216 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800925a:	2300      	movs	r3, #0
 800925c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800925e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <find_volume+0x182>
 8009264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009266:	3b01      	subs	r3, #1
 8009268:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800926a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	3358      	adds	r3, #88	; 0x58
 8009270:	443b      	add	r3, r7
 8009272:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009276:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <find_volume+0x1a2>
 800927e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009282:	f7ff fedb 	bl	800903c <check_fs>
 8009286:	4603      	mov	r3, r0
 8009288:	e000      	b.n	800928c <find_volume+0x1a4>
 800928a:	2303      	movs	r3, #3
 800928c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009294:	2b01      	cmp	r3, #1
 8009296:	d905      	bls.n	80092a4 <find_volume+0x1bc>
 8009298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929a:	3301      	adds	r3, #1
 800929c:	643b      	str	r3, [r7, #64]	; 0x40
 800929e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d9e2      	bls.n	800926a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80092a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	d101      	bne.n	80092b0 <find_volume+0x1c8>
 80092ac:	2301      	movs	r3, #1
 80092ae:	e194      	b.n	80095da <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d901      	bls.n	80092bc <find_volume+0x1d4>
 80092b8:	230d      	movs	r3, #13
 80092ba:	e18e      	b.n	80095da <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	3338      	adds	r3, #56	; 0x38
 80092c0:	330b      	adds	r3, #11
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe f890 	bl	80073e8 <ld_word>
 80092c8:	4603      	mov	r3, r0
 80092ca:	461a      	mov	r2, r3
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	899b      	ldrh	r3, [r3, #12]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d001      	beq.n	80092d8 <find_volume+0x1f0>
 80092d4:	230d      	movs	r3, #13
 80092d6:	e180      	b.n	80095da <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	3338      	adds	r3, #56	; 0x38
 80092dc:	3316      	adds	r3, #22
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe f882 	bl	80073e8 <ld_word>
 80092e4:	4603      	mov	r3, r0
 80092e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80092e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <find_volume+0x214>
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	3338      	adds	r3, #56	; 0x38
 80092f2:	3324      	adds	r3, #36	; 0x24
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe f88f 	bl	8007418 <ld_dword>
 80092fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009300:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	789b      	ldrb	r3, [r3, #2]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d005      	beq.n	8009320 <find_volume+0x238>
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	789b      	ldrb	r3, [r3, #2]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d001      	beq.n	8009320 <find_volume+0x238>
 800931c:	230d      	movs	r3, #13
 800931e:	e15c      	b.n	80095da <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	789b      	ldrb	r3, [r3, #2]
 8009324:	461a      	mov	r2, r3
 8009326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009328:	fb02 f303 	mul.w	r3, r2, r3
 800932c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009334:	b29a      	uxth	r2, r3
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	895b      	ldrh	r3, [r3, #10]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d008      	beq.n	8009354 <find_volume+0x26c>
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	895b      	ldrh	r3, [r3, #10]
 8009346:	461a      	mov	r2, r3
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	895b      	ldrh	r3, [r3, #10]
 800934c:	3b01      	subs	r3, #1
 800934e:	4013      	ands	r3, r2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <find_volume+0x270>
 8009354:	230d      	movs	r3, #13
 8009356:	e140      	b.n	80095da <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	3338      	adds	r3, #56	; 0x38
 800935c:	3311      	adds	r3, #17
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe f842 	bl	80073e8 <ld_word>
 8009364:	4603      	mov	r3, r0
 8009366:	461a      	mov	r2, r3
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	891b      	ldrh	r3, [r3, #8]
 8009370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009372:	8992      	ldrh	r2, [r2, #12]
 8009374:	0952      	lsrs	r2, r2, #5
 8009376:	b292      	uxth	r2, r2
 8009378:	fbb3 f1f2 	udiv	r1, r3, r2
 800937c:	fb01 f202 	mul.w	r2, r1, r2
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <find_volume+0x2a8>
 8009388:	230d      	movs	r3, #13
 800938a:	e126      	b.n	80095da <find_volume+0x4f2>
 800938c:	20002874 	.word	0x20002874

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	3338      	adds	r3, #56	; 0x38
 8009394:	3313      	adds	r3, #19
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe f826 	bl	80073e8 <ld_word>
 800939c:	4603      	mov	r3, r0
 800939e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80093a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d106      	bne.n	80093b4 <find_volume+0x2cc>
 80093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a8:	3338      	adds	r3, #56	; 0x38
 80093aa:	3320      	adds	r3, #32
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe f833 	bl	8007418 <ld_dword>
 80093b2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	3338      	adds	r3, #56	; 0x38
 80093b8:	330e      	adds	r3, #14
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe f814 	bl	80073e8 <ld_word>
 80093c0:	4603      	mov	r3, r0
 80093c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80093c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <find_volume+0x2e6>
 80093ca:	230d      	movs	r3, #13
 80093cc:	e105      	b.n	80095da <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80093ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d2:	4413      	add	r3, r2
 80093d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093d6:	8911      	ldrh	r1, [r2, #8]
 80093d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093da:	8992      	ldrh	r2, [r2, #12]
 80093dc:	0952      	lsrs	r2, r2, #5
 80093de:	b292      	uxth	r2, r2
 80093e0:	fbb1 f2f2 	udiv	r2, r1, r2
 80093e4:	b292      	uxth	r2, r2
 80093e6:	4413      	add	r3, r2
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80093ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d201      	bcs.n	80093f6 <find_volume+0x30e>
 80093f2:	230d      	movs	r3, #13
 80093f4:	e0f1      	b.n	80095da <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80093f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093fe:	8952      	ldrh	r2, [r2, #10]
 8009400:	fbb3 f3f2 	udiv	r3, r3, r2
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <find_volume+0x328>
 800940c:	230d      	movs	r3, #13
 800940e:	e0e4      	b.n	80095da <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009410:	2303      	movs	r3, #3
 8009412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800941c:	4293      	cmp	r3, r2
 800941e:	d802      	bhi.n	8009426 <find_volume+0x33e>
 8009420:	2302      	movs	r3, #2
 8009422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	f640 72f5 	movw	r2, #4085	; 0xff5
 800942c:	4293      	cmp	r3, r2
 800942e:	d802      	bhi.n	8009436 <find_volume+0x34e>
 8009430:	2301      	movs	r3, #1
 8009432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	1c9a      	adds	r2, r3, #2
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009442:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009444:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009448:	441a      	add	r2, r3
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800944e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	441a      	add	r2, r3
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800945c:	2b03      	cmp	r3, #3
 800945e:	d11e      	bne.n	800949e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	3338      	adds	r3, #56	; 0x38
 8009464:	332a      	adds	r3, #42	; 0x2a
 8009466:	4618      	mov	r0, r3
 8009468:	f7fd ffbe 	bl	80073e8 <ld_word>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <find_volume+0x38e>
 8009472:	230d      	movs	r3, #13
 8009474:	e0b1      	b.n	80095da <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	891b      	ldrh	r3, [r3, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <find_volume+0x39a>
 800947e:	230d      	movs	r3, #13
 8009480:	e0ab      	b.n	80095da <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	3338      	adds	r3, #56	; 0x38
 8009486:	332c      	adds	r3, #44	; 0x2c
 8009488:	4618      	mov	r0, r3
 800948a:	f7fd ffc5 	bl	8007418 <ld_dword>
 800948e:	4602      	mov	r2, r0
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	647b      	str	r3, [r7, #68]	; 0x44
 800949c:	e01f      	b.n	80094de <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	891b      	ldrh	r3, [r3, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <find_volume+0x3c2>
 80094a6:	230d      	movs	r3, #13
 80094a8:	e097      	b.n	80095da <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b0:	441a      	add	r2, r3
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d103      	bne.n	80094c6 <find_volume+0x3de>
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	e00a      	b.n	80094dc <find_volume+0x3f4>
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	69da      	ldr	r2, [r3, #28]
 80094ca:	4613      	mov	r3, r2
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	4413      	add	r3, r2
 80094d0:	085a      	lsrs	r2, r3, #1
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80094dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	6a1a      	ldr	r2, [r3, #32]
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	899b      	ldrh	r3, [r3, #12]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ea:	440b      	add	r3, r1
 80094ec:	3b01      	subs	r3, #1
 80094ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094f0:	8989      	ldrh	r1, [r1, #12]
 80094f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d201      	bcs.n	80094fe <find_volume+0x416>
 80094fa:	230d      	movs	r3, #13
 80094fc:	e06d      	b.n	80095da <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	f04f 32ff 	mov.w	r2, #4294967295
 8009504:	619a      	str	r2, [r3, #24]
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009510:	2280      	movs	r2, #128	; 0x80
 8009512:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009518:	2b03      	cmp	r3, #3
 800951a:	d149      	bne.n	80095b0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	3338      	adds	r3, #56	; 0x38
 8009520:	3330      	adds	r3, #48	; 0x30
 8009522:	4618      	mov	r0, r3
 8009524:	f7fd ff60 	bl	80073e8 <ld_word>
 8009528:	4603      	mov	r3, r0
 800952a:	2b01      	cmp	r3, #1
 800952c:	d140      	bne.n	80095b0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800952e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009530:	3301      	adds	r3, #1
 8009532:	4619      	mov	r1, r3
 8009534:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009536:	f7fe fa07 	bl	8007948 <move_window>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d137      	bne.n	80095b0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	2200      	movs	r2, #0
 8009544:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	3338      	adds	r3, #56	; 0x38
 800954a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800954e:	4618      	mov	r0, r3
 8009550:	f7fd ff4a 	bl	80073e8 <ld_word>
 8009554:	4603      	mov	r3, r0
 8009556:	461a      	mov	r2, r3
 8009558:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800955c:	429a      	cmp	r2, r3
 800955e:	d127      	bne.n	80095b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	3338      	adds	r3, #56	; 0x38
 8009564:	4618      	mov	r0, r3
 8009566:	f7fd ff57 	bl	8007418 <ld_dword>
 800956a:	4603      	mov	r3, r0
 800956c:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <find_volume+0x4fc>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d11e      	bne.n	80095b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	3338      	adds	r3, #56	; 0x38
 8009576:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800957a:	4618      	mov	r0, r3
 800957c:	f7fd ff4c 	bl	8007418 <ld_dword>
 8009580:	4603      	mov	r3, r0
 8009582:	4a19      	ldr	r2, [pc, #100]	; (80095e8 <find_volume+0x500>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d113      	bne.n	80095b0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	3338      	adds	r3, #56	; 0x38
 800958c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009590:	4618      	mov	r0, r3
 8009592:	f7fd ff41 	bl	8007418 <ld_dword>
 8009596:	4602      	mov	r2, r0
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	3338      	adds	r3, #56	; 0x38
 80095a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fd ff37 	bl	8007418 <ld_dword>
 80095aa:	4602      	mov	r2, r0
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80095b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80095b8:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <find_volume+0x504>)
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	3301      	adds	r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <find_volume+0x504>)
 80095c2:	801a      	strh	r2, [r3, #0]
 80095c4:	4b09      	ldr	r3, [pc, #36]	; (80095ec <find_volume+0x504>)
 80095c6:	881a      	ldrh	r2, [r3, #0]
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	4a08      	ldr	r2, [pc, #32]	; (80095f0 <find_volume+0x508>)
 80095d0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80095d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095d4:	f7fe f950 	bl	8007878 <clear_lock>
#endif
	return FR_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3758      	adds	r7, #88	; 0x58
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	41615252 	.word	0x41615252
 80095e8:	61417272 	.word	0x61417272
 80095ec:	20002878 	.word	0x20002878
 80095f0:	2000289c 	.word	0x2000289c

080095f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80095fe:	2309      	movs	r3, #9
 8009600:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01c      	beq.n	8009642 <validate+0x4e>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d018      	beq.n	8009642 <validate+0x4e>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d013      	beq.n	8009642 <validate+0x4e>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	889a      	ldrh	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	88db      	ldrh	r3, [r3, #6]
 8009624:	429a      	cmp	r2, r3
 8009626:	d10c      	bne.n	8009642 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	4618      	mov	r0, r3
 8009630:	f7fd fe3c 	bl	80072ac <disk_status>
 8009634:	4603      	mov	r3, r0
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <validate+0x4e>
			res = FR_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <validate+0x5a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	e000      	b.n	8009650 <validate+0x5c>
 800964e:	2300      	movs	r3, #0
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	6013      	str	r3, [r2, #0]
	return res;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009672:	f107 0310 	add.w	r3, r7, #16
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff fc9c 	bl	8008fb4 <get_ldnumber>
 800967c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da01      	bge.n	8009688 <f_mount+0x28>
 8009684:	230b      	movs	r3, #11
 8009686:	e02b      	b.n	80096e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009688:	4a17      	ldr	r2, [pc, #92]	; (80096e8 <f_mount+0x88>)
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009690:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d005      	beq.n	80096a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009698:	69b8      	ldr	r0, [r7, #24]
 800969a:	f7fe f8ed 	bl	8007878 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	490d      	ldr	r1, [pc, #52]	; (80096e8 <f_mount+0x88>)
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <f_mount+0x66>
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d001      	beq.n	80096ca <f_mount+0x6a>
 80096c6:	2300      	movs	r3, #0
 80096c8:	e00a      	b.n	80096e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80096ca:	f107 010c 	add.w	r1, r7, #12
 80096ce:	f107 0308 	add.w	r3, r7, #8
 80096d2:	2200      	movs	r2, #0
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff fd07 	bl	80090e8 <find_volume>
 80096da:	4603      	mov	r3, r0
 80096dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80096de:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20002874 	.word	0x20002874

080096ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b09a      	sub	sp, #104	; 0x68
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4613      	mov	r3, r2
 80096f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <f_open+0x18>
 8009700:	2309      	movs	r3, #9
 8009702:	e1bb      	b.n	8009a7c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800970a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800970c:	79fa      	ldrb	r2, [r7, #7]
 800970e:	f107 0114 	add.w	r1, r7, #20
 8009712:	f107 0308 	add.w	r3, r7, #8
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff fce6 	bl	80090e8 <find_volume>
 800971c:	4603      	mov	r3, r0
 800971e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009722:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009726:	2b00      	cmp	r3, #0
 8009728:	f040 819f 	bne.w	8009a6a <f_open+0x37e>
		dj.obj.fs = fs;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	f107 0318 	add.w	r3, r7, #24
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fbc5 	bl	8008ec8 <follow_path>
 800973e:	4603      	mov	r3, r0
 8009740:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009744:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009748:	2b00      	cmp	r3, #0
 800974a:	d11a      	bne.n	8009782 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800974c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009750:	b25b      	sxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	da03      	bge.n	800975e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009756:	2306      	movs	r3, #6
 8009758:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800975c:	e011      	b.n	8009782 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	f023 0301 	bic.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	bf14      	ite	ne
 8009768:	2301      	movne	r3, #1
 800976a:	2300      	moveq	r3, #0
 800976c:	b2db      	uxtb	r3, r3
 800976e:	461a      	mov	r2, r3
 8009770:	f107 0318 	add.w	r3, r7, #24
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7fd ff36 	bl	80075e8 <chk_lock>
 800977c:	4603      	mov	r3, r0
 800977e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	f003 031c 	and.w	r3, r3, #28
 8009788:	2b00      	cmp	r3, #0
 800978a:	d07f      	beq.n	800988c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800978c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009790:	2b00      	cmp	r3, #0
 8009792:	d017      	beq.n	80097c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009798:	2b04      	cmp	r3, #4
 800979a:	d10e      	bne.n	80097ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800979c:	f7fd ff80 	bl	80076a0 <enq_lock>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d006      	beq.n	80097b4 <f_open+0xc8>
 80097a6:	f107 0318 	add.w	r3, r7, #24
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff f8dc 	bl	8008968 <dir_register>
 80097b0:	4603      	mov	r3, r0
 80097b2:	e000      	b.n	80097b6 <f_open+0xca>
 80097b4:	2312      	movs	r3, #18
 80097b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	f043 0308 	orr.w	r3, r3, #8
 80097c0:	71fb      	strb	r3, [r7, #7]
 80097c2:	e010      	b.n	80097e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80097c4:	7fbb      	ldrb	r3, [r7, #30]
 80097c6:	f003 0311 	and.w	r3, r3, #17
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <f_open+0xea>
					res = FR_DENIED;
 80097ce:	2307      	movs	r3, #7
 80097d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80097d4:	e007      	b.n	80097e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <f_open+0xfa>
 80097e0:	2308      	movs	r3, #8
 80097e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80097e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d168      	bne.n	80098c0 <f_open+0x1d4>
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	f003 0308 	and.w	r3, r3, #8
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d063      	beq.n	80098c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80097f8:	f7fd fcf6 	bl	80071e8 <get_fattime>
 80097fc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	330e      	adds	r3, #14
 8009802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009804:	4618      	mov	r0, r3
 8009806:	f7fd fe45 	bl	8007494 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	3316      	adds	r3, #22
 800980e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009810:	4618      	mov	r0, r3
 8009812:	f7fd fe3f 	bl	8007494 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	330b      	adds	r3, #11
 800981a:	2220      	movs	r2, #32
 800981c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe fe17 	bl	8008458 <ld_clust>
 800982a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009830:	2200      	movs	r2, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f7fe fe2f 	bl	8008496 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	331c      	adds	r3, #28
 800983c:	2100      	movs	r1, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f7fd fe28 	bl	8007494 <st_dword>
					fs->wflag = 1;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2201      	movs	r2, #1
 8009848:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800984a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800984c:	2b00      	cmp	r3, #0
 800984e:	d037      	beq.n	80098c0 <f_open+0x1d4>
						dw = fs->winsect;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009854:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009856:	f107 0318 	add.w	r3, r7, #24
 800985a:	2200      	movs	r2, #0
 800985c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fb1f 	bl	8007ea2 <remove_chain>
 8009864:	4603      	mov	r3, r0
 8009866:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800986a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800986e:	2b00      	cmp	r3, #0
 8009870:	d126      	bne.n	80098c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe f866 	bl	8007948 <move_window>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009886:	3a01      	subs	r2, #1
 8009888:	615a      	str	r2, [r3, #20]
 800988a:	e019      	b.n	80098c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800988c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009890:	2b00      	cmp	r3, #0
 8009892:	d115      	bne.n	80098c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009894:	7fbb      	ldrb	r3, [r7, #30]
 8009896:	f003 0310 	and.w	r3, r3, #16
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800989e:	2304      	movs	r3, #4
 80098a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80098a4:	e00c      	b.n	80098c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d007      	beq.n	80098c0 <f_open+0x1d4>
 80098b0:	7fbb      	ldrb	r3, [r7, #30]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <f_open+0x1d4>
						res = FR_DENIED;
 80098ba:	2307      	movs	r3, #7
 80098bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80098c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d128      	bne.n	800991a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80098e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80098e8:	79fb      	ldrb	r3, [r7, #7]
 80098ea:	f023 0301 	bic.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2301      	movne	r3, #1
 80098f4:	2300      	moveq	r3, #0
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	461a      	mov	r2, r3
 80098fa:	f107 0318 	add.w	r3, r7, #24
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f7fd feef 	bl	80076e4 <inc_lock>
 8009906:	4602      	mov	r2, r0
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d102      	bne.n	800991a <f_open+0x22e>
 8009914:	2302      	movs	r3, #2
 8009916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800991a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800991e:	2b00      	cmp	r3, #0
 8009920:	f040 80a3 	bne.w	8009a6a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fd94 	bl	8008458 <ld_clust>
 8009930:	4602      	mov	r2, r0
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	331c      	adds	r3, #28
 800993a:	4618      	mov	r0, r3
 800993c:	f7fd fd6c 	bl	8007418 <ld_dword>
 8009940:	4602      	mov	r2, r0
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	88da      	ldrh	r2, [r3, #6]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	79fa      	ldrb	r2, [r7, #7]
 800995e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3330      	adds	r3, #48	; 0x30
 8009976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f7fd fdd6 	bl	800752e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	f003 0320 	and.w	r3, r3, #32
 8009988:	2b00      	cmp	r3, #0
 800998a:	d06e      	beq.n	8009a6a <f_open+0x37e>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d06a      	beq.n	8009a6a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	895b      	ldrh	r3, [r3, #10]
 80099a0:	461a      	mov	r2, r3
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	899b      	ldrh	r3, [r3, #12]
 80099a6:	fb02 f303 	mul.w	r3, r2, r3
 80099aa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099b8:	e016      	b.n	80099e8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe f87f 	bl	8007ac2 <get_fat>
 80099c4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80099c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d802      	bhi.n	80099d2 <f_open+0x2e6>
 80099cc:	2302      	movs	r3, #2
 80099ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80099d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d8:	d102      	bne.n	80099e0 <f_open+0x2f4>
 80099da:	2301      	movs	r3, #1
 80099dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <f_open+0x30c>
 80099f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d8e0      	bhi.n	80099ba <f_open+0x2ce>
				}
				fp->clust = clst;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80099fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d131      	bne.n	8009a6a <f_open+0x37e>
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	899b      	ldrh	r3, [r3, #12]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a12:	fb01 f202 	mul.w	r2, r1, r2
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d026      	beq.n	8009a6a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe f82f 	bl	8007a84 <clust2sect>
 8009a26:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d103      	bne.n	8009a36 <f_open+0x34a>
						res = FR_INT_ERR;
 8009a2e:	2302      	movs	r3, #2
 8009a30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a34:	e019      	b.n	8009a6a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	899b      	ldrh	r3, [r3, #12]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a44:	441a      	add	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	7858      	ldrb	r0, [r3, #1]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a1a      	ldr	r2, [r3, #32]
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f7fd fc67 	bl	800732c <disk_read>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <f_open+0x37e>
 8009a64:	2301      	movs	r3, #1
 8009a66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009a6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <f_open+0x38c>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009a78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3768      	adds	r7, #104	; 0x68
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08c      	sub	sp, #48	; 0x30
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f107 0210 	add.w	r2, r7, #16
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7ff fda5 	bl	80095f4 <validate>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d107      	bne.n	8009ac8 <f_write+0x44>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	7d5b      	ldrb	r3, [r3, #21]
 8009abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <f_write+0x4a>
 8009ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009acc:	e16a      	b.n	8009da4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	7d1b      	ldrb	r3, [r3, #20]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <f_write+0x5a>
 8009ada:	2307      	movs	r3, #7
 8009adc:	e162      	b.n	8009da4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	699a      	ldr	r2, [r3, #24]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	441a      	add	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	f080 814c 	bcs.w	8009d88 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	43db      	mvns	r3, r3
 8009af6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009af8:	e146      	b.n	8009d88 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	8992      	ldrh	r2, [r2, #12]
 8009b02:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b06:	fb01 f202 	mul.w	r2, r1, r2
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f040 80f1 	bne.w	8009cf4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	8992      	ldrh	r2, [r2, #12]
 8009b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	8952      	ldrh	r2, [r2, #10]
 8009b22:	3a01      	subs	r2, #1
 8009b24:	4013      	ands	r3, r2
 8009b26:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d143      	bne.n	8009bb6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10c      	bne.n	8009b50 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d11a      	bne.n	8009b78 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe fa10 	bl	8007f6c <create_chain>
 8009b4c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009b4e:	e013      	b.n	8009b78 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d007      	beq.n	8009b68 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f7fe fa9c 	bl	800809c <clmt_clust>
 8009b64:	62b8      	str	r0, [r7, #40]	; 0x28
 8009b66:	e007      	b.n	8009b78 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4610      	mov	r0, r2
 8009b72:	f7fe f9fb 	bl	8007f6c <create_chain>
 8009b76:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 8109 	beq.w	8009d92 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d104      	bne.n	8009b90 <f_write+0x10c>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	755a      	strb	r2, [r3, #21]
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e109      	b.n	8009da4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d104      	bne.n	8009ba2 <f_write+0x11e>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	755a      	strb	r2, [r3, #21]
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e100      	b.n	8009da4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ba6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <f_write+0x132>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	7d1b      	ldrb	r3, [r3, #20]
 8009bba:	b25b      	sxtb	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	da18      	bge.n	8009bf2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	7858      	ldrb	r0, [r3, #1]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6a1a      	ldr	r2, [r3, #32]
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f7fd fbcc 	bl	800736c <disk_write>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <f_write+0x160>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	755a      	strb	r2, [r3, #21]
 8009be0:	2301      	movs	r3, #1
 8009be2:	e0df      	b.n	8009da4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	7d1b      	ldrb	r3, [r3, #20]
 8009be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f7fd ff42 	bl	8007a84 <clust2sect>
 8009c00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d104      	bne.n	8009c12 <f_write+0x18e>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	755a      	strb	r2, [r3, #21]
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e0c8      	b.n	8009da4 <f_write+0x320>
			sect += csect;
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	4413      	add	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	899b      	ldrh	r3, [r3, #12]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c26:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d043      	beq.n	8009cb6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009c2e:	69ba      	ldr	r2, [r7, #24]
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	4413      	add	r3, r2
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	8952      	ldrh	r2, [r2, #10]
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d905      	bls.n	8009c48 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	895b      	ldrh	r3, [r3, #10]
 8009c40:	461a      	mov	r2, r3
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	7858      	ldrb	r0, [r3, #1]
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	69f9      	ldr	r1, [r7, #28]
 8009c52:	f7fd fb8b 	bl	800736c <disk_write>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d004      	beq.n	8009c66 <f_write+0x1e2>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	755a      	strb	r2, [r3, #21]
 8009c62:	2301      	movs	r3, #1
 8009c64:	e09e      	b.n	8009da4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a1a      	ldr	r2, [r3, #32]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	6a3a      	ldr	r2, [r7, #32]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d918      	bls.n	8009ca6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6a1a      	ldr	r2, [r3, #32]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	8992      	ldrh	r2, [r2, #12]
 8009c86:	fb02 f303 	mul.w	r3, r2, r3
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	18d1      	adds	r1, r2, r3
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	899b      	ldrh	r3, [r3, #12]
 8009c92:	461a      	mov	r2, r3
 8009c94:	f7fd fc2a 	bl	80074ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	7d1b      	ldrb	r3, [r3, #20]
 8009c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	899b      	ldrh	r3, [r3, #12]
 8009caa:	461a      	mov	r2, r3
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	fb02 f303 	mul.w	r3, r2, r3
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009cb4:	e04b      	b.n	8009d4e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d016      	beq.n	8009cee <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	699a      	ldr	r2, [r3, #24]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d210      	bcs.n	8009cee <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	7858      	ldrb	r0, [r3, #1]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	f7fd fb27 	bl	800732c <disk_read>
 8009cde:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	755a      	strb	r2, [r3, #21]
 8009cea:	2301      	movs	r3, #1
 8009cec:	e05a      	b.n	8009da4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	899b      	ldrh	r3, [r3, #12]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	8992      	ldrh	r2, [r2, #12]
 8009d02:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d06:	fb01 f202 	mul.w	r2, r1, r2
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	1ac3      	subs	r3, r0, r3
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d901      	bls.n	8009d1c <f_write+0x298>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	8992      	ldrh	r2, [r2, #12]
 8009d2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d2e:	fb00 f202 	mul.w	r2, r0, r2
 8009d32:	1a9b      	subs	r3, r3, r2
 8009d34:	440b      	add	r3, r1
 8009d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d38:	69f9      	ldr	r1, [r7, #28]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fd fbd6 	bl	80074ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	7d1b      	ldrb	r3, [r3, #20]
 8009d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009d4e:	69fa      	ldr	r2, [r7, #28]
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	4413      	add	r3, r2
 8009d54:	61fb      	str	r3, [r7, #28]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	441a      	add	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	619a      	str	r2, [r3, #24]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	bf38      	it	cc
 8009d6e:	461a      	movcc	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	60da      	str	r2, [r3, #12]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	441a      	add	r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f47f aeb5 	bne.w	8009afa <f_write+0x76>
 8009d90:	e000      	b.n	8009d94 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d92:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	7d1b      	ldrb	r3, [r3, #20]
 8009d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3730      	adds	r7, #48	; 0x30
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f107 0208 	add.w	r2, r7, #8
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff fc19 	bl	80095f4 <validate>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d168      	bne.n	8009e9e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7d1b      	ldrb	r3, [r3, #20]
 8009dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d062      	beq.n	8009e9e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	7d1b      	ldrb	r3, [r3, #20]
 8009ddc:	b25b      	sxtb	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da15      	bge.n	8009e0e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	7858      	ldrb	r0, [r3, #1]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a1a      	ldr	r2, [r3, #32]
 8009df0:	2301      	movs	r3, #1
 8009df2:	f7fd fabb 	bl	800736c <disk_write>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <f_sync+0x54>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e04f      	b.n	8009ea0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	7d1b      	ldrb	r3, [r3, #20]
 8009e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009e0e:	f7fd f9eb 	bl	80071e8 <get_fattime>
 8009e12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f7fd fd93 	bl	8007948 <move_window>
 8009e22:	4603      	mov	r3, r0
 8009e24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d138      	bne.n	8009e9e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	330b      	adds	r3, #11
 8009e36:	781a      	ldrb	r2, [r3, #0]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	330b      	adds	r3, #11
 8009e3c:	f042 0220 	orr.w	r2, r2, #32
 8009e40:	b2d2      	uxtb	r2, r2
 8009e42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6818      	ldr	r0, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	68f9      	ldr	r1, [r7, #12]
 8009e50:	f7fe fb21 	bl	8008496 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f103 021c 	add.w	r2, r3, #28
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4610      	mov	r0, r2
 8009e62:	f7fd fb17 	bl	8007494 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3316      	adds	r3, #22
 8009e6a:	6939      	ldr	r1, [r7, #16]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fd fb11 	bl	8007494 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3312      	adds	r3, #18
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fd faf0 	bl	800745e <st_word>
					fs->wflag = 1;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2201      	movs	r2, #1
 8009e82:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fd fd8c 	bl	80079a4 <sync_fs>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7ff ff7b 	bl	8009dac <f_sync>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d118      	bne.n	8009ef2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f107 0208 	add.w	r2, r7, #8
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7ff fb93 	bl	80095f4 <validate>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10c      	bne.n	8009ef2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fd fc8f 	bl	8007800 <dec_lock>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	2b0a      	cmp	r3, #10
 8009f0c:	d103      	bne.n	8009f16 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009f0e:	210d      	movs	r1, #13
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff fff3 	bl	8009efc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	db25      	blt.n	8009f6e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	1c5a      	adds	r2, r3, #1
 8009f26:	60fa      	str	r2, [r7, #12]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	78fa      	ldrb	r2, [r7, #3]
 8009f2e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b3c      	cmp	r3, #60	; 0x3c
 8009f34:	dd12      	ble.n	8009f5c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6818      	ldr	r0, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f103 010c 	add.w	r1, r3, #12
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	f7ff fd9d 	bl	8009a84 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d101      	bne.n	8009f56 <putc_bfd+0x5a>
 8009f52:	2300      	movs	r3, #0
 8009f54:	e001      	b.n	8009f5a <putc_bfd+0x5e>
 8009f56:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	609a      	str	r2, [r3, #8]
 8009f6c:	e000      	b.n	8009f70 <putc_bfd+0x74>
	if (i < 0) return;
 8009f6e:	bf00      	nop
}
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	db16      	blt.n	8009fb4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f103 010c 	add.w	r1, r3, #12
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	461a      	mov	r2, r3
 8009f96:	f107 030c 	add.w	r3, r7, #12
 8009f9a:	f7ff fd73 	bl	8009a84 <f_write>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d107      	bne.n	8009fb4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d102      	bne.n	8009fb4 <putc_flush+0x3e>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	e001      	b.n	8009fb8 <putc_flush+0x42>
	return EOF;
 8009fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	605a      	str	r2, [r3, #4]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	609a      	str	r2, [r3, #8]
}
 8009fde:	bf00      	nop
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b096      	sub	sp, #88	; 0x58
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009ff4:	f107 030c 	add.w	r3, r7, #12
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff ffe0 	bl	8009fc0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a000:	e009      	b.n	800a016 <f_puts+0x2c>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	f107 030c 	add.w	r3, r7, #12
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff ff73 	bl	8009efc <putc_bfd>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1f1      	bne.n	800a002 <f_puts+0x18>
	return putc_flush(&pb);
 800a01e:	f107 030c 	add.w	r3, r7, #12
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff ffa7 	bl	8009f76 <putc_flush>
 800a028:	4603      	mov	r3, r0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3758      	adds	r7, #88	; 0x58
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	4613      	mov	r3, r2
 800a040:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a042:	2301      	movs	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a04a:	4b1f      	ldr	r3, [pc, #124]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a04c:	7a5b      	ldrb	r3, [r3, #9]
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b00      	cmp	r3, #0
 800a052:	d131      	bne.n	800a0b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a054:	4b1c      	ldr	r3, [pc, #112]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a056:	7a5b      	ldrb	r3, [r3, #9]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	461a      	mov	r2, r3
 800a05c:	4b1a      	ldr	r3, [pc, #104]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a05e:	2100      	movs	r1, #0
 800a060:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a062:	4b19      	ldr	r3, [pc, #100]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a064:	7a5b      	ldrb	r3, [r3, #9]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	4a17      	ldr	r2, [pc, #92]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a072:	4b15      	ldr	r3, [pc, #84]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a074:	7a5b      	ldrb	r3, [r3, #9]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a07c:	4413      	add	r3, r2
 800a07e:	79fa      	ldrb	r2, [r7, #7]
 800a080:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a082:	4b11      	ldr	r3, [pc, #68]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a084:	7a5b      	ldrb	r3, [r3, #9]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	b2d1      	uxtb	r1, r2
 800a08c:	4a0e      	ldr	r2, [pc, #56]	; (800a0c8 <FATFS_LinkDriverEx+0x94>)
 800a08e:	7251      	strb	r1, [r2, #9]
 800a090:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a092:	7dbb      	ldrb	r3, [r7, #22]
 800a094:	3330      	adds	r3, #48	; 0x30
 800a096:	b2da      	uxtb	r2, r3
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	223a      	movs	r2, #58	; 0x3a
 800a0a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	3302      	adds	r3, #2
 800a0a8:	222f      	movs	r2, #47	; 0x2f
 800a0aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	3303      	adds	r3, #3
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20002a9c 	.word	0x20002a9c

0800a0cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff ffaa 	bl	800a034 <FATFS_LinkDriverEx>
 800a0e0:	4603      	mov	r3, r0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a0f8:	88fb      	ldrh	r3, [r7, #6]
 800a0fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a0fc:	d802      	bhi.n	800a104 <ff_convert+0x18>
		c = chr;
 800a0fe:	88fb      	ldrh	r3, [r7, #6]
 800a100:	81fb      	strh	r3, [r7, #14]
 800a102:	e025      	b.n	800a150 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00b      	beq.n	800a122 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a10a:	88fb      	ldrh	r3, [r7, #6]
 800a10c:	2bff      	cmp	r3, #255	; 0xff
 800a10e:	d805      	bhi.n	800a11c <ff_convert+0x30>
 800a110:	88fb      	ldrh	r3, [r7, #6]
 800a112:	3b80      	subs	r3, #128	; 0x80
 800a114:	4a12      	ldr	r2, [pc, #72]	; (800a160 <ff_convert+0x74>)
 800a116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11a:	e000      	b.n	800a11e <ff_convert+0x32>
 800a11c:	2300      	movs	r3, #0
 800a11e:	81fb      	strh	r3, [r7, #14]
 800a120:	e016      	b.n	800a150 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a122:	2300      	movs	r3, #0
 800a124:	81fb      	strh	r3, [r7, #14]
 800a126:	e009      	b.n	800a13c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a128:	89fb      	ldrh	r3, [r7, #14]
 800a12a:	4a0d      	ldr	r2, [pc, #52]	; (800a160 <ff_convert+0x74>)
 800a12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a130:	88fa      	ldrh	r2, [r7, #6]
 800a132:	429a      	cmp	r2, r3
 800a134:	d006      	beq.n	800a144 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a136:	89fb      	ldrh	r3, [r7, #14]
 800a138:	3301      	adds	r3, #1
 800a13a:	81fb      	strh	r3, [r7, #14]
 800a13c:	89fb      	ldrh	r3, [r7, #14]
 800a13e:	2b7f      	cmp	r3, #127	; 0x7f
 800a140:	d9f2      	bls.n	800a128 <ff_convert+0x3c>
 800a142:	e000      	b.n	800a146 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a144:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a146:	89fb      	ldrh	r3, [r7, #14]
 800a148:	3380      	adds	r3, #128	; 0x80
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a150:	89fb      	ldrh	r3, [r7, #14]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	0800dd94 	.word	0x0800dd94

0800a164 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a164:	b480      	push	{r7}
 800a166:	b087      	sub	sp, #28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a16e:	88fb      	ldrh	r3, [r7, #6]
 800a170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a174:	d201      	bcs.n	800a17a <ff_wtoupper+0x16>
 800a176:	4b3e      	ldr	r3, [pc, #248]	; (800a270 <ff_wtoupper+0x10c>)
 800a178:	e000      	b.n	800a17c <ff_wtoupper+0x18>
 800a17a:	4b3e      	ldr	r3, [pc, #248]	; (800a274 <ff_wtoupper+0x110>)
 800a17c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	1c9a      	adds	r2, r3, #2
 800a182:	617a      	str	r2, [r7, #20]
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a188:	8a7b      	ldrh	r3, [r7, #18]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d068      	beq.n	800a260 <ff_wtoupper+0xfc>
 800a18e:	88fa      	ldrh	r2, [r7, #6]
 800a190:	8a7b      	ldrh	r3, [r7, #18]
 800a192:	429a      	cmp	r2, r3
 800a194:	d364      	bcc.n	800a260 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	1c9a      	adds	r2, r3, #2
 800a19a:	617a      	str	r2, [r7, #20]
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	823b      	strh	r3, [r7, #16]
 800a1a0:	8a3b      	ldrh	r3, [r7, #16]
 800a1a2:	0a1b      	lsrs	r3, r3, #8
 800a1a4:	81fb      	strh	r3, [r7, #14]
 800a1a6:	8a3b      	ldrh	r3, [r7, #16]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a1ac:	88fa      	ldrh	r2, [r7, #6]
 800a1ae:	8a79      	ldrh	r1, [r7, #18]
 800a1b0:	8a3b      	ldrh	r3, [r7, #16]
 800a1b2:	440b      	add	r3, r1
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	da49      	bge.n	800a24c <ff_wtoupper+0xe8>
			switch (cmd) {
 800a1b8:	89fb      	ldrh	r3, [r7, #14]
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d84f      	bhi.n	800a25e <ff_wtoupper+0xfa>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <ff_wtoupper+0x60>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a1e9 	.word	0x0800a1e9
 800a1c8:	0800a1fb 	.word	0x0800a1fb
 800a1cc:	0800a211 	.word	0x0800a211
 800a1d0:	0800a219 	.word	0x0800a219
 800a1d4:	0800a221 	.word	0x0800a221
 800a1d8:	0800a229 	.word	0x0800a229
 800a1dc:	0800a231 	.word	0x0800a231
 800a1e0:	0800a239 	.word	0x0800a239
 800a1e4:	0800a241 	.word	0x0800a241
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a1e8:	88fa      	ldrh	r2, [r7, #6]
 800a1ea:	8a7b      	ldrh	r3, [r7, #18]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	80fb      	strh	r3, [r7, #6]
 800a1f8:	e027      	b.n	800a24a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a1fa:	88fa      	ldrh	r2, [r7, #6]
 800a1fc:	8a7b      	ldrh	r3, [r7, #18]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	b29b      	uxth	r3, r3
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	b29b      	uxth	r3, r3
 800a208:	88fa      	ldrh	r2, [r7, #6]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	80fb      	strh	r3, [r7, #6]
 800a20e:	e01c      	b.n	800a24a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a210:	88fb      	ldrh	r3, [r7, #6]
 800a212:	3b10      	subs	r3, #16
 800a214:	80fb      	strh	r3, [r7, #6]
 800a216:	e018      	b.n	800a24a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a218:	88fb      	ldrh	r3, [r7, #6]
 800a21a:	3b20      	subs	r3, #32
 800a21c:	80fb      	strh	r3, [r7, #6]
 800a21e:	e014      	b.n	800a24a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a220:	88fb      	ldrh	r3, [r7, #6]
 800a222:	3b30      	subs	r3, #48	; 0x30
 800a224:	80fb      	strh	r3, [r7, #6]
 800a226:	e010      	b.n	800a24a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a228:	88fb      	ldrh	r3, [r7, #6]
 800a22a:	3b1a      	subs	r3, #26
 800a22c:	80fb      	strh	r3, [r7, #6]
 800a22e:	e00c      	b.n	800a24a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	3308      	adds	r3, #8
 800a234:	80fb      	strh	r3, [r7, #6]
 800a236:	e008      	b.n	800a24a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	3b50      	subs	r3, #80	; 0x50
 800a23c:	80fb      	strh	r3, [r7, #6]
 800a23e:	e004      	b.n	800a24a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a240:	88fb      	ldrh	r3, [r7, #6]
 800a242:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a246:	80fb      	strh	r3, [r7, #6]
 800a248:	bf00      	nop
			}
			break;
 800a24a:	e008      	b.n	800a25e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a24c:	89fb      	ldrh	r3, [r7, #14]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d195      	bne.n	800a17e <ff_wtoupper+0x1a>
 800a252:	8a3b      	ldrh	r3, [r7, #16]
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4413      	add	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a25c:	e78f      	b.n	800a17e <ff_wtoupper+0x1a>
			break;
 800a25e:	bf00      	nop
	}

	return chr;
 800a260:	88fb      	ldrh	r3, [r7, #6]
}
 800a262:	4618      	mov	r0, r3
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	0800de94 	.word	0x0800de94
 800a274:	0800e088 	.word	0x0800e088

0800a278 <__errno>:
 800a278:	4b01      	ldr	r3, [pc, #4]	; (800a280 <__errno+0x8>)
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	2000002c 	.word	0x2000002c

0800a284 <__libc_init_array>:
 800a284:	b570      	push	{r4, r5, r6, lr}
 800a286:	4d0d      	ldr	r5, [pc, #52]	; (800a2bc <__libc_init_array+0x38>)
 800a288:	4c0d      	ldr	r4, [pc, #52]	; (800a2c0 <__libc_init_array+0x3c>)
 800a28a:	1b64      	subs	r4, r4, r5
 800a28c:	10a4      	asrs	r4, r4, #2
 800a28e:	2600      	movs	r6, #0
 800a290:	42a6      	cmp	r6, r4
 800a292:	d109      	bne.n	800a2a8 <__libc_init_array+0x24>
 800a294:	4d0b      	ldr	r5, [pc, #44]	; (800a2c4 <__libc_init_array+0x40>)
 800a296:	4c0c      	ldr	r4, [pc, #48]	; (800a2c8 <__libc_init_array+0x44>)
 800a298:	f003 fb62 	bl	800d960 <_init>
 800a29c:	1b64      	subs	r4, r4, r5
 800a29e:	10a4      	asrs	r4, r4, #2
 800a2a0:	2600      	movs	r6, #0
 800a2a2:	42a6      	cmp	r6, r4
 800a2a4:	d105      	bne.n	800a2b2 <__libc_init_array+0x2e>
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ac:	4798      	blx	r3
 800a2ae:	3601      	adds	r6, #1
 800a2b0:	e7ee      	b.n	800a290 <__libc_init_array+0xc>
 800a2b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2b6:	4798      	blx	r3
 800a2b8:	3601      	adds	r6, #1
 800a2ba:	e7f2      	b.n	800a2a2 <__libc_init_array+0x1e>
 800a2bc:	0800e534 	.word	0x0800e534
 800a2c0:	0800e534 	.word	0x0800e534
 800a2c4:	0800e534 	.word	0x0800e534
 800a2c8:	0800e538 	.word	0x0800e538

0800a2cc <memcpy>:
 800a2cc:	440a      	add	r2, r1
 800a2ce:	4291      	cmp	r1, r2
 800a2d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2d4:	d100      	bne.n	800a2d8 <memcpy+0xc>
 800a2d6:	4770      	bx	lr
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2e2:	4291      	cmp	r1, r2
 800a2e4:	d1f9      	bne.n	800a2da <memcpy+0xe>
 800a2e6:	bd10      	pop	{r4, pc}

0800a2e8 <memset>:
 800a2e8:	4402      	add	r2, r0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d100      	bne.n	800a2f2 <memset+0xa>
 800a2f0:	4770      	bx	lr
 800a2f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2f6:	e7f9      	b.n	800a2ec <memset+0x4>

0800a2f8 <__cvt>:
 800a2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	ec55 4b10 	vmov	r4, r5, d0
 800a300:	2d00      	cmp	r5, #0
 800a302:	460e      	mov	r6, r1
 800a304:	4619      	mov	r1, r3
 800a306:	462b      	mov	r3, r5
 800a308:	bfbb      	ittet	lt
 800a30a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a30e:	461d      	movlt	r5, r3
 800a310:	2300      	movge	r3, #0
 800a312:	232d      	movlt	r3, #45	; 0x2d
 800a314:	700b      	strb	r3, [r1, #0]
 800a316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a318:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a31c:	4691      	mov	r9, r2
 800a31e:	f023 0820 	bic.w	r8, r3, #32
 800a322:	bfbc      	itt	lt
 800a324:	4622      	movlt	r2, r4
 800a326:	4614      	movlt	r4, r2
 800a328:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a32c:	d005      	beq.n	800a33a <__cvt+0x42>
 800a32e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a332:	d100      	bne.n	800a336 <__cvt+0x3e>
 800a334:	3601      	adds	r6, #1
 800a336:	2102      	movs	r1, #2
 800a338:	e000      	b.n	800a33c <__cvt+0x44>
 800a33a:	2103      	movs	r1, #3
 800a33c:	ab03      	add	r3, sp, #12
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	ab02      	add	r3, sp, #8
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	ec45 4b10 	vmov	d0, r4, r5
 800a348:	4653      	mov	r3, sl
 800a34a:	4632      	mov	r2, r6
 800a34c:	f000 fe38 	bl	800afc0 <_dtoa_r>
 800a350:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a354:	4607      	mov	r7, r0
 800a356:	d102      	bne.n	800a35e <__cvt+0x66>
 800a358:	f019 0f01 	tst.w	r9, #1
 800a35c:	d022      	beq.n	800a3a4 <__cvt+0xac>
 800a35e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a362:	eb07 0906 	add.w	r9, r7, r6
 800a366:	d110      	bne.n	800a38a <__cvt+0x92>
 800a368:	783b      	ldrb	r3, [r7, #0]
 800a36a:	2b30      	cmp	r3, #48	; 0x30
 800a36c:	d10a      	bne.n	800a384 <__cvt+0x8c>
 800a36e:	2200      	movs	r2, #0
 800a370:	2300      	movs	r3, #0
 800a372:	4620      	mov	r0, r4
 800a374:	4629      	mov	r1, r5
 800a376:	f7f6 fba7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a37a:	b918      	cbnz	r0, 800a384 <__cvt+0x8c>
 800a37c:	f1c6 0601 	rsb	r6, r6, #1
 800a380:	f8ca 6000 	str.w	r6, [sl]
 800a384:	f8da 3000 	ldr.w	r3, [sl]
 800a388:	4499      	add	r9, r3
 800a38a:	2200      	movs	r2, #0
 800a38c:	2300      	movs	r3, #0
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7f6 fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 800a396:	b108      	cbz	r0, 800a39c <__cvt+0xa4>
 800a398:	f8cd 900c 	str.w	r9, [sp, #12]
 800a39c:	2230      	movs	r2, #48	; 0x30
 800a39e:	9b03      	ldr	r3, [sp, #12]
 800a3a0:	454b      	cmp	r3, r9
 800a3a2:	d307      	bcc.n	800a3b4 <__cvt+0xbc>
 800a3a4:	9b03      	ldr	r3, [sp, #12]
 800a3a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3a8:	1bdb      	subs	r3, r3, r7
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	b004      	add	sp, #16
 800a3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b4:	1c59      	adds	r1, r3, #1
 800a3b6:	9103      	str	r1, [sp, #12]
 800a3b8:	701a      	strb	r2, [r3, #0]
 800a3ba:	e7f0      	b.n	800a39e <__cvt+0xa6>

0800a3bc <__exponent>:
 800a3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	bfb8      	it	lt
 800a3c4:	4249      	neglt	r1, r1
 800a3c6:	f803 2b02 	strb.w	r2, [r3], #2
 800a3ca:	bfb4      	ite	lt
 800a3cc:	222d      	movlt	r2, #45	; 0x2d
 800a3ce:	222b      	movge	r2, #43	; 0x2b
 800a3d0:	2909      	cmp	r1, #9
 800a3d2:	7042      	strb	r2, [r0, #1]
 800a3d4:	dd2a      	ble.n	800a42c <__exponent+0x70>
 800a3d6:	f10d 0407 	add.w	r4, sp, #7
 800a3da:	46a4      	mov	ip, r4
 800a3dc:	270a      	movs	r7, #10
 800a3de:	46a6      	mov	lr, r4
 800a3e0:	460a      	mov	r2, r1
 800a3e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a3e6:	fb07 1516 	mls	r5, r7, r6, r1
 800a3ea:	3530      	adds	r5, #48	; 0x30
 800a3ec:	2a63      	cmp	r2, #99	; 0x63
 800a3ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800a3f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	dcf1      	bgt.n	800a3de <__exponent+0x22>
 800a3fa:	3130      	adds	r1, #48	; 0x30
 800a3fc:	f1ae 0502 	sub.w	r5, lr, #2
 800a400:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a404:	1c44      	adds	r4, r0, #1
 800a406:	4629      	mov	r1, r5
 800a408:	4561      	cmp	r1, ip
 800a40a:	d30a      	bcc.n	800a422 <__exponent+0x66>
 800a40c:	f10d 0209 	add.w	r2, sp, #9
 800a410:	eba2 020e 	sub.w	r2, r2, lr
 800a414:	4565      	cmp	r5, ip
 800a416:	bf88      	it	hi
 800a418:	2200      	movhi	r2, #0
 800a41a:	4413      	add	r3, r2
 800a41c:	1a18      	subs	r0, r3, r0
 800a41e:	b003      	add	sp, #12
 800a420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a426:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a42a:	e7ed      	b.n	800a408 <__exponent+0x4c>
 800a42c:	2330      	movs	r3, #48	; 0x30
 800a42e:	3130      	adds	r1, #48	; 0x30
 800a430:	7083      	strb	r3, [r0, #2]
 800a432:	70c1      	strb	r1, [r0, #3]
 800a434:	1d03      	adds	r3, r0, #4
 800a436:	e7f1      	b.n	800a41c <__exponent+0x60>

0800a438 <_printf_float>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	ed2d 8b02 	vpush	{d8}
 800a440:	b08d      	sub	sp, #52	; 0x34
 800a442:	460c      	mov	r4, r1
 800a444:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a448:	4616      	mov	r6, r2
 800a44a:	461f      	mov	r7, r3
 800a44c:	4605      	mov	r5, r0
 800a44e:	f001 fd5d 	bl	800bf0c <_localeconv_r>
 800a452:	f8d0 a000 	ldr.w	sl, [r0]
 800a456:	4650      	mov	r0, sl
 800a458:	f7f5 feba 	bl	80001d0 <strlen>
 800a45c:	2300      	movs	r3, #0
 800a45e:	930a      	str	r3, [sp, #40]	; 0x28
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	9305      	str	r3, [sp, #20]
 800a464:	f8d8 3000 	ldr.w	r3, [r8]
 800a468:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a46c:	3307      	adds	r3, #7
 800a46e:	f023 0307 	bic.w	r3, r3, #7
 800a472:	f103 0208 	add.w	r2, r3, #8
 800a476:	f8c8 2000 	str.w	r2, [r8]
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a482:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a486:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a48a:	9307      	str	r3, [sp, #28]
 800a48c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a490:	ee08 0a10 	vmov	s16, r0
 800a494:	4b9f      	ldr	r3, [pc, #636]	; (800a714 <_printf_float+0x2dc>)
 800a496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a49a:	f04f 32ff 	mov.w	r2, #4294967295
 800a49e:	f7f6 fb45 	bl	8000b2c <__aeabi_dcmpun>
 800a4a2:	bb88      	cbnz	r0, 800a508 <_printf_float+0xd0>
 800a4a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4a8:	4b9a      	ldr	r3, [pc, #616]	; (800a714 <_printf_float+0x2dc>)
 800a4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ae:	f7f6 fb1f 	bl	8000af0 <__aeabi_dcmple>
 800a4b2:	bb48      	cbnz	r0, 800a508 <_printf_float+0xd0>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 fb0e 	bl	8000adc <__aeabi_dcmplt>
 800a4c0:	b110      	cbz	r0, 800a4c8 <_printf_float+0x90>
 800a4c2:	232d      	movs	r3, #45	; 0x2d
 800a4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c8:	4b93      	ldr	r3, [pc, #588]	; (800a718 <_printf_float+0x2e0>)
 800a4ca:	4894      	ldr	r0, [pc, #592]	; (800a71c <_printf_float+0x2e4>)
 800a4cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a4d0:	bf94      	ite	ls
 800a4d2:	4698      	movls	r8, r3
 800a4d4:	4680      	movhi	r8, r0
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	6123      	str	r3, [r4, #16]
 800a4da:	9b05      	ldr	r3, [sp, #20]
 800a4dc:	f023 0204 	bic.w	r2, r3, #4
 800a4e0:	6022      	str	r2, [r4, #0]
 800a4e2:	f04f 0900 	mov.w	r9, #0
 800a4e6:	9700      	str	r7, [sp, #0]
 800a4e8:	4633      	mov	r3, r6
 800a4ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f000 f9d8 	bl	800a8a4 <_printf_common>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	f040 8090 	bne.w	800a61a <_printf_float+0x1e2>
 800a4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fe:	b00d      	add	sp, #52	; 0x34
 800a500:	ecbd 8b02 	vpop	{d8}
 800a504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a508:	4642      	mov	r2, r8
 800a50a:	464b      	mov	r3, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	4649      	mov	r1, r9
 800a510:	f7f6 fb0c 	bl	8000b2c <__aeabi_dcmpun>
 800a514:	b140      	cbz	r0, 800a528 <_printf_float+0xf0>
 800a516:	464b      	mov	r3, r9
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bfbc      	itt	lt
 800a51c:	232d      	movlt	r3, #45	; 0x2d
 800a51e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a522:	487f      	ldr	r0, [pc, #508]	; (800a720 <_printf_float+0x2e8>)
 800a524:	4b7f      	ldr	r3, [pc, #508]	; (800a724 <_printf_float+0x2ec>)
 800a526:	e7d1      	b.n	800a4cc <_printf_float+0x94>
 800a528:	6863      	ldr	r3, [r4, #4]
 800a52a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a52e:	9206      	str	r2, [sp, #24]
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	d13f      	bne.n	800a5b4 <_printf_float+0x17c>
 800a534:	2306      	movs	r3, #6
 800a536:	6063      	str	r3, [r4, #4]
 800a538:	9b05      	ldr	r3, [sp, #20]
 800a53a:	6861      	ldr	r1, [r4, #4]
 800a53c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a540:	2300      	movs	r3, #0
 800a542:	9303      	str	r3, [sp, #12]
 800a544:	ab0a      	add	r3, sp, #40	; 0x28
 800a546:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a54a:	ab09      	add	r3, sp, #36	; 0x24
 800a54c:	ec49 8b10 	vmov	d0, r8, r9
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	6022      	str	r2, [r4, #0]
 800a554:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a558:	4628      	mov	r0, r5
 800a55a:	f7ff fecd 	bl	800a2f8 <__cvt>
 800a55e:	9b06      	ldr	r3, [sp, #24]
 800a560:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a562:	2b47      	cmp	r3, #71	; 0x47
 800a564:	4680      	mov	r8, r0
 800a566:	d108      	bne.n	800a57a <_printf_float+0x142>
 800a568:	1cc8      	adds	r0, r1, #3
 800a56a:	db02      	blt.n	800a572 <_printf_float+0x13a>
 800a56c:	6863      	ldr	r3, [r4, #4]
 800a56e:	4299      	cmp	r1, r3
 800a570:	dd41      	ble.n	800a5f6 <_printf_float+0x1be>
 800a572:	f1ab 0b02 	sub.w	fp, fp, #2
 800a576:	fa5f fb8b 	uxtb.w	fp, fp
 800a57a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a57e:	d820      	bhi.n	800a5c2 <_printf_float+0x18a>
 800a580:	3901      	subs	r1, #1
 800a582:	465a      	mov	r2, fp
 800a584:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a588:	9109      	str	r1, [sp, #36]	; 0x24
 800a58a:	f7ff ff17 	bl	800a3bc <__exponent>
 800a58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a590:	1813      	adds	r3, r2, r0
 800a592:	2a01      	cmp	r2, #1
 800a594:	4681      	mov	r9, r0
 800a596:	6123      	str	r3, [r4, #16]
 800a598:	dc02      	bgt.n	800a5a0 <_printf_float+0x168>
 800a59a:	6822      	ldr	r2, [r4, #0]
 800a59c:	07d2      	lsls	r2, r2, #31
 800a59e:	d501      	bpl.n	800a5a4 <_printf_float+0x16c>
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	6123      	str	r3, [r4, #16]
 800a5a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d09c      	beq.n	800a4e6 <_printf_float+0xae>
 800a5ac:	232d      	movs	r3, #45	; 0x2d
 800a5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5b2:	e798      	b.n	800a4e6 <_printf_float+0xae>
 800a5b4:	9a06      	ldr	r2, [sp, #24]
 800a5b6:	2a47      	cmp	r2, #71	; 0x47
 800a5b8:	d1be      	bne.n	800a538 <_printf_float+0x100>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1bc      	bne.n	800a538 <_printf_float+0x100>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e7b9      	b.n	800a536 <_printf_float+0xfe>
 800a5c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a5c6:	d118      	bne.n	800a5fa <_printf_float+0x1c2>
 800a5c8:	2900      	cmp	r1, #0
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	dd0b      	ble.n	800a5e6 <_printf_float+0x1ae>
 800a5ce:	6121      	str	r1, [r4, #16]
 800a5d0:	b913      	cbnz	r3, 800a5d8 <_printf_float+0x1a0>
 800a5d2:	6822      	ldr	r2, [r4, #0]
 800a5d4:	07d0      	lsls	r0, r2, #31
 800a5d6:	d502      	bpl.n	800a5de <_printf_float+0x1a6>
 800a5d8:	3301      	adds	r3, #1
 800a5da:	440b      	add	r3, r1
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	65a1      	str	r1, [r4, #88]	; 0x58
 800a5e0:	f04f 0900 	mov.w	r9, #0
 800a5e4:	e7de      	b.n	800a5a4 <_printf_float+0x16c>
 800a5e6:	b913      	cbnz	r3, 800a5ee <_printf_float+0x1b6>
 800a5e8:	6822      	ldr	r2, [r4, #0]
 800a5ea:	07d2      	lsls	r2, r2, #31
 800a5ec:	d501      	bpl.n	800a5f2 <_printf_float+0x1ba>
 800a5ee:	3302      	adds	r3, #2
 800a5f0:	e7f4      	b.n	800a5dc <_printf_float+0x1a4>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e7f2      	b.n	800a5dc <_printf_float+0x1a4>
 800a5f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a5fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fc:	4299      	cmp	r1, r3
 800a5fe:	db05      	blt.n	800a60c <_printf_float+0x1d4>
 800a600:	6823      	ldr	r3, [r4, #0]
 800a602:	6121      	str	r1, [r4, #16]
 800a604:	07d8      	lsls	r0, r3, #31
 800a606:	d5ea      	bpl.n	800a5de <_printf_float+0x1a6>
 800a608:	1c4b      	adds	r3, r1, #1
 800a60a:	e7e7      	b.n	800a5dc <_printf_float+0x1a4>
 800a60c:	2900      	cmp	r1, #0
 800a60e:	bfd4      	ite	le
 800a610:	f1c1 0202 	rsble	r2, r1, #2
 800a614:	2201      	movgt	r2, #1
 800a616:	4413      	add	r3, r2
 800a618:	e7e0      	b.n	800a5dc <_printf_float+0x1a4>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	055a      	lsls	r2, r3, #21
 800a61e:	d407      	bmi.n	800a630 <_printf_float+0x1f8>
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	4642      	mov	r2, r8
 800a624:	4631      	mov	r1, r6
 800a626:	4628      	mov	r0, r5
 800a628:	47b8      	blx	r7
 800a62a:	3001      	adds	r0, #1
 800a62c:	d12c      	bne.n	800a688 <_printf_float+0x250>
 800a62e:	e764      	b.n	800a4fa <_printf_float+0xc2>
 800a630:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a634:	f240 80e0 	bls.w	800a7f8 <_printf_float+0x3c0>
 800a638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	f7f6 fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 800a644:	2800      	cmp	r0, #0
 800a646:	d034      	beq.n	800a6b2 <_printf_float+0x27a>
 800a648:	4a37      	ldr	r2, [pc, #220]	; (800a728 <_printf_float+0x2f0>)
 800a64a:	2301      	movs	r3, #1
 800a64c:	4631      	mov	r1, r6
 800a64e:	4628      	mov	r0, r5
 800a650:	47b8      	blx	r7
 800a652:	3001      	adds	r0, #1
 800a654:	f43f af51 	beq.w	800a4fa <_printf_float+0xc2>
 800a658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a65c:	429a      	cmp	r2, r3
 800a65e:	db02      	blt.n	800a666 <_printf_float+0x22e>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	07d8      	lsls	r0, r3, #31
 800a664:	d510      	bpl.n	800a688 <_printf_float+0x250>
 800a666:	ee18 3a10 	vmov	r3, s16
 800a66a:	4652      	mov	r2, sl
 800a66c:	4631      	mov	r1, r6
 800a66e:	4628      	mov	r0, r5
 800a670:	47b8      	blx	r7
 800a672:	3001      	adds	r0, #1
 800a674:	f43f af41 	beq.w	800a4fa <_printf_float+0xc2>
 800a678:	f04f 0800 	mov.w	r8, #0
 800a67c:	f104 091a 	add.w	r9, r4, #26
 800a680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a682:	3b01      	subs	r3, #1
 800a684:	4543      	cmp	r3, r8
 800a686:	dc09      	bgt.n	800a69c <_printf_float+0x264>
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	079b      	lsls	r3, r3, #30
 800a68c:	f100 8105 	bmi.w	800a89a <_printf_float+0x462>
 800a690:	68e0      	ldr	r0, [r4, #12]
 800a692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a694:	4298      	cmp	r0, r3
 800a696:	bfb8      	it	lt
 800a698:	4618      	movlt	r0, r3
 800a69a:	e730      	b.n	800a4fe <_printf_float+0xc6>
 800a69c:	2301      	movs	r3, #1
 800a69e:	464a      	mov	r2, r9
 800a6a0:	4631      	mov	r1, r6
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	47b8      	blx	r7
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	f43f af27 	beq.w	800a4fa <_printf_float+0xc2>
 800a6ac:	f108 0801 	add.w	r8, r8, #1
 800a6b0:	e7e6      	b.n	800a680 <_printf_float+0x248>
 800a6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	dc39      	bgt.n	800a72c <_printf_float+0x2f4>
 800a6b8:	4a1b      	ldr	r2, [pc, #108]	; (800a728 <_printf_float+0x2f0>)
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4628      	mov	r0, r5
 800a6c0:	47b8      	blx	r7
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	f43f af19 	beq.w	800a4fa <_printf_float+0xc2>
 800a6c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	d102      	bne.n	800a6d6 <_printf_float+0x29e>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	07d9      	lsls	r1, r3, #31
 800a6d4:	d5d8      	bpl.n	800a688 <_printf_float+0x250>
 800a6d6:	ee18 3a10 	vmov	r3, s16
 800a6da:	4652      	mov	r2, sl
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4628      	mov	r0, r5
 800a6e0:	47b8      	blx	r7
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	f43f af09 	beq.w	800a4fa <_printf_float+0xc2>
 800a6e8:	f04f 0900 	mov.w	r9, #0
 800a6ec:	f104 0a1a 	add.w	sl, r4, #26
 800a6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f2:	425b      	negs	r3, r3
 800a6f4:	454b      	cmp	r3, r9
 800a6f6:	dc01      	bgt.n	800a6fc <_printf_float+0x2c4>
 800a6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6fa:	e792      	b.n	800a622 <_printf_float+0x1ea>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4652      	mov	r2, sl
 800a700:	4631      	mov	r1, r6
 800a702:	4628      	mov	r0, r5
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	f43f aef7 	beq.w	800a4fa <_printf_float+0xc2>
 800a70c:	f109 0901 	add.w	r9, r9, #1
 800a710:	e7ee      	b.n	800a6f0 <_printf_float+0x2b8>
 800a712:	bf00      	nop
 800a714:	7fefffff 	.word	0x7fefffff
 800a718:	0800e148 	.word	0x0800e148
 800a71c:	0800e14c 	.word	0x0800e14c
 800a720:	0800e154 	.word	0x0800e154
 800a724:	0800e150 	.word	0x0800e150
 800a728:	0800e158 	.word	0x0800e158
 800a72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a72e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a730:	429a      	cmp	r2, r3
 800a732:	bfa8      	it	ge
 800a734:	461a      	movge	r2, r3
 800a736:	2a00      	cmp	r2, #0
 800a738:	4691      	mov	r9, r2
 800a73a:	dc37      	bgt.n	800a7ac <_printf_float+0x374>
 800a73c:	f04f 0b00 	mov.w	fp, #0
 800a740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a744:	f104 021a 	add.w	r2, r4, #26
 800a748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	eba3 0309 	sub.w	r3, r3, r9
 800a750:	455b      	cmp	r3, fp
 800a752:	dc33      	bgt.n	800a7bc <_printf_float+0x384>
 800a754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a758:	429a      	cmp	r2, r3
 800a75a:	db3b      	blt.n	800a7d4 <_printf_float+0x39c>
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	07da      	lsls	r2, r3, #31
 800a760:	d438      	bmi.n	800a7d4 <_printf_float+0x39c>
 800a762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a764:	9a05      	ldr	r2, [sp, #20]
 800a766:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a768:	1a9a      	subs	r2, r3, r2
 800a76a:	eba3 0901 	sub.w	r9, r3, r1
 800a76e:	4591      	cmp	r9, r2
 800a770:	bfa8      	it	ge
 800a772:	4691      	movge	r9, r2
 800a774:	f1b9 0f00 	cmp.w	r9, #0
 800a778:	dc35      	bgt.n	800a7e6 <_printf_float+0x3ae>
 800a77a:	f04f 0800 	mov.w	r8, #0
 800a77e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a782:	f104 0a1a 	add.w	sl, r4, #26
 800a786:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	eba3 0309 	sub.w	r3, r3, r9
 800a790:	4543      	cmp	r3, r8
 800a792:	f77f af79 	ble.w	800a688 <_printf_float+0x250>
 800a796:	2301      	movs	r3, #1
 800a798:	4652      	mov	r2, sl
 800a79a:	4631      	mov	r1, r6
 800a79c:	4628      	mov	r0, r5
 800a79e:	47b8      	blx	r7
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	f43f aeaa 	beq.w	800a4fa <_printf_float+0xc2>
 800a7a6:	f108 0801 	add.w	r8, r8, #1
 800a7aa:	e7ec      	b.n	800a786 <_printf_float+0x34e>
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	47b8      	blx	r7
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	d1c0      	bne.n	800a73c <_printf_float+0x304>
 800a7ba:	e69e      	b.n	800a4fa <_printf_float+0xc2>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	9205      	str	r2, [sp, #20]
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f ae97 	beq.w	800a4fa <_printf_float+0xc2>
 800a7cc:	9a05      	ldr	r2, [sp, #20]
 800a7ce:	f10b 0b01 	add.w	fp, fp, #1
 800a7d2:	e7b9      	b.n	800a748 <_printf_float+0x310>
 800a7d4:	ee18 3a10 	vmov	r3, s16
 800a7d8:	4652      	mov	r2, sl
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b8      	blx	r7
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d1be      	bne.n	800a762 <_printf_float+0x32a>
 800a7e4:	e689      	b.n	800a4fa <_printf_float+0xc2>
 800a7e6:	9a05      	ldr	r2, [sp, #20]
 800a7e8:	464b      	mov	r3, r9
 800a7ea:	4442      	add	r2, r8
 800a7ec:	4631      	mov	r1, r6
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	47b8      	blx	r7
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	d1c1      	bne.n	800a77a <_printf_float+0x342>
 800a7f6:	e680      	b.n	800a4fa <_printf_float+0xc2>
 800a7f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7fa:	2a01      	cmp	r2, #1
 800a7fc:	dc01      	bgt.n	800a802 <_printf_float+0x3ca>
 800a7fe:	07db      	lsls	r3, r3, #31
 800a800:	d538      	bpl.n	800a874 <_printf_float+0x43c>
 800a802:	2301      	movs	r3, #1
 800a804:	4642      	mov	r2, r8
 800a806:	4631      	mov	r1, r6
 800a808:	4628      	mov	r0, r5
 800a80a:	47b8      	blx	r7
 800a80c:	3001      	adds	r0, #1
 800a80e:	f43f ae74 	beq.w	800a4fa <_printf_float+0xc2>
 800a812:	ee18 3a10 	vmov	r3, s16
 800a816:	4652      	mov	r2, sl
 800a818:	4631      	mov	r1, r6
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b8      	blx	r7
 800a81e:	3001      	adds	r0, #1
 800a820:	f43f ae6b 	beq.w	800a4fa <_printf_float+0xc2>
 800a824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a828:	2200      	movs	r2, #0
 800a82a:	2300      	movs	r3, #0
 800a82c:	f7f6 f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a830:	b9d8      	cbnz	r0, 800a86a <_printf_float+0x432>
 800a832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a834:	f108 0201 	add.w	r2, r8, #1
 800a838:	3b01      	subs	r3, #1
 800a83a:	4631      	mov	r1, r6
 800a83c:	4628      	mov	r0, r5
 800a83e:	47b8      	blx	r7
 800a840:	3001      	adds	r0, #1
 800a842:	d10e      	bne.n	800a862 <_printf_float+0x42a>
 800a844:	e659      	b.n	800a4fa <_printf_float+0xc2>
 800a846:	2301      	movs	r3, #1
 800a848:	4652      	mov	r2, sl
 800a84a:	4631      	mov	r1, r6
 800a84c:	4628      	mov	r0, r5
 800a84e:	47b8      	blx	r7
 800a850:	3001      	adds	r0, #1
 800a852:	f43f ae52 	beq.w	800a4fa <_printf_float+0xc2>
 800a856:	f108 0801 	add.w	r8, r8, #1
 800a85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a85c:	3b01      	subs	r3, #1
 800a85e:	4543      	cmp	r3, r8
 800a860:	dcf1      	bgt.n	800a846 <_printf_float+0x40e>
 800a862:	464b      	mov	r3, r9
 800a864:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a868:	e6dc      	b.n	800a624 <_printf_float+0x1ec>
 800a86a:	f04f 0800 	mov.w	r8, #0
 800a86e:	f104 0a1a 	add.w	sl, r4, #26
 800a872:	e7f2      	b.n	800a85a <_printf_float+0x422>
 800a874:	2301      	movs	r3, #1
 800a876:	4642      	mov	r2, r8
 800a878:	e7df      	b.n	800a83a <_printf_float+0x402>
 800a87a:	2301      	movs	r3, #1
 800a87c:	464a      	mov	r2, r9
 800a87e:	4631      	mov	r1, r6
 800a880:	4628      	mov	r0, r5
 800a882:	47b8      	blx	r7
 800a884:	3001      	adds	r0, #1
 800a886:	f43f ae38 	beq.w	800a4fa <_printf_float+0xc2>
 800a88a:	f108 0801 	add.w	r8, r8, #1
 800a88e:	68e3      	ldr	r3, [r4, #12]
 800a890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a892:	1a5b      	subs	r3, r3, r1
 800a894:	4543      	cmp	r3, r8
 800a896:	dcf0      	bgt.n	800a87a <_printf_float+0x442>
 800a898:	e6fa      	b.n	800a690 <_printf_float+0x258>
 800a89a:	f04f 0800 	mov.w	r8, #0
 800a89e:	f104 0919 	add.w	r9, r4, #25
 800a8a2:	e7f4      	b.n	800a88e <_printf_float+0x456>

0800a8a4 <_printf_common>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	4616      	mov	r6, r2
 800a8aa:	4699      	mov	r9, r3
 800a8ac:	688a      	ldr	r2, [r1, #8]
 800a8ae:	690b      	ldr	r3, [r1, #16]
 800a8b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	bfb8      	it	lt
 800a8b8:	4613      	movlt	r3, r2
 800a8ba:	6033      	str	r3, [r6, #0]
 800a8bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	b10a      	cbz	r2, 800a8ca <_printf_common+0x26>
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	6033      	str	r3, [r6, #0]
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	0699      	lsls	r1, r3, #26
 800a8ce:	bf42      	ittt	mi
 800a8d0:	6833      	ldrmi	r3, [r6, #0]
 800a8d2:	3302      	addmi	r3, #2
 800a8d4:	6033      	strmi	r3, [r6, #0]
 800a8d6:	6825      	ldr	r5, [r4, #0]
 800a8d8:	f015 0506 	ands.w	r5, r5, #6
 800a8dc:	d106      	bne.n	800a8ec <_printf_common+0x48>
 800a8de:	f104 0a19 	add.w	sl, r4, #25
 800a8e2:	68e3      	ldr	r3, [r4, #12]
 800a8e4:	6832      	ldr	r2, [r6, #0]
 800a8e6:	1a9b      	subs	r3, r3, r2
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	dc26      	bgt.n	800a93a <_printf_common+0x96>
 800a8ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8f0:	1e13      	subs	r3, r2, #0
 800a8f2:	6822      	ldr	r2, [r4, #0]
 800a8f4:	bf18      	it	ne
 800a8f6:	2301      	movne	r3, #1
 800a8f8:	0692      	lsls	r2, r2, #26
 800a8fa:	d42b      	bmi.n	800a954 <_printf_common+0xb0>
 800a8fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a900:	4649      	mov	r1, r9
 800a902:	4638      	mov	r0, r7
 800a904:	47c0      	blx	r8
 800a906:	3001      	adds	r0, #1
 800a908:	d01e      	beq.n	800a948 <_printf_common+0xa4>
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	68e5      	ldr	r5, [r4, #12]
 800a90e:	6832      	ldr	r2, [r6, #0]
 800a910:	f003 0306 	and.w	r3, r3, #6
 800a914:	2b04      	cmp	r3, #4
 800a916:	bf08      	it	eq
 800a918:	1aad      	subeq	r5, r5, r2
 800a91a:	68a3      	ldr	r3, [r4, #8]
 800a91c:	6922      	ldr	r2, [r4, #16]
 800a91e:	bf0c      	ite	eq
 800a920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a924:	2500      	movne	r5, #0
 800a926:	4293      	cmp	r3, r2
 800a928:	bfc4      	itt	gt
 800a92a:	1a9b      	subgt	r3, r3, r2
 800a92c:	18ed      	addgt	r5, r5, r3
 800a92e:	2600      	movs	r6, #0
 800a930:	341a      	adds	r4, #26
 800a932:	42b5      	cmp	r5, r6
 800a934:	d11a      	bne.n	800a96c <_printf_common+0xc8>
 800a936:	2000      	movs	r0, #0
 800a938:	e008      	b.n	800a94c <_printf_common+0xa8>
 800a93a:	2301      	movs	r3, #1
 800a93c:	4652      	mov	r2, sl
 800a93e:	4649      	mov	r1, r9
 800a940:	4638      	mov	r0, r7
 800a942:	47c0      	blx	r8
 800a944:	3001      	adds	r0, #1
 800a946:	d103      	bne.n	800a950 <_printf_common+0xac>
 800a948:	f04f 30ff 	mov.w	r0, #4294967295
 800a94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a950:	3501      	adds	r5, #1
 800a952:	e7c6      	b.n	800a8e2 <_printf_common+0x3e>
 800a954:	18e1      	adds	r1, r4, r3
 800a956:	1c5a      	adds	r2, r3, #1
 800a958:	2030      	movs	r0, #48	; 0x30
 800a95a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a95e:	4422      	add	r2, r4
 800a960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a968:	3302      	adds	r3, #2
 800a96a:	e7c7      	b.n	800a8fc <_printf_common+0x58>
 800a96c:	2301      	movs	r3, #1
 800a96e:	4622      	mov	r2, r4
 800a970:	4649      	mov	r1, r9
 800a972:	4638      	mov	r0, r7
 800a974:	47c0      	blx	r8
 800a976:	3001      	adds	r0, #1
 800a978:	d0e6      	beq.n	800a948 <_printf_common+0xa4>
 800a97a:	3601      	adds	r6, #1
 800a97c:	e7d9      	b.n	800a932 <_printf_common+0x8e>
	...

0800a980 <_printf_i>:
 800a980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a984:	7e0f      	ldrb	r7, [r1, #24]
 800a986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a988:	2f78      	cmp	r7, #120	; 0x78
 800a98a:	4691      	mov	r9, r2
 800a98c:	4680      	mov	r8, r0
 800a98e:	460c      	mov	r4, r1
 800a990:	469a      	mov	sl, r3
 800a992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a996:	d807      	bhi.n	800a9a8 <_printf_i+0x28>
 800a998:	2f62      	cmp	r7, #98	; 0x62
 800a99a:	d80a      	bhi.n	800a9b2 <_printf_i+0x32>
 800a99c:	2f00      	cmp	r7, #0
 800a99e:	f000 80d8 	beq.w	800ab52 <_printf_i+0x1d2>
 800a9a2:	2f58      	cmp	r7, #88	; 0x58
 800a9a4:	f000 80a3 	beq.w	800aaee <_printf_i+0x16e>
 800a9a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9b0:	e03a      	b.n	800aa28 <_printf_i+0xa8>
 800a9b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9b6:	2b15      	cmp	r3, #21
 800a9b8:	d8f6      	bhi.n	800a9a8 <_printf_i+0x28>
 800a9ba:	a101      	add	r1, pc, #4	; (adr r1, 800a9c0 <_printf_i+0x40>)
 800a9bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9c0:	0800aa19 	.word	0x0800aa19
 800a9c4:	0800aa2d 	.word	0x0800aa2d
 800a9c8:	0800a9a9 	.word	0x0800a9a9
 800a9cc:	0800a9a9 	.word	0x0800a9a9
 800a9d0:	0800a9a9 	.word	0x0800a9a9
 800a9d4:	0800a9a9 	.word	0x0800a9a9
 800a9d8:	0800aa2d 	.word	0x0800aa2d
 800a9dc:	0800a9a9 	.word	0x0800a9a9
 800a9e0:	0800a9a9 	.word	0x0800a9a9
 800a9e4:	0800a9a9 	.word	0x0800a9a9
 800a9e8:	0800a9a9 	.word	0x0800a9a9
 800a9ec:	0800ab39 	.word	0x0800ab39
 800a9f0:	0800aa5d 	.word	0x0800aa5d
 800a9f4:	0800ab1b 	.word	0x0800ab1b
 800a9f8:	0800a9a9 	.word	0x0800a9a9
 800a9fc:	0800a9a9 	.word	0x0800a9a9
 800aa00:	0800ab5b 	.word	0x0800ab5b
 800aa04:	0800a9a9 	.word	0x0800a9a9
 800aa08:	0800aa5d 	.word	0x0800aa5d
 800aa0c:	0800a9a9 	.word	0x0800a9a9
 800aa10:	0800a9a9 	.word	0x0800a9a9
 800aa14:	0800ab23 	.word	0x0800ab23
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	1d1a      	adds	r2, r3, #4
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	602a      	str	r2, [r5, #0]
 800aa20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e0a3      	b.n	800ab74 <_printf_i+0x1f4>
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	6829      	ldr	r1, [r5, #0]
 800aa30:	0606      	lsls	r6, r0, #24
 800aa32:	f101 0304 	add.w	r3, r1, #4
 800aa36:	d50a      	bpl.n	800aa4e <_printf_i+0xce>
 800aa38:	680e      	ldr	r6, [r1, #0]
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	2e00      	cmp	r6, #0
 800aa3e:	da03      	bge.n	800aa48 <_printf_i+0xc8>
 800aa40:	232d      	movs	r3, #45	; 0x2d
 800aa42:	4276      	negs	r6, r6
 800aa44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa48:	485e      	ldr	r0, [pc, #376]	; (800abc4 <_printf_i+0x244>)
 800aa4a:	230a      	movs	r3, #10
 800aa4c:	e019      	b.n	800aa82 <_printf_i+0x102>
 800aa4e:	680e      	ldr	r6, [r1, #0]
 800aa50:	602b      	str	r3, [r5, #0]
 800aa52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa56:	bf18      	it	ne
 800aa58:	b236      	sxthne	r6, r6
 800aa5a:	e7ef      	b.n	800aa3c <_printf_i+0xbc>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	6820      	ldr	r0, [r4, #0]
 800aa60:	1d19      	adds	r1, r3, #4
 800aa62:	6029      	str	r1, [r5, #0]
 800aa64:	0601      	lsls	r1, r0, #24
 800aa66:	d501      	bpl.n	800aa6c <_printf_i+0xec>
 800aa68:	681e      	ldr	r6, [r3, #0]
 800aa6a:	e002      	b.n	800aa72 <_printf_i+0xf2>
 800aa6c:	0646      	lsls	r6, r0, #25
 800aa6e:	d5fb      	bpl.n	800aa68 <_printf_i+0xe8>
 800aa70:	881e      	ldrh	r6, [r3, #0]
 800aa72:	4854      	ldr	r0, [pc, #336]	; (800abc4 <_printf_i+0x244>)
 800aa74:	2f6f      	cmp	r7, #111	; 0x6f
 800aa76:	bf0c      	ite	eq
 800aa78:	2308      	moveq	r3, #8
 800aa7a:	230a      	movne	r3, #10
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa82:	6865      	ldr	r5, [r4, #4]
 800aa84:	60a5      	str	r5, [r4, #8]
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	bfa2      	ittt	ge
 800aa8a:	6821      	ldrge	r1, [r4, #0]
 800aa8c:	f021 0104 	bicge.w	r1, r1, #4
 800aa90:	6021      	strge	r1, [r4, #0]
 800aa92:	b90e      	cbnz	r6, 800aa98 <_printf_i+0x118>
 800aa94:	2d00      	cmp	r5, #0
 800aa96:	d04d      	beq.n	800ab34 <_printf_i+0x1b4>
 800aa98:	4615      	mov	r5, r2
 800aa9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa9e:	fb03 6711 	mls	r7, r3, r1, r6
 800aaa2:	5dc7      	ldrb	r7, [r0, r7]
 800aaa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaa8:	4637      	mov	r7, r6
 800aaaa:	42bb      	cmp	r3, r7
 800aaac:	460e      	mov	r6, r1
 800aaae:	d9f4      	bls.n	800aa9a <_printf_i+0x11a>
 800aab0:	2b08      	cmp	r3, #8
 800aab2:	d10b      	bne.n	800aacc <_printf_i+0x14c>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	07de      	lsls	r6, r3, #31
 800aab8:	d508      	bpl.n	800aacc <_printf_i+0x14c>
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	6861      	ldr	r1, [r4, #4]
 800aabe:	4299      	cmp	r1, r3
 800aac0:	bfde      	ittt	le
 800aac2:	2330      	movle	r3, #48	; 0x30
 800aac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aacc:	1b52      	subs	r2, r2, r5
 800aace:	6122      	str	r2, [r4, #16]
 800aad0:	f8cd a000 	str.w	sl, [sp]
 800aad4:	464b      	mov	r3, r9
 800aad6:	aa03      	add	r2, sp, #12
 800aad8:	4621      	mov	r1, r4
 800aada:	4640      	mov	r0, r8
 800aadc:	f7ff fee2 	bl	800a8a4 <_printf_common>
 800aae0:	3001      	adds	r0, #1
 800aae2:	d14c      	bne.n	800ab7e <_printf_i+0x1fe>
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	b004      	add	sp, #16
 800aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaee:	4835      	ldr	r0, [pc, #212]	; (800abc4 <_printf_i+0x244>)
 800aaf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aaf4:	6829      	ldr	r1, [r5, #0]
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aafc:	6029      	str	r1, [r5, #0]
 800aafe:	061d      	lsls	r5, r3, #24
 800ab00:	d514      	bpl.n	800ab2c <_printf_i+0x1ac>
 800ab02:	07df      	lsls	r7, r3, #31
 800ab04:	bf44      	itt	mi
 800ab06:	f043 0320 	orrmi.w	r3, r3, #32
 800ab0a:	6023      	strmi	r3, [r4, #0]
 800ab0c:	b91e      	cbnz	r6, 800ab16 <_printf_i+0x196>
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	f023 0320 	bic.w	r3, r3, #32
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	2310      	movs	r3, #16
 800ab18:	e7b0      	b.n	800aa7c <_printf_i+0xfc>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	f043 0320 	orr.w	r3, r3, #32
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	2378      	movs	r3, #120	; 0x78
 800ab24:	4828      	ldr	r0, [pc, #160]	; (800abc8 <_printf_i+0x248>)
 800ab26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab2a:	e7e3      	b.n	800aaf4 <_printf_i+0x174>
 800ab2c:	0659      	lsls	r1, r3, #25
 800ab2e:	bf48      	it	mi
 800ab30:	b2b6      	uxthmi	r6, r6
 800ab32:	e7e6      	b.n	800ab02 <_printf_i+0x182>
 800ab34:	4615      	mov	r5, r2
 800ab36:	e7bb      	b.n	800aab0 <_printf_i+0x130>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	6826      	ldr	r6, [r4, #0]
 800ab3c:	6961      	ldr	r1, [r4, #20]
 800ab3e:	1d18      	adds	r0, r3, #4
 800ab40:	6028      	str	r0, [r5, #0]
 800ab42:	0635      	lsls	r5, r6, #24
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	d501      	bpl.n	800ab4c <_printf_i+0x1cc>
 800ab48:	6019      	str	r1, [r3, #0]
 800ab4a:	e002      	b.n	800ab52 <_printf_i+0x1d2>
 800ab4c:	0670      	lsls	r0, r6, #25
 800ab4e:	d5fb      	bpl.n	800ab48 <_printf_i+0x1c8>
 800ab50:	8019      	strh	r1, [r3, #0]
 800ab52:	2300      	movs	r3, #0
 800ab54:	6123      	str	r3, [r4, #16]
 800ab56:	4615      	mov	r5, r2
 800ab58:	e7ba      	b.n	800aad0 <_printf_i+0x150>
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	1d1a      	adds	r2, r3, #4
 800ab5e:	602a      	str	r2, [r5, #0]
 800ab60:	681d      	ldr	r5, [r3, #0]
 800ab62:	6862      	ldr	r2, [r4, #4]
 800ab64:	2100      	movs	r1, #0
 800ab66:	4628      	mov	r0, r5
 800ab68:	f7f5 fb3a 	bl	80001e0 <memchr>
 800ab6c:	b108      	cbz	r0, 800ab72 <_printf_i+0x1f2>
 800ab6e:	1b40      	subs	r0, r0, r5
 800ab70:	6060      	str	r0, [r4, #4]
 800ab72:	6863      	ldr	r3, [r4, #4]
 800ab74:	6123      	str	r3, [r4, #16]
 800ab76:	2300      	movs	r3, #0
 800ab78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab7c:	e7a8      	b.n	800aad0 <_printf_i+0x150>
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	462a      	mov	r2, r5
 800ab82:	4649      	mov	r1, r9
 800ab84:	4640      	mov	r0, r8
 800ab86:	47d0      	blx	sl
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d0ab      	beq.n	800aae4 <_printf_i+0x164>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	079b      	lsls	r3, r3, #30
 800ab90:	d413      	bmi.n	800abba <_printf_i+0x23a>
 800ab92:	68e0      	ldr	r0, [r4, #12]
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	4298      	cmp	r0, r3
 800ab98:	bfb8      	it	lt
 800ab9a:	4618      	movlt	r0, r3
 800ab9c:	e7a4      	b.n	800aae8 <_printf_i+0x168>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4632      	mov	r2, r6
 800aba2:	4649      	mov	r1, r9
 800aba4:	4640      	mov	r0, r8
 800aba6:	47d0      	blx	sl
 800aba8:	3001      	adds	r0, #1
 800abaa:	d09b      	beq.n	800aae4 <_printf_i+0x164>
 800abac:	3501      	adds	r5, #1
 800abae:	68e3      	ldr	r3, [r4, #12]
 800abb0:	9903      	ldr	r1, [sp, #12]
 800abb2:	1a5b      	subs	r3, r3, r1
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	dcf2      	bgt.n	800ab9e <_printf_i+0x21e>
 800abb8:	e7eb      	b.n	800ab92 <_printf_i+0x212>
 800abba:	2500      	movs	r5, #0
 800abbc:	f104 0619 	add.w	r6, r4, #25
 800abc0:	e7f5      	b.n	800abae <_printf_i+0x22e>
 800abc2:	bf00      	nop
 800abc4:	0800e15a 	.word	0x0800e15a
 800abc8:	0800e16b 	.word	0x0800e16b

0800abcc <iprintf>:
 800abcc:	b40f      	push	{r0, r1, r2, r3}
 800abce:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <iprintf+0x2c>)
 800abd0:	b513      	push	{r0, r1, r4, lr}
 800abd2:	681c      	ldr	r4, [r3, #0]
 800abd4:	b124      	cbz	r4, 800abe0 <iprintf+0x14>
 800abd6:	69a3      	ldr	r3, [r4, #24]
 800abd8:	b913      	cbnz	r3, 800abe0 <iprintf+0x14>
 800abda:	4620      	mov	r0, r4
 800abdc:	f001 f8f8 	bl	800bdd0 <__sinit>
 800abe0:	ab05      	add	r3, sp, #20
 800abe2:	9a04      	ldr	r2, [sp, #16]
 800abe4:	68a1      	ldr	r1, [r4, #8]
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	4620      	mov	r0, r4
 800abea:	f002 f803 	bl	800cbf4 <_vfiprintf_r>
 800abee:	b002      	add	sp, #8
 800abf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf4:	b004      	add	sp, #16
 800abf6:	4770      	bx	lr
 800abf8:	2000002c 	.word	0x2000002c

0800abfc <_puts_r>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	460e      	mov	r6, r1
 800ac00:	4605      	mov	r5, r0
 800ac02:	b118      	cbz	r0, 800ac0c <_puts_r+0x10>
 800ac04:	6983      	ldr	r3, [r0, #24]
 800ac06:	b90b      	cbnz	r3, 800ac0c <_puts_r+0x10>
 800ac08:	f001 f8e2 	bl	800bdd0 <__sinit>
 800ac0c:	69ab      	ldr	r3, [r5, #24]
 800ac0e:	68ac      	ldr	r4, [r5, #8]
 800ac10:	b913      	cbnz	r3, 800ac18 <_puts_r+0x1c>
 800ac12:	4628      	mov	r0, r5
 800ac14:	f001 f8dc 	bl	800bdd0 <__sinit>
 800ac18:	4b2c      	ldr	r3, [pc, #176]	; (800accc <_puts_r+0xd0>)
 800ac1a:	429c      	cmp	r4, r3
 800ac1c:	d120      	bne.n	800ac60 <_puts_r+0x64>
 800ac1e:	686c      	ldr	r4, [r5, #4]
 800ac20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac22:	07db      	lsls	r3, r3, #31
 800ac24:	d405      	bmi.n	800ac32 <_puts_r+0x36>
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	0598      	lsls	r0, r3, #22
 800ac2a:	d402      	bmi.n	800ac32 <_puts_r+0x36>
 800ac2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac2e:	f001 f972 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	0719      	lsls	r1, r3, #28
 800ac36:	d51d      	bpl.n	800ac74 <_puts_r+0x78>
 800ac38:	6923      	ldr	r3, [r4, #16]
 800ac3a:	b1db      	cbz	r3, 800ac74 <_puts_r+0x78>
 800ac3c:	3e01      	subs	r6, #1
 800ac3e:	68a3      	ldr	r3, [r4, #8]
 800ac40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac44:	3b01      	subs	r3, #1
 800ac46:	60a3      	str	r3, [r4, #8]
 800ac48:	bb39      	cbnz	r1, 800ac9a <_puts_r+0x9e>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	da38      	bge.n	800acc0 <_puts_r+0xc4>
 800ac4e:	4622      	mov	r2, r4
 800ac50:	210a      	movs	r1, #10
 800ac52:	4628      	mov	r0, r5
 800ac54:	f000 f868 	bl	800ad28 <__swbuf_r>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	d011      	beq.n	800ac80 <_puts_r+0x84>
 800ac5c:	250a      	movs	r5, #10
 800ac5e:	e011      	b.n	800ac84 <_puts_r+0x88>
 800ac60:	4b1b      	ldr	r3, [pc, #108]	; (800acd0 <_puts_r+0xd4>)
 800ac62:	429c      	cmp	r4, r3
 800ac64:	d101      	bne.n	800ac6a <_puts_r+0x6e>
 800ac66:	68ac      	ldr	r4, [r5, #8]
 800ac68:	e7da      	b.n	800ac20 <_puts_r+0x24>
 800ac6a:	4b1a      	ldr	r3, [pc, #104]	; (800acd4 <_puts_r+0xd8>)
 800ac6c:	429c      	cmp	r4, r3
 800ac6e:	bf08      	it	eq
 800ac70:	68ec      	ldreq	r4, [r5, #12]
 800ac72:	e7d5      	b.n	800ac20 <_puts_r+0x24>
 800ac74:	4621      	mov	r1, r4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 f8a8 	bl	800adcc <__swsetup_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d0dd      	beq.n	800ac3c <_puts_r+0x40>
 800ac80:	f04f 35ff 	mov.w	r5, #4294967295
 800ac84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac86:	07da      	lsls	r2, r3, #31
 800ac88:	d405      	bmi.n	800ac96 <_puts_r+0x9a>
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	059b      	lsls	r3, r3, #22
 800ac8e:	d402      	bmi.n	800ac96 <_puts_r+0x9a>
 800ac90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac92:	f001 f941 	bl	800bf18 <__retarget_lock_release_recursive>
 800ac96:	4628      	mov	r0, r5
 800ac98:	bd70      	pop	{r4, r5, r6, pc}
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	da04      	bge.n	800aca8 <_puts_r+0xac>
 800ac9e:	69a2      	ldr	r2, [r4, #24]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	dc06      	bgt.n	800acb2 <_puts_r+0xb6>
 800aca4:	290a      	cmp	r1, #10
 800aca6:	d004      	beq.n	800acb2 <_puts_r+0xb6>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	6022      	str	r2, [r4, #0]
 800acae:	7019      	strb	r1, [r3, #0]
 800acb0:	e7c5      	b.n	800ac3e <_puts_r+0x42>
 800acb2:	4622      	mov	r2, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f000 f837 	bl	800ad28 <__swbuf_r>
 800acba:	3001      	adds	r0, #1
 800acbc:	d1bf      	bne.n	800ac3e <_puts_r+0x42>
 800acbe:	e7df      	b.n	800ac80 <_puts_r+0x84>
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	250a      	movs	r5, #10
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	6022      	str	r2, [r4, #0]
 800acc8:	701d      	strb	r5, [r3, #0]
 800acca:	e7db      	b.n	800ac84 <_puts_r+0x88>
 800accc:	0800e22c 	.word	0x0800e22c
 800acd0:	0800e24c 	.word	0x0800e24c
 800acd4:	0800e20c 	.word	0x0800e20c

0800acd8 <puts>:
 800acd8:	4b02      	ldr	r3, [pc, #8]	; (800ace4 <puts+0xc>)
 800acda:	4601      	mov	r1, r0
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	f7ff bf8d 	b.w	800abfc <_puts_r>
 800ace2:	bf00      	nop
 800ace4:	2000002c 	.word	0x2000002c

0800ace8 <siprintf>:
 800ace8:	b40e      	push	{r1, r2, r3}
 800acea:	b500      	push	{lr}
 800acec:	b09c      	sub	sp, #112	; 0x70
 800acee:	ab1d      	add	r3, sp, #116	; 0x74
 800acf0:	9002      	str	r0, [sp, #8]
 800acf2:	9006      	str	r0, [sp, #24]
 800acf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acf8:	4809      	ldr	r0, [pc, #36]	; (800ad20 <siprintf+0x38>)
 800acfa:	9107      	str	r1, [sp, #28]
 800acfc:	9104      	str	r1, [sp, #16]
 800acfe:	4909      	ldr	r1, [pc, #36]	; (800ad24 <siprintf+0x3c>)
 800ad00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad04:	9105      	str	r1, [sp, #20]
 800ad06:	6800      	ldr	r0, [r0, #0]
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	a902      	add	r1, sp, #8
 800ad0c:	f001 fe48 	bl	800c9a0 <_svfiprintf_r>
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]
 800ad16:	b01c      	add	sp, #112	; 0x70
 800ad18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad1c:	b003      	add	sp, #12
 800ad1e:	4770      	bx	lr
 800ad20:	2000002c 	.word	0x2000002c
 800ad24:	ffff0208 	.word	0xffff0208

0800ad28 <__swbuf_r>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	460e      	mov	r6, r1
 800ad2c:	4614      	mov	r4, r2
 800ad2e:	4605      	mov	r5, r0
 800ad30:	b118      	cbz	r0, 800ad3a <__swbuf_r+0x12>
 800ad32:	6983      	ldr	r3, [r0, #24]
 800ad34:	b90b      	cbnz	r3, 800ad3a <__swbuf_r+0x12>
 800ad36:	f001 f84b 	bl	800bdd0 <__sinit>
 800ad3a:	4b21      	ldr	r3, [pc, #132]	; (800adc0 <__swbuf_r+0x98>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d12b      	bne.n	800ad98 <__swbuf_r+0x70>
 800ad40:	686c      	ldr	r4, [r5, #4]
 800ad42:	69a3      	ldr	r3, [r4, #24]
 800ad44:	60a3      	str	r3, [r4, #8]
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	071a      	lsls	r2, r3, #28
 800ad4a:	d52f      	bpl.n	800adac <__swbuf_r+0x84>
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	b36b      	cbz	r3, 800adac <__swbuf_r+0x84>
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	6820      	ldr	r0, [r4, #0]
 800ad54:	1ac0      	subs	r0, r0, r3
 800ad56:	6963      	ldr	r3, [r4, #20]
 800ad58:	b2f6      	uxtb	r6, r6
 800ad5a:	4283      	cmp	r3, r0
 800ad5c:	4637      	mov	r7, r6
 800ad5e:	dc04      	bgt.n	800ad6a <__swbuf_r+0x42>
 800ad60:	4621      	mov	r1, r4
 800ad62:	4628      	mov	r0, r5
 800ad64:	f000 ffa0 	bl	800bca8 <_fflush_r>
 800ad68:	bb30      	cbnz	r0, 800adb8 <__swbuf_r+0x90>
 800ad6a:	68a3      	ldr	r3, [r4, #8]
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	60a3      	str	r3, [r4, #8]
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	6022      	str	r2, [r4, #0]
 800ad76:	701e      	strb	r6, [r3, #0]
 800ad78:	6963      	ldr	r3, [r4, #20]
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	4283      	cmp	r3, r0
 800ad7e:	d004      	beq.n	800ad8a <__swbuf_r+0x62>
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	07db      	lsls	r3, r3, #31
 800ad84:	d506      	bpl.n	800ad94 <__swbuf_r+0x6c>
 800ad86:	2e0a      	cmp	r6, #10
 800ad88:	d104      	bne.n	800ad94 <__swbuf_r+0x6c>
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 ff8b 	bl	800bca8 <_fflush_r>
 800ad92:	b988      	cbnz	r0, 800adb8 <__swbuf_r+0x90>
 800ad94:	4638      	mov	r0, r7
 800ad96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad98:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <__swbuf_r+0x9c>)
 800ad9a:	429c      	cmp	r4, r3
 800ad9c:	d101      	bne.n	800ada2 <__swbuf_r+0x7a>
 800ad9e:	68ac      	ldr	r4, [r5, #8]
 800ada0:	e7cf      	b.n	800ad42 <__swbuf_r+0x1a>
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <__swbuf_r+0xa0>)
 800ada4:	429c      	cmp	r4, r3
 800ada6:	bf08      	it	eq
 800ada8:	68ec      	ldreq	r4, [r5, #12]
 800adaa:	e7ca      	b.n	800ad42 <__swbuf_r+0x1a>
 800adac:	4621      	mov	r1, r4
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 f80c 	bl	800adcc <__swsetup_r>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d0cb      	beq.n	800ad50 <__swbuf_r+0x28>
 800adb8:	f04f 37ff 	mov.w	r7, #4294967295
 800adbc:	e7ea      	b.n	800ad94 <__swbuf_r+0x6c>
 800adbe:	bf00      	nop
 800adc0:	0800e22c 	.word	0x0800e22c
 800adc4:	0800e24c 	.word	0x0800e24c
 800adc8:	0800e20c 	.word	0x0800e20c

0800adcc <__swsetup_r>:
 800adcc:	4b32      	ldr	r3, [pc, #200]	; (800ae98 <__swsetup_r+0xcc>)
 800adce:	b570      	push	{r4, r5, r6, lr}
 800add0:	681d      	ldr	r5, [r3, #0]
 800add2:	4606      	mov	r6, r0
 800add4:	460c      	mov	r4, r1
 800add6:	b125      	cbz	r5, 800ade2 <__swsetup_r+0x16>
 800add8:	69ab      	ldr	r3, [r5, #24]
 800adda:	b913      	cbnz	r3, 800ade2 <__swsetup_r+0x16>
 800addc:	4628      	mov	r0, r5
 800adde:	f000 fff7 	bl	800bdd0 <__sinit>
 800ade2:	4b2e      	ldr	r3, [pc, #184]	; (800ae9c <__swsetup_r+0xd0>)
 800ade4:	429c      	cmp	r4, r3
 800ade6:	d10f      	bne.n	800ae08 <__swsetup_r+0x3c>
 800ade8:	686c      	ldr	r4, [r5, #4]
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adf0:	0719      	lsls	r1, r3, #28
 800adf2:	d42c      	bmi.n	800ae4e <__swsetup_r+0x82>
 800adf4:	06dd      	lsls	r5, r3, #27
 800adf6:	d411      	bmi.n	800ae1c <__swsetup_r+0x50>
 800adf8:	2309      	movs	r3, #9
 800adfa:	6033      	str	r3, [r6, #0]
 800adfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae00:	81a3      	strh	r3, [r4, #12]
 800ae02:	f04f 30ff 	mov.w	r0, #4294967295
 800ae06:	e03e      	b.n	800ae86 <__swsetup_r+0xba>
 800ae08:	4b25      	ldr	r3, [pc, #148]	; (800aea0 <__swsetup_r+0xd4>)
 800ae0a:	429c      	cmp	r4, r3
 800ae0c:	d101      	bne.n	800ae12 <__swsetup_r+0x46>
 800ae0e:	68ac      	ldr	r4, [r5, #8]
 800ae10:	e7eb      	b.n	800adea <__swsetup_r+0x1e>
 800ae12:	4b24      	ldr	r3, [pc, #144]	; (800aea4 <__swsetup_r+0xd8>)
 800ae14:	429c      	cmp	r4, r3
 800ae16:	bf08      	it	eq
 800ae18:	68ec      	ldreq	r4, [r5, #12]
 800ae1a:	e7e6      	b.n	800adea <__swsetup_r+0x1e>
 800ae1c:	0758      	lsls	r0, r3, #29
 800ae1e:	d512      	bpl.n	800ae46 <__swsetup_r+0x7a>
 800ae20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae22:	b141      	cbz	r1, 800ae36 <__swsetup_r+0x6a>
 800ae24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae28:	4299      	cmp	r1, r3
 800ae2a:	d002      	beq.n	800ae32 <__swsetup_r+0x66>
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f001 fc7b 	bl	800c728 <_free_r>
 800ae32:	2300      	movs	r3, #0
 800ae34:	6363      	str	r3, [r4, #52]	; 0x34
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	6063      	str	r3, [r4, #4]
 800ae42:	6923      	ldr	r3, [r4, #16]
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	89a3      	ldrh	r3, [r4, #12]
 800ae48:	f043 0308 	orr.w	r3, r3, #8
 800ae4c:	81a3      	strh	r3, [r4, #12]
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	b94b      	cbnz	r3, 800ae66 <__swsetup_r+0x9a>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae5c:	d003      	beq.n	800ae66 <__swsetup_r+0x9a>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4630      	mov	r0, r6
 800ae62:	f001 f87f 	bl	800bf64 <__smakebuf_r>
 800ae66:	89a0      	ldrh	r0, [r4, #12]
 800ae68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae6c:	f010 0301 	ands.w	r3, r0, #1
 800ae70:	d00a      	beq.n	800ae88 <__swsetup_r+0xbc>
 800ae72:	2300      	movs	r3, #0
 800ae74:	60a3      	str	r3, [r4, #8]
 800ae76:	6963      	ldr	r3, [r4, #20]
 800ae78:	425b      	negs	r3, r3
 800ae7a:	61a3      	str	r3, [r4, #24]
 800ae7c:	6923      	ldr	r3, [r4, #16]
 800ae7e:	b943      	cbnz	r3, 800ae92 <__swsetup_r+0xc6>
 800ae80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae84:	d1ba      	bne.n	800adfc <__swsetup_r+0x30>
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	0781      	lsls	r1, r0, #30
 800ae8a:	bf58      	it	pl
 800ae8c:	6963      	ldrpl	r3, [r4, #20]
 800ae8e:	60a3      	str	r3, [r4, #8]
 800ae90:	e7f4      	b.n	800ae7c <__swsetup_r+0xb0>
 800ae92:	2000      	movs	r0, #0
 800ae94:	e7f7      	b.n	800ae86 <__swsetup_r+0xba>
 800ae96:	bf00      	nop
 800ae98:	2000002c 	.word	0x2000002c
 800ae9c:	0800e22c 	.word	0x0800e22c
 800aea0:	0800e24c 	.word	0x0800e24c
 800aea4:	0800e20c 	.word	0x0800e20c

0800aea8 <quorem>:
 800aea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	6903      	ldr	r3, [r0, #16]
 800aeae:	690c      	ldr	r4, [r1, #16]
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	f2c0 8081 	blt.w	800afba <quorem+0x112>
 800aeb8:	3c01      	subs	r4, #1
 800aeba:	f101 0814 	add.w	r8, r1, #20
 800aebe:	f100 0514 	add.w	r5, r0, #20
 800aec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aed0:	3301      	adds	r3, #1
 800aed2:	429a      	cmp	r2, r3
 800aed4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aed8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aedc:	fbb2 f6f3 	udiv	r6, r2, r3
 800aee0:	d331      	bcc.n	800af46 <quorem+0x9e>
 800aee2:	f04f 0e00 	mov.w	lr, #0
 800aee6:	4640      	mov	r0, r8
 800aee8:	46ac      	mov	ip, r5
 800aeea:	46f2      	mov	sl, lr
 800aeec:	f850 2b04 	ldr.w	r2, [r0], #4
 800aef0:	b293      	uxth	r3, r2
 800aef2:	fb06 e303 	mla	r3, r6, r3, lr
 800aef6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	ebaa 0303 	sub.w	r3, sl, r3
 800af00:	f8dc a000 	ldr.w	sl, [ip]
 800af04:	0c12      	lsrs	r2, r2, #16
 800af06:	fa13 f38a 	uxtah	r3, r3, sl
 800af0a:	fb06 e202 	mla	r2, r6, r2, lr
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	9b00      	ldr	r3, [sp, #0]
 800af12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af16:	b292      	uxth	r2, r2
 800af18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af20:	f8bd 3000 	ldrh.w	r3, [sp]
 800af24:	4581      	cmp	r9, r0
 800af26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af2a:	f84c 3b04 	str.w	r3, [ip], #4
 800af2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af32:	d2db      	bcs.n	800aeec <quorem+0x44>
 800af34:	f855 300b 	ldr.w	r3, [r5, fp]
 800af38:	b92b      	cbnz	r3, 800af46 <quorem+0x9e>
 800af3a:	9b01      	ldr	r3, [sp, #4]
 800af3c:	3b04      	subs	r3, #4
 800af3e:	429d      	cmp	r5, r3
 800af40:	461a      	mov	r2, r3
 800af42:	d32e      	bcc.n	800afa2 <quorem+0xfa>
 800af44:	613c      	str	r4, [r7, #16]
 800af46:	4638      	mov	r0, r7
 800af48:	f001 fad6 	bl	800c4f8 <__mcmp>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	db24      	blt.n	800af9a <quorem+0xf2>
 800af50:	3601      	adds	r6, #1
 800af52:	4628      	mov	r0, r5
 800af54:	f04f 0c00 	mov.w	ip, #0
 800af58:	f858 2b04 	ldr.w	r2, [r8], #4
 800af5c:	f8d0 e000 	ldr.w	lr, [r0]
 800af60:	b293      	uxth	r3, r2
 800af62:	ebac 0303 	sub.w	r3, ip, r3
 800af66:	0c12      	lsrs	r2, r2, #16
 800af68:	fa13 f38e 	uxtah	r3, r3, lr
 800af6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af74:	b29b      	uxth	r3, r3
 800af76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af7a:	45c1      	cmp	r9, r8
 800af7c:	f840 3b04 	str.w	r3, [r0], #4
 800af80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af84:	d2e8      	bcs.n	800af58 <quorem+0xb0>
 800af86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8e:	b922      	cbnz	r2, 800af9a <quorem+0xf2>
 800af90:	3b04      	subs	r3, #4
 800af92:	429d      	cmp	r5, r3
 800af94:	461a      	mov	r2, r3
 800af96:	d30a      	bcc.n	800afae <quorem+0x106>
 800af98:	613c      	str	r4, [r7, #16]
 800af9a:	4630      	mov	r0, r6
 800af9c:	b003      	add	sp, #12
 800af9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa2:	6812      	ldr	r2, [r2, #0]
 800afa4:	3b04      	subs	r3, #4
 800afa6:	2a00      	cmp	r2, #0
 800afa8:	d1cc      	bne.n	800af44 <quorem+0x9c>
 800afaa:	3c01      	subs	r4, #1
 800afac:	e7c7      	b.n	800af3e <quorem+0x96>
 800afae:	6812      	ldr	r2, [r2, #0]
 800afb0:	3b04      	subs	r3, #4
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	d1f0      	bne.n	800af98 <quorem+0xf0>
 800afb6:	3c01      	subs	r4, #1
 800afb8:	e7eb      	b.n	800af92 <quorem+0xea>
 800afba:	2000      	movs	r0, #0
 800afbc:	e7ee      	b.n	800af9c <quorem+0xf4>
	...

0800afc0 <_dtoa_r>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	ed2d 8b04 	vpush	{d8-d9}
 800afc8:	ec57 6b10 	vmov	r6, r7, d0
 800afcc:	b093      	sub	sp, #76	; 0x4c
 800afce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afd4:	9106      	str	r1, [sp, #24]
 800afd6:	ee10 aa10 	vmov	sl, s0
 800afda:	4604      	mov	r4, r0
 800afdc:	9209      	str	r2, [sp, #36]	; 0x24
 800afde:	930c      	str	r3, [sp, #48]	; 0x30
 800afe0:	46bb      	mov	fp, r7
 800afe2:	b975      	cbnz	r5, 800b002 <_dtoa_r+0x42>
 800afe4:	2010      	movs	r0, #16
 800afe6:	f000 fffd 	bl	800bfe4 <malloc>
 800afea:	4602      	mov	r2, r0
 800afec:	6260      	str	r0, [r4, #36]	; 0x24
 800afee:	b920      	cbnz	r0, 800affa <_dtoa_r+0x3a>
 800aff0:	4ba7      	ldr	r3, [pc, #668]	; (800b290 <_dtoa_r+0x2d0>)
 800aff2:	21ea      	movs	r1, #234	; 0xea
 800aff4:	48a7      	ldr	r0, [pc, #668]	; (800b294 <_dtoa_r+0x2d4>)
 800aff6:	f001 ff93 	bl	800cf20 <__assert_func>
 800affa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800affe:	6005      	str	r5, [r0, #0]
 800b000:	60c5      	str	r5, [r0, #12]
 800b002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b004:	6819      	ldr	r1, [r3, #0]
 800b006:	b151      	cbz	r1, 800b01e <_dtoa_r+0x5e>
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	604a      	str	r2, [r1, #4]
 800b00c:	2301      	movs	r3, #1
 800b00e:	4093      	lsls	r3, r2
 800b010:	608b      	str	r3, [r1, #8]
 800b012:	4620      	mov	r0, r4
 800b014:	f001 f82e 	bl	800c074 <_Bfree>
 800b018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b01a:	2200      	movs	r2, #0
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	1e3b      	subs	r3, r7, #0
 800b020:	bfaa      	itet	ge
 800b022:	2300      	movge	r3, #0
 800b024:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b028:	f8c8 3000 	strge.w	r3, [r8]
 800b02c:	4b9a      	ldr	r3, [pc, #616]	; (800b298 <_dtoa_r+0x2d8>)
 800b02e:	bfbc      	itt	lt
 800b030:	2201      	movlt	r2, #1
 800b032:	f8c8 2000 	strlt.w	r2, [r8]
 800b036:	ea33 030b 	bics.w	r3, r3, fp
 800b03a:	d11b      	bne.n	800b074 <_dtoa_r+0xb4>
 800b03c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b03e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b048:	4333      	orrs	r3, r6
 800b04a:	f000 8592 	beq.w	800bb72 <_dtoa_r+0xbb2>
 800b04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b050:	b963      	cbnz	r3, 800b06c <_dtoa_r+0xac>
 800b052:	4b92      	ldr	r3, [pc, #584]	; (800b29c <_dtoa_r+0x2dc>)
 800b054:	e022      	b.n	800b09c <_dtoa_r+0xdc>
 800b056:	4b92      	ldr	r3, [pc, #584]	; (800b2a0 <_dtoa_r+0x2e0>)
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	3308      	adds	r3, #8
 800b05c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	9801      	ldr	r0, [sp, #4]
 800b062:	b013      	add	sp, #76	; 0x4c
 800b064:	ecbd 8b04 	vpop	{d8-d9}
 800b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06c:	4b8b      	ldr	r3, [pc, #556]	; (800b29c <_dtoa_r+0x2dc>)
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	3303      	adds	r3, #3
 800b072:	e7f3      	b.n	800b05c <_dtoa_r+0x9c>
 800b074:	2200      	movs	r2, #0
 800b076:	2300      	movs	r3, #0
 800b078:	4650      	mov	r0, sl
 800b07a:	4659      	mov	r1, fp
 800b07c:	f7f5 fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 800b080:	ec4b ab19 	vmov	d9, sl, fp
 800b084:	4680      	mov	r8, r0
 800b086:	b158      	cbz	r0, 800b0a0 <_dtoa_r+0xe0>
 800b088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b08a:	2301      	movs	r3, #1
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 856b 	beq.w	800bb6c <_dtoa_r+0xbac>
 800b096:	4883      	ldr	r0, [pc, #524]	; (800b2a4 <_dtoa_r+0x2e4>)
 800b098:	6018      	str	r0, [r3, #0]
 800b09a:	1e43      	subs	r3, r0, #1
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	e7df      	b.n	800b060 <_dtoa_r+0xa0>
 800b0a0:	ec4b ab10 	vmov	d0, sl, fp
 800b0a4:	aa10      	add	r2, sp, #64	; 0x40
 800b0a6:	a911      	add	r1, sp, #68	; 0x44
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f001 facb 	bl	800c644 <__d2b>
 800b0ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b0b2:	ee08 0a10 	vmov	s16, r0
 800b0b6:	2d00      	cmp	r5, #0
 800b0b8:	f000 8084 	beq.w	800b1c4 <_dtoa_r+0x204>
 800b0bc:	ee19 3a90 	vmov	r3, s19
 800b0c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b0c8:	4656      	mov	r6, sl
 800b0ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b0ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b0d6:	4b74      	ldr	r3, [pc, #464]	; (800b2a8 <_dtoa_r+0x2e8>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	4630      	mov	r0, r6
 800b0dc:	4639      	mov	r1, r7
 800b0de:	f7f5 f8d3 	bl	8000288 <__aeabi_dsub>
 800b0e2:	a365      	add	r3, pc, #404	; (adr r3, 800b278 <_dtoa_r+0x2b8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 fa86 	bl	80005f8 <__aeabi_dmul>
 800b0ec:	a364      	add	r3, pc, #400	; (adr r3, 800b280 <_dtoa_r+0x2c0>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f7f5 f8cb 	bl	800028c <__adddf3>
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	460f      	mov	r7, r1
 800b0fc:	f7f5 fa12 	bl	8000524 <__aeabi_i2d>
 800b100:	a361      	add	r3, pc, #388	; (adr r3, 800b288 <_dtoa_r+0x2c8>)
 800b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b106:	f7f5 fa77 	bl	80005f8 <__aeabi_dmul>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4630      	mov	r0, r6
 800b110:	4639      	mov	r1, r7
 800b112:	f7f5 f8bb 	bl	800028c <__adddf3>
 800b116:	4606      	mov	r6, r0
 800b118:	460f      	mov	r7, r1
 800b11a:	f7f5 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800b11e:	2200      	movs	r2, #0
 800b120:	9000      	str	r0, [sp, #0]
 800b122:	2300      	movs	r3, #0
 800b124:	4630      	mov	r0, r6
 800b126:	4639      	mov	r1, r7
 800b128:	f7f5 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800b12c:	b150      	cbz	r0, 800b144 <_dtoa_r+0x184>
 800b12e:	9800      	ldr	r0, [sp, #0]
 800b130:	f7f5 f9f8 	bl	8000524 <__aeabi_i2d>
 800b134:	4632      	mov	r2, r6
 800b136:	463b      	mov	r3, r7
 800b138:	f7f5 fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b13c:	b910      	cbnz	r0, 800b144 <_dtoa_r+0x184>
 800b13e:	9b00      	ldr	r3, [sp, #0]
 800b140:	3b01      	subs	r3, #1
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	9b00      	ldr	r3, [sp, #0]
 800b146:	2b16      	cmp	r3, #22
 800b148:	d85a      	bhi.n	800b200 <_dtoa_r+0x240>
 800b14a:	9a00      	ldr	r2, [sp, #0]
 800b14c:	4b57      	ldr	r3, [pc, #348]	; (800b2ac <_dtoa_r+0x2ec>)
 800b14e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	ec51 0b19 	vmov	r0, r1, d9
 800b15a:	f7f5 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d050      	beq.n	800b204 <_dtoa_r+0x244>
 800b162:	9b00      	ldr	r3, [sp, #0]
 800b164:	3b01      	subs	r3, #1
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	2300      	movs	r3, #0
 800b16a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b16c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b16e:	1b5d      	subs	r5, r3, r5
 800b170:	1e6b      	subs	r3, r5, #1
 800b172:	9305      	str	r3, [sp, #20]
 800b174:	bf45      	ittet	mi
 800b176:	f1c5 0301 	rsbmi	r3, r5, #1
 800b17a:	9304      	strmi	r3, [sp, #16]
 800b17c:	2300      	movpl	r3, #0
 800b17e:	2300      	movmi	r3, #0
 800b180:	bf4c      	ite	mi
 800b182:	9305      	strmi	r3, [sp, #20]
 800b184:	9304      	strpl	r3, [sp, #16]
 800b186:	9b00      	ldr	r3, [sp, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	db3d      	blt.n	800b208 <_dtoa_r+0x248>
 800b18c:	9b05      	ldr	r3, [sp, #20]
 800b18e:	9a00      	ldr	r2, [sp, #0]
 800b190:	920a      	str	r2, [sp, #40]	; 0x28
 800b192:	4413      	add	r3, r2
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	2300      	movs	r3, #0
 800b198:	9307      	str	r3, [sp, #28]
 800b19a:	9b06      	ldr	r3, [sp, #24]
 800b19c:	2b09      	cmp	r3, #9
 800b19e:	f200 8089 	bhi.w	800b2b4 <_dtoa_r+0x2f4>
 800b1a2:	2b05      	cmp	r3, #5
 800b1a4:	bfc4      	itt	gt
 800b1a6:	3b04      	subgt	r3, #4
 800b1a8:	9306      	strgt	r3, [sp, #24]
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	f1a3 0302 	sub.w	r3, r3, #2
 800b1b0:	bfcc      	ite	gt
 800b1b2:	2500      	movgt	r5, #0
 800b1b4:	2501      	movle	r5, #1
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	f200 8087 	bhi.w	800b2ca <_dtoa_r+0x30a>
 800b1bc:	e8df f003 	tbb	[pc, r3]
 800b1c0:	59383a2d 	.word	0x59383a2d
 800b1c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1c8:	441d      	add	r5, r3
 800b1ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	bfc1      	itttt	gt
 800b1d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b1da:	fa0b f303 	lslgt.w	r3, fp, r3
 800b1de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1e2:	bfda      	itte	le
 800b1e4:	f1c3 0320 	rsble	r3, r3, #32
 800b1e8:	fa06 f003 	lslle.w	r0, r6, r3
 800b1ec:	4318      	orrgt	r0, r3
 800b1ee:	f7f5 f989 	bl	8000504 <__aeabi_ui2d>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b1fa:	3d01      	subs	r5, #1
 800b1fc:	930e      	str	r3, [sp, #56]	; 0x38
 800b1fe:	e76a      	b.n	800b0d6 <_dtoa_r+0x116>
 800b200:	2301      	movs	r3, #1
 800b202:	e7b2      	b.n	800b16a <_dtoa_r+0x1aa>
 800b204:	900b      	str	r0, [sp, #44]	; 0x2c
 800b206:	e7b1      	b.n	800b16c <_dtoa_r+0x1ac>
 800b208:	9b04      	ldr	r3, [sp, #16]
 800b20a:	9a00      	ldr	r2, [sp, #0]
 800b20c:	1a9b      	subs	r3, r3, r2
 800b20e:	9304      	str	r3, [sp, #16]
 800b210:	4253      	negs	r3, r2
 800b212:	9307      	str	r3, [sp, #28]
 800b214:	2300      	movs	r3, #0
 800b216:	930a      	str	r3, [sp, #40]	; 0x28
 800b218:	e7bf      	b.n	800b19a <_dtoa_r+0x1da>
 800b21a:	2300      	movs	r3, #0
 800b21c:	9308      	str	r3, [sp, #32]
 800b21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b220:	2b00      	cmp	r3, #0
 800b222:	dc55      	bgt.n	800b2d0 <_dtoa_r+0x310>
 800b224:	2301      	movs	r3, #1
 800b226:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b22a:	461a      	mov	r2, r3
 800b22c:	9209      	str	r2, [sp, #36]	; 0x24
 800b22e:	e00c      	b.n	800b24a <_dtoa_r+0x28a>
 800b230:	2301      	movs	r3, #1
 800b232:	e7f3      	b.n	800b21c <_dtoa_r+0x25c>
 800b234:	2300      	movs	r3, #0
 800b236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b238:	9308      	str	r3, [sp, #32]
 800b23a:	9b00      	ldr	r3, [sp, #0]
 800b23c:	4413      	add	r3, r2
 800b23e:	9302      	str	r3, [sp, #8]
 800b240:	3301      	adds	r3, #1
 800b242:	2b01      	cmp	r3, #1
 800b244:	9303      	str	r3, [sp, #12]
 800b246:	bfb8      	it	lt
 800b248:	2301      	movlt	r3, #1
 800b24a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b24c:	2200      	movs	r2, #0
 800b24e:	6042      	str	r2, [r0, #4]
 800b250:	2204      	movs	r2, #4
 800b252:	f102 0614 	add.w	r6, r2, #20
 800b256:	429e      	cmp	r6, r3
 800b258:	6841      	ldr	r1, [r0, #4]
 800b25a:	d93d      	bls.n	800b2d8 <_dtoa_r+0x318>
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fec9 	bl	800bff4 <_Balloc>
 800b262:	9001      	str	r0, [sp, #4]
 800b264:	2800      	cmp	r0, #0
 800b266:	d13b      	bne.n	800b2e0 <_dtoa_r+0x320>
 800b268:	4b11      	ldr	r3, [pc, #68]	; (800b2b0 <_dtoa_r+0x2f0>)
 800b26a:	4602      	mov	r2, r0
 800b26c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b270:	e6c0      	b.n	800aff4 <_dtoa_r+0x34>
 800b272:	2301      	movs	r3, #1
 800b274:	e7df      	b.n	800b236 <_dtoa_r+0x276>
 800b276:	bf00      	nop
 800b278:	636f4361 	.word	0x636f4361
 800b27c:	3fd287a7 	.word	0x3fd287a7
 800b280:	8b60c8b3 	.word	0x8b60c8b3
 800b284:	3fc68a28 	.word	0x3fc68a28
 800b288:	509f79fb 	.word	0x509f79fb
 800b28c:	3fd34413 	.word	0x3fd34413
 800b290:	0800e189 	.word	0x0800e189
 800b294:	0800e1a0 	.word	0x0800e1a0
 800b298:	7ff00000 	.word	0x7ff00000
 800b29c:	0800e185 	.word	0x0800e185
 800b2a0:	0800e17c 	.word	0x0800e17c
 800b2a4:	0800e159 	.word	0x0800e159
 800b2a8:	3ff80000 	.word	0x3ff80000
 800b2ac:	0800e2f0 	.word	0x0800e2f0
 800b2b0:	0800e1fb 	.word	0x0800e1fb
 800b2b4:	2501      	movs	r5, #1
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	9306      	str	r3, [sp, #24]
 800b2ba:	9508      	str	r5, [sp, #32]
 800b2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2312      	movs	r3, #18
 800b2c8:	e7b0      	b.n	800b22c <_dtoa_r+0x26c>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	9308      	str	r3, [sp, #32]
 800b2ce:	e7f5      	b.n	800b2bc <_dtoa_r+0x2fc>
 800b2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2d6:	e7b8      	b.n	800b24a <_dtoa_r+0x28a>
 800b2d8:	3101      	adds	r1, #1
 800b2da:	6041      	str	r1, [r0, #4]
 800b2dc:	0052      	lsls	r2, r2, #1
 800b2de:	e7b8      	b.n	800b252 <_dtoa_r+0x292>
 800b2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2e2:	9a01      	ldr	r2, [sp, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	9b03      	ldr	r3, [sp, #12]
 800b2e8:	2b0e      	cmp	r3, #14
 800b2ea:	f200 809d 	bhi.w	800b428 <_dtoa_r+0x468>
 800b2ee:	2d00      	cmp	r5, #0
 800b2f0:	f000 809a 	beq.w	800b428 <_dtoa_r+0x468>
 800b2f4:	9b00      	ldr	r3, [sp, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	dd32      	ble.n	800b360 <_dtoa_r+0x3a0>
 800b2fa:	4ab7      	ldr	r2, [pc, #732]	; (800b5d8 <_dtoa_r+0x618>)
 800b2fc:	f003 030f 	and.w	r3, r3, #15
 800b300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b304:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b308:	9b00      	ldr	r3, [sp, #0]
 800b30a:	05d8      	lsls	r0, r3, #23
 800b30c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b310:	d516      	bpl.n	800b340 <_dtoa_r+0x380>
 800b312:	4bb2      	ldr	r3, [pc, #712]	; (800b5dc <_dtoa_r+0x61c>)
 800b314:	ec51 0b19 	vmov	r0, r1, d9
 800b318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b31c:	f7f5 fa96 	bl	800084c <__aeabi_ddiv>
 800b320:	f007 070f 	and.w	r7, r7, #15
 800b324:	4682      	mov	sl, r0
 800b326:	468b      	mov	fp, r1
 800b328:	2503      	movs	r5, #3
 800b32a:	4eac      	ldr	r6, [pc, #688]	; (800b5dc <_dtoa_r+0x61c>)
 800b32c:	b957      	cbnz	r7, 800b344 <_dtoa_r+0x384>
 800b32e:	4642      	mov	r2, r8
 800b330:	464b      	mov	r3, r9
 800b332:	4650      	mov	r0, sl
 800b334:	4659      	mov	r1, fp
 800b336:	f7f5 fa89 	bl	800084c <__aeabi_ddiv>
 800b33a:	4682      	mov	sl, r0
 800b33c:	468b      	mov	fp, r1
 800b33e:	e028      	b.n	800b392 <_dtoa_r+0x3d2>
 800b340:	2502      	movs	r5, #2
 800b342:	e7f2      	b.n	800b32a <_dtoa_r+0x36a>
 800b344:	07f9      	lsls	r1, r7, #31
 800b346:	d508      	bpl.n	800b35a <_dtoa_r+0x39a>
 800b348:	4640      	mov	r0, r8
 800b34a:	4649      	mov	r1, r9
 800b34c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b350:	f7f5 f952 	bl	80005f8 <__aeabi_dmul>
 800b354:	3501      	adds	r5, #1
 800b356:	4680      	mov	r8, r0
 800b358:	4689      	mov	r9, r1
 800b35a:	107f      	asrs	r7, r7, #1
 800b35c:	3608      	adds	r6, #8
 800b35e:	e7e5      	b.n	800b32c <_dtoa_r+0x36c>
 800b360:	f000 809b 	beq.w	800b49a <_dtoa_r+0x4da>
 800b364:	9b00      	ldr	r3, [sp, #0]
 800b366:	4f9d      	ldr	r7, [pc, #628]	; (800b5dc <_dtoa_r+0x61c>)
 800b368:	425e      	negs	r6, r3
 800b36a:	4b9b      	ldr	r3, [pc, #620]	; (800b5d8 <_dtoa_r+0x618>)
 800b36c:	f006 020f 	and.w	r2, r6, #15
 800b370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	ec51 0b19 	vmov	r0, r1, d9
 800b37c:	f7f5 f93c 	bl	80005f8 <__aeabi_dmul>
 800b380:	1136      	asrs	r6, r6, #4
 800b382:	4682      	mov	sl, r0
 800b384:	468b      	mov	fp, r1
 800b386:	2300      	movs	r3, #0
 800b388:	2502      	movs	r5, #2
 800b38a:	2e00      	cmp	r6, #0
 800b38c:	d17a      	bne.n	800b484 <_dtoa_r+0x4c4>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1d3      	bne.n	800b33a <_dtoa_r+0x37a>
 800b392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b394:	2b00      	cmp	r3, #0
 800b396:	f000 8082 	beq.w	800b49e <_dtoa_r+0x4de>
 800b39a:	4b91      	ldr	r3, [pc, #580]	; (800b5e0 <_dtoa_r+0x620>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	4650      	mov	r0, sl
 800b3a0:	4659      	mov	r1, fp
 800b3a2:	f7f5 fb9b 	bl	8000adc <__aeabi_dcmplt>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d079      	beq.n	800b49e <_dtoa_r+0x4de>
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d076      	beq.n	800b49e <_dtoa_r+0x4de>
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dd36      	ble.n	800b424 <_dtoa_r+0x464>
 800b3b6:	9b00      	ldr	r3, [sp, #0]
 800b3b8:	4650      	mov	r0, sl
 800b3ba:	4659      	mov	r1, fp
 800b3bc:	1e5f      	subs	r7, r3, #1
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4b88      	ldr	r3, [pc, #544]	; (800b5e4 <_dtoa_r+0x624>)
 800b3c2:	f7f5 f919 	bl	80005f8 <__aeabi_dmul>
 800b3c6:	9e02      	ldr	r6, [sp, #8]
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	468b      	mov	fp, r1
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f7f5 f8a8 	bl	8000524 <__aeabi_i2d>
 800b3d4:	4652      	mov	r2, sl
 800b3d6:	465b      	mov	r3, fp
 800b3d8:	f7f5 f90e 	bl	80005f8 <__aeabi_dmul>
 800b3dc:	4b82      	ldr	r3, [pc, #520]	; (800b5e8 <_dtoa_r+0x628>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f7f4 ff54 	bl	800028c <__adddf3>
 800b3e4:	46d0      	mov	r8, sl
 800b3e6:	46d9      	mov	r9, fp
 800b3e8:	4682      	mov	sl, r0
 800b3ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b3ee:	2e00      	cmp	r6, #0
 800b3f0:	d158      	bne.n	800b4a4 <_dtoa_r+0x4e4>
 800b3f2:	4b7e      	ldr	r3, [pc, #504]	; (800b5ec <_dtoa_r+0x62c>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	f7f4 ff45 	bl	8000288 <__aeabi_dsub>
 800b3fe:	4652      	mov	r2, sl
 800b400:	465b      	mov	r3, fp
 800b402:	4680      	mov	r8, r0
 800b404:	4689      	mov	r9, r1
 800b406:	f7f5 fb87 	bl	8000b18 <__aeabi_dcmpgt>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f040 8295 	bne.w	800b93a <_dtoa_r+0x97a>
 800b410:	4652      	mov	r2, sl
 800b412:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b416:	4640      	mov	r0, r8
 800b418:	4649      	mov	r1, r9
 800b41a:	f7f5 fb5f 	bl	8000adc <__aeabi_dcmplt>
 800b41e:	2800      	cmp	r0, #0
 800b420:	f040 8289 	bne.w	800b936 <_dtoa_r+0x976>
 800b424:	ec5b ab19 	vmov	sl, fp, d9
 800b428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f2c0 8148 	blt.w	800b6c0 <_dtoa_r+0x700>
 800b430:	9a00      	ldr	r2, [sp, #0]
 800b432:	2a0e      	cmp	r2, #14
 800b434:	f300 8144 	bgt.w	800b6c0 <_dtoa_r+0x700>
 800b438:	4b67      	ldr	r3, [pc, #412]	; (800b5d8 <_dtoa_r+0x618>)
 800b43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b43e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b444:	2b00      	cmp	r3, #0
 800b446:	f280 80d5 	bge.w	800b5f4 <_dtoa_r+0x634>
 800b44a:	9b03      	ldr	r3, [sp, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f300 80d1 	bgt.w	800b5f4 <_dtoa_r+0x634>
 800b452:	f040 826f 	bne.w	800b934 <_dtoa_r+0x974>
 800b456:	4b65      	ldr	r3, [pc, #404]	; (800b5ec <_dtoa_r+0x62c>)
 800b458:	2200      	movs	r2, #0
 800b45a:	4640      	mov	r0, r8
 800b45c:	4649      	mov	r1, r9
 800b45e:	f7f5 f8cb 	bl	80005f8 <__aeabi_dmul>
 800b462:	4652      	mov	r2, sl
 800b464:	465b      	mov	r3, fp
 800b466:	f7f5 fb4d 	bl	8000b04 <__aeabi_dcmpge>
 800b46a:	9e03      	ldr	r6, [sp, #12]
 800b46c:	4637      	mov	r7, r6
 800b46e:	2800      	cmp	r0, #0
 800b470:	f040 8245 	bne.w	800b8fe <_dtoa_r+0x93e>
 800b474:	9d01      	ldr	r5, [sp, #4]
 800b476:	2331      	movs	r3, #49	; 0x31
 800b478:	f805 3b01 	strb.w	r3, [r5], #1
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	3301      	adds	r3, #1
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	e240      	b.n	800b906 <_dtoa_r+0x946>
 800b484:	07f2      	lsls	r2, r6, #31
 800b486:	d505      	bpl.n	800b494 <_dtoa_r+0x4d4>
 800b488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48c:	f7f5 f8b4 	bl	80005f8 <__aeabi_dmul>
 800b490:	3501      	adds	r5, #1
 800b492:	2301      	movs	r3, #1
 800b494:	1076      	asrs	r6, r6, #1
 800b496:	3708      	adds	r7, #8
 800b498:	e777      	b.n	800b38a <_dtoa_r+0x3ca>
 800b49a:	2502      	movs	r5, #2
 800b49c:	e779      	b.n	800b392 <_dtoa_r+0x3d2>
 800b49e:	9f00      	ldr	r7, [sp, #0]
 800b4a0:	9e03      	ldr	r6, [sp, #12]
 800b4a2:	e794      	b.n	800b3ce <_dtoa_r+0x40e>
 800b4a4:	9901      	ldr	r1, [sp, #4]
 800b4a6:	4b4c      	ldr	r3, [pc, #304]	; (800b5d8 <_dtoa_r+0x618>)
 800b4a8:	4431      	add	r1, r6
 800b4aa:	910d      	str	r1, [sp, #52]	; 0x34
 800b4ac:	9908      	ldr	r1, [sp, #32]
 800b4ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4b6:	2900      	cmp	r1, #0
 800b4b8:	d043      	beq.n	800b542 <_dtoa_r+0x582>
 800b4ba:	494d      	ldr	r1, [pc, #308]	; (800b5f0 <_dtoa_r+0x630>)
 800b4bc:	2000      	movs	r0, #0
 800b4be:	f7f5 f9c5 	bl	800084c <__aeabi_ddiv>
 800b4c2:	4652      	mov	r2, sl
 800b4c4:	465b      	mov	r3, fp
 800b4c6:	f7f4 fedf 	bl	8000288 <__aeabi_dsub>
 800b4ca:	9d01      	ldr	r5, [sp, #4]
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	468b      	mov	fp, r1
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	f7f5 fb40 	bl	8000b58 <__aeabi_d2iz>
 800b4d8:	4606      	mov	r6, r0
 800b4da:	f7f5 f823 	bl	8000524 <__aeabi_i2d>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	f7f4 fecf 	bl	8000288 <__aeabi_dsub>
 800b4ea:	3630      	adds	r6, #48	; 0x30
 800b4ec:	f805 6b01 	strb.w	r6, [r5], #1
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	465b      	mov	r3, fp
 800b4f4:	4680      	mov	r8, r0
 800b4f6:	4689      	mov	r9, r1
 800b4f8:	f7f5 faf0 	bl	8000adc <__aeabi_dcmplt>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d163      	bne.n	800b5c8 <_dtoa_r+0x608>
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	4936      	ldr	r1, [pc, #216]	; (800b5e0 <_dtoa_r+0x620>)
 800b506:	2000      	movs	r0, #0
 800b508:	f7f4 febe 	bl	8000288 <__aeabi_dsub>
 800b50c:	4652      	mov	r2, sl
 800b50e:	465b      	mov	r3, fp
 800b510:	f7f5 fae4 	bl	8000adc <__aeabi_dcmplt>
 800b514:	2800      	cmp	r0, #0
 800b516:	f040 80b5 	bne.w	800b684 <_dtoa_r+0x6c4>
 800b51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b51c:	429d      	cmp	r5, r3
 800b51e:	d081      	beq.n	800b424 <_dtoa_r+0x464>
 800b520:	4b30      	ldr	r3, [pc, #192]	; (800b5e4 <_dtoa_r+0x624>)
 800b522:	2200      	movs	r2, #0
 800b524:	4650      	mov	r0, sl
 800b526:	4659      	mov	r1, fp
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	4b2d      	ldr	r3, [pc, #180]	; (800b5e4 <_dtoa_r+0x624>)
 800b52e:	4682      	mov	sl, r0
 800b530:	468b      	mov	fp, r1
 800b532:	4640      	mov	r0, r8
 800b534:	4649      	mov	r1, r9
 800b536:	2200      	movs	r2, #0
 800b538:	f7f5 f85e 	bl	80005f8 <__aeabi_dmul>
 800b53c:	4680      	mov	r8, r0
 800b53e:	4689      	mov	r9, r1
 800b540:	e7c6      	b.n	800b4d0 <_dtoa_r+0x510>
 800b542:	4650      	mov	r0, sl
 800b544:	4659      	mov	r1, fp
 800b546:	f7f5 f857 	bl	80005f8 <__aeabi_dmul>
 800b54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b54c:	9d01      	ldr	r5, [sp, #4]
 800b54e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b550:	4682      	mov	sl, r0
 800b552:	468b      	mov	fp, r1
 800b554:	4649      	mov	r1, r9
 800b556:	4640      	mov	r0, r8
 800b558:	f7f5 fafe 	bl	8000b58 <__aeabi_d2iz>
 800b55c:	4606      	mov	r6, r0
 800b55e:	f7f4 ffe1 	bl	8000524 <__aeabi_i2d>
 800b562:	3630      	adds	r6, #48	; 0x30
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4640      	mov	r0, r8
 800b56a:	4649      	mov	r1, r9
 800b56c:	f7f4 fe8c 	bl	8000288 <__aeabi_dsub>
 800b570:	f805 6b01 	strb.w	r6, [r5], #1
 800b574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b576:	429d      	cmp	r5, r3
 800b578:	4680      	mov	r8, r0
 800b57a:	4689      	mov	r9, r1
 800b57c:	f04f 0200 	mov.w	r2, #0
 800b580:	d124      	bne.n	800b5cc <_dtoa_r+0x60c>
 800b582:	4b1b      	ldr	r3, [pc, #108]	; (800b5f0 <_dtoa_r+0x630>)
 800b584:	4650      	mov	r0, sl
 800b586:	4659      	mov	r1, fp
 800b588:	f7f4 fe80 	bl	800028c <__adddf3>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	4640      	mov	r0, r8
 800b592:	4649      	mov	r1, r9
 800b594:	f7f5 fac0 	bl	8000b18 <__aeabi_dcmpgt>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d173      	bne.n	800b684 <_dtoa_r+0x6c4>
 800b59c:	4652      	mov	r2, sl
 800b59e:	465b      	mov	r3, fp
 800b5a0:	4913      	ldr	r1, [pc, #76]	; (800b5f0 <_dtoa_r+0x630>)
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	f7f4 fe70 	bl	8000288 <__aeabi_dsub>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4640      	mov	r0, r8
 800b5ae:	4649      	mov	r1, r9
 800b5b0:	f7f5 fa94 	bl	8000adc <__aeabi_dcmplt>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f43f af35 	beq.w	800b424 <_dtoa_r+0x464>
 800b5ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5bc:	1e6b      	subs	r3, r5, #1
 800b5be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5c4:	2b30      	cmp	r3, #48	; 0x30
 800b5c6:	d0f8      	beq.n	800b5ba <_dtoa_r+0x5fa>
 800b5c8:	9700      	str	r7, [sp, #0]
 800b5ca:	e049      	b.n	800b660 <_dtoa_r+0x6a0>
 800b5cc:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <_dtoa_r+0x624>)
 800b5ce:	f7f5 f813 	bl	80005f8 <__aeabi_dmul>
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	4689      	mov	r9, r1
 800b5d6:	e7bd      	b.n	800b554 <_dtoa_r+0x594>
 800b5d8:	0800e2f0 	.word	0x0800e2f0
 800b5dc:	0800e2c8 	.word	0x0800e2c8
 800b5e0:	3ff00000 	.word	0x3ff00000
 800b5e4:	40240000 	.word	0x40240000
 800b5e8:	401c0000 	.word	0x401c0000
 800b5ec:	40140000 	.word	0x40140000
 800b5f0:	3fe00000 	.word	0x3fe00000
 800b5f4:	9d01      	ldr	r5, [sp, #4]
 800b5f6:	4656      	mov	r6, sl
 800b5f8:	465f      	mov	r7, fp
 800b5fa:	4642      	mov	r2, r8
 800b5fc:	464b      	mov	r3, r9
 800b5fe:	4630      	mov	r0, r6
 800b600:	4639      	mov	r1, r7
 800b602:	f7f5 f923 	bl	800084c <__aeabi_ddiv>
 800b606:	f7f5 faa7 	bl	8000b58 <__aeabi_d2iz>
 800b60a:	4682      	mov	sl, r0
 800b60c:	f7f4 ff8a 	bl	8000524 <__aeabi_i2d>
 800b610:	4642      	mov	r2, r8
 800b612:	464b      	mov	r3, r9
 800b614:	f7f4 fff0 	bl	80005f8 <__aeabi_dmul>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b624:	f7f4 fe30 	bl	8000288 <__aeabi_dsub>
 800b628:	f805 6b01 	strb.w	r6, [r5], #1
 800b62c:	9e01      	ldr	r6, [sp, #4]
 800b62e:	9f03      	ldr	r7, [sp, #12]
 800b630:	1bae      	subs	r6, r5, r6
 800b632:	42b7      	cmp	r7, r6
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	d135      	bne.n	800b6a6 <_dtoa_r+0x6e6>
 800b63a:	f7f4 fe27 	bl	800028c <__adddf3>
 800b63e:	4642      	mov	r2, r8
 800b640:	464b      	mov	r3, r9
 800b642:	4606      	mov	r6, r0
 800b644:	460f      	mov	r7, r1
 800b646:	f7f5 fa67 	bl	8000b18 <__aeabi_dcmpgt>
 800b64a:	b9d0      	cbnz	r0, 800b682 <_dtoa_r+0x6c2>
 800b64c:	4642      	mov	r2, r8
 800b64e:	464b      	mov	r3, r9
 800b650:	4630      	mov	r0, r6
 800b652:	4639      	mov	r1, r7
 800b654:	f7f5 fa38 	bl	8000ac8 <__aeabi_dcmpeq>
 800b658:	b110      	cbz	r0, 800b660 <_dtoa_r+0x6a0>
 800b65a:	f01a 0f01 	tst.w	sl, #1
 800b65e:	d110      	bne.n	800b682 <_dtoa_r+0x6c2>
 800b660:	4620      	mov	r0, r4
 800b662:	ee18 1a10 	vmov	r1, s16
 800b666:	f000 fd05 	bl	800c074 <_Bfree>
 800b66a:	2300      	movs	r3, #0
 800b66c:	9800      	ldr	r0, [sp, #0]
 800b66e:	702b      	strb	r3, [r5, #0]
 800b670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b672:	3001      	adds	r0, #1
 800b674:	6018      	str	r0, [r3, #0]
 800b676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f43f acf1 	beq.w	800b060 <_dtoa_r+0xa0>
 800b67e:	601d      	str	r5, [r3, #0]
 800b680:	e4ee      	b.n	800b060 <_dtoa_r+0xa0>
 800b682:	9f00      	ldr	r7, [sp, #0]
 800b684:	462b      	mov	r3, r5
 800b686:	461d      	mov	r5, r3
 800b688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b68c:	2a39      	cmp	r2, #57	; 0x39
 800b68e:	d106      	bne.n	800b69e <_dtoa_r+0x6de>
 800b690:	9a01      	ldr	r2, [sp, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d1f7      	bne.n	800b686 <_dtoa_r+0x6c6>
 800b696:	9901      	ldr	r1, [sp, #4]
 800b698:	2230      	movs	r2, #48	; 0x30
 800b69a:	3701      	adds	r7, #1
 800b69c:	700a      	strb	r2, [r1, #0]
 800b69e:	781a      	ldrb	r2, [r3, #0]
 800b6a0:	3201      	adds	r2, #1
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	e790      	b.n	800b5c8 <_dtoa_r+0x608>
 800b6a6:	4ba6      	ldr	r3, [pc, #664]	; (800b940 <_dtoa_r+0x980>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f7f4 ffa5 	bl	80005f8 <__aeabi_dmul>
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	f7f5 fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d09d      	beq.n	800b5fa <_dtoa_r+0x63a>
 800b6be:	e7cf      	b.n	800b660 <_dtoa_r+0x6a0>
 800b6c0:	9a08      	ldr	r2, [sp, #32]
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	f000 80d7 	beq.w	800b876 <_dtoa_r+0x8b6>
 800b6c8:	9a06      	ldr	r2, [sp, #24]
 800b6ca:	2a01      	cmp	r2, #1
 800b6cc:	f300 80ba 	bgt.w	800b844 <_dtoa_r+0x884>
 800b6d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6d2:	2a00      	cmp	r2, #0
 800b6d4:	f000 80b2 	beq.w	800b83c <_dtoa_r+0x87c>
 800b6d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6dc:	9e07      	ldr	r6, [sp, #28]
 800b6de:	9d04      	ldr	r5, [sp, #16]
 800b6e0:	9a04      	ldr	r2, [sp, #16]
 800b6e2:	441a      	add	r2, r3
 800b6e4:	9204      	str	r2, [sp, #16]
 800b6e6:	9a05      	ldr	r2, [sp, #20]
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	441a      	add	r2, r3
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	9205      	str	r2, [sp, #20]
 800b6f0:	f000 fd78 	bl	800c1e4 <__i2b>
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	dd0c      	ble.n	800b714 <_dtoa_r+0x754>
 800b6fa:	9b05      	ldr	r3, [sp, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd09      	ble.n	800b714 <_dtoa_r+0x754>
 800b700:	42ab      	cmp	r3, r5
 800b702:	9a04      	ldr	r2, [sp, #16]
 800b704:	bfa8      	it	ge
 800b706:	462b      	movge	r3, r5
 800b708:	1ad2      	subs	r2, r2, r3
 800b70a:	9204      	str	r2, [sp, #16]
 800b70c:	9a05      	ldr	r2, [sp, #20]
 800b70e:	1aed      	subs	r5, r5, r3
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	9b07      	ldr	r3, [sp, #28]
 800b716:	b31b      	cbz	r3, 800b760 <_dtoa_r+0x7a0>
 800b718:	9b08      	ldr	r3, [sp, #32]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 80af 	beq.w	800b87e <_dtoa_r+0x8be>
 800b720:	2e00      	cmp	r6, #0
 800b722:	dd13      	ble.n	800b74c <_dtoa_r+0x78c>
 800b724:	4639      	mov	r1, r7
 800b726:	4632      	mov	r2, r6
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 fe1b 	bl	800c364 <__pow5mult>
 800b72e:	ee18 2a10 	vmov	r2, s16
 800b732:	4601      	mov	r1, r0
 800b734:	4607      	mov	r7, r0
 800b736:	4620      	mov	r0, r4
 800b738:	f000 fd6a 	bl	800c210 <__multiply>
 800b73c:	ee18 1a10 	vmov	r1, s16
 800b740:	4680      	mov	r8, r0
 800b742:	4620      	mov	r0, r4
 800b744:	f000 fc96 	bl	800c074 <_Bfree>
 800b748:	ee08 8a10 	vmov	s16, r8
 800b74c:	9b07      	ldr	r3, [sp, #28]
 800b74e:	1b9a      	subs	r2, r3, r6
 800b750:	d006      	beq.n	800b760 <_dtoa_r+0x7a0>
 800b752:	ee18 1a10 	vmov	r1, s16
 800b756:	4620      	mov	r0, r4
 800b758:	f000 fe04 	bl	800c364 <__pow5mult>
 800b75c:	ee08 0a10 	vmov	s16, r0
 800b760:	2101      	movs	r1, #1
 800b762:	4620      	mov	r0, r4
 800b764:	f000 fd3e 	bl	800c1e4 <__i2b>
 800b768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	4606      	mov	r6, r0
 800b76e:	f340 8088 	ble.w	800b882 <_dtoa_r+0x8c2>
 800b772:	461a      	mov	r2, r3
 800b774:	4601      	mov	r1, r0
 800b776:	4620      	mov	r0, r4
 800b778:	f000 fdf4 	bl	800c364 <__pow5mult>
 800b77c:	9b06      	ldr	r3, [sp, #24]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	4606      	mov	r6, r0
 800b782:	f340 8081 	ble.w	800b888 <_dtoa_r+0x8c8>
 800b786:	f04f 0800 	mov.w	r8, #0
 800b78a:	6933      	ldr	r3, [r6, #16]
 800b78c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b790:	6918      	ldr	r0, [r3, #16]
 800b792:	f000 fcd7 	bl	800c144 <__hi0bits>
 800b796:	f1c0 0020 	rsb	r0, r0, #32
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	4418      	add	r0, r3
 800b79e:	f010 001f 	ands.w	r0, r0, #31
 800b7a2:	f000 8092 	beq.w	800b8ca <_dtoa_r+0x90a>
 800b7a6:	f1c0 0320 	rsb	r3, r0, #32
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	f340 808a 	ble.w	800b8c4 <_dtoa_r+0x904>
 800b7b0:	f1c0 001c 	rsb	r0, r0, #28
 800b7b4:	9b04      	ldr	r3, [sp, #16]
 800b7b6:	4403      	add	r3, r0
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	9b05      	ldr	r3, [sp, #20]
 800b7bc:	4403      	add	r3, r0
 800b7be:	4405      	add	r5, r0
 800b7c0:	9305      	str	r3, [sp, #20]
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dd07      	ble.n	800b7d8 <_dtoa_r+0x818>
 800b7c8:	ee18 1a10 	vmov	r1, s16
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 fe22 	bl	800c418 <__lshift>
 800b7d4:	ee08 0a10 	vmov	s16, r0
 800b7d8:	9b05      	ldr	r3, [sp, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dd05      	ble.n	800b7ea <_dtoa_r+0x82a>
 800b7de:	4631      	mov	r1, r6
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fe18 	bl	800c418 <__lshift>
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d06e      	beq.n	800b8ce <_dtoa_r+0x90e>
 800b7f0:	ee18 0a10 	vmov	r0, s16
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	f000 fe7f 	bl	800c4f8 <__mcmp>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	da67      	bge.n	800b8ce <_dtoa_r+0x90e>
 800b7fe:	9b00      	ldr	r3, [sp, #0]
 800b800:	3b01      	subs	r3, #1
 800b802:	ee18 1a10 	vmov	r1, s16
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	220a      	movs	r2, #10
 800b80a:	2300      	movs	r3, #0
 800b80c:	4620      	mov	r0, r4
 800b80e:	f000 fc53 	bl	800c0b8 <__multadd>
 800b812:	9b08      	ldr	r3, [sp, #32]
 800b814:	ee08 0a10 	vmov	s16, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 81b1 	beq.w	800bb80 <_dtoa_r+0xbc0>
 800b81e:	2300      	movs	r3, #0
 800b820:	4639      	mov	r1, r7
 800b822:	220a      	movs	r2, #10
 800b824:	4620      	mov	r0, r4
 800b826:	f000 fc47 	bl	800c0b8 <__multadd>
 800b82a:	9b02      	ldr	r3, [sp, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	4607      	mov	r7, r0
 800b830:	f300 808e 	bgt.w	800b950 <_dtoa_r+0x990>
 800b834:	9b06      	ldr	r3, [sp, #24]
 800b836:	2b02      	cmp	r3, #2
 800b838:	dc51      	bgt.n	800b8de <_dtoa_r+0x91e>
 800b83a:	e089      	b.n	800b950 <_dtoa_r+0x990>
 800b83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b83e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b842:	e74b      	b.n	800b6dc <_dtoa_r+0x71c>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	1e5e      	subs	r6, r3, #1
 800b848:	9b07      	ldr	r3, [sp, #28]
 800b84a:	42b3      	cmp	r3, r6
 800b84c:	bfbf      	itttt	lt
 800b84e:	9b07      	ldrlt	r3, [sp, #28]
 800b850:	9607      	strlt	r6, [sp, #28]
 800b852:	1af2      	sublt	r2, r6, r3
 800b854:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b856:	bfb6      	itet	lt
 800b858:	189b      	addlt	r3, r3, r2
 800b85a:	1b9e      	subge	r6, r3, r6
 800b85c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b85e:	9b03      	ldr	r3, [sp, #12]
 800b860:	bfb8      	it	lt
 800b862:	2600      	movlt	r6, #0
 800b864:	2b00      	cmp	r3, #0
 800b866:	bfb7      	itett	lt
 800b868:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b86c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b870:	1a9d      	sublt	r5, r3, r2
 800b872:	2300      	movlt	r3, #0
 800b874:	e734      	b.n	800b6e0 <_dtoa_r+0x720>
 800b876:	9e07      	ldr	r6, [sp, #28]
 800b878:	9d04      	ldr	r5, [sp, #16]
 800b87a:	9f08      	ldr	r7, [sp, #32]
 800b87c:	e73b      	b.n	800b6f6 <_dtoa_r+0x736>
 800b87e:	9a07      	ldr	r2, [sp, #28]
 800b880:	e767      	b.n	800b752 <_dtoa_r+0x792>
 800b882:	9b06      	ldr	r3, [sp, #24]
 800b884:	2b01      	cmp	r3, #1
 800b886:	dc18      	bgt.n	800b8ba <_dtoa_r+0x8fa>
 800b888:	f1ba 0f00 	cmp.w	sl, #0
 800b88c:	d115      	bne.n	800b8ba <_dtoa_r+0x8fa>
 800b88e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b892:	b993      	cbnz	r3, 800b8ba <_dtoa_r+0x8fa>
 800b894:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b898:	0d1b      	lsrs	r3, r3, #20
 800b89a:	051b      	lsls	r3, r3, #20
 800b89c:	b183      	cbz	r3, 800b8c0 <_dtoa_r+0x900>
 800b89e:	9b04      	ldr	r3, [sp, #16]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	9304      	str	r3, [sp, #16]
 800b8a4:	9b05      	ldr	r3, [sp, #20]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	9305      	str	r3, [sp, #20]
 800b8aa:	f04f 0801 	mov.w	r8, #1
 800b8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f47f af6a 	bne.w	800b78a <_dtoa_r+0x7ca>
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	e76f      	b.n	800b79a <_dtoa_r+0x7da>
 800b8ba:	f04f 0800 	mov.w	r8, #0
 800b8be:	e7f6      	b.n	800b8ae <_dtoa_r+0x8ee>
 800b8c0:	4698      	mov	r8, r3
 800b8c2:	e7f4      	b.n	800b8ae <_dtoa_r+0x8ee>
 800b8c4:	f43f af7d 	beq.w	800b7c2 <_dtoa_r+0x802>
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	301c      	adds	r0, #28
 800b8cc:	e772      	b.n	800b7b4 <_dtoa_r+0x7f4>
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	dc37      	bgt.n	800b944 <_dtoa_r+0x984>
 800b8d4:	9b06      	ldr	r3, [sp, #24]
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	dd34      	ble.n	800b944 <_dtoa_r+0x984>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	9302      	str	r3, [sp, #8]
 800b8de:	9b02      	ldr	r3, [sp, #8]
 800b8e0:	b96b      	cbnz	r3, 800b8fe <_dtoa_r+0x93e>
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	2205      	movs	r2, #5
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 fbe6 	bl	800c0b8 <__multadd>
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	ee18 0a10 	vmov	r0, s16
 800b8f4:	f000 fe00 	bl	800c4f8 <__mcmp>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	f73f adbb 	bgt.w	800b474 <_dtoa_r+0x4b4>
 800b8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b900:	9d01      	ldr	r5, [sp, #4]
 800b902:	43db      	mvns	r3, r3
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	f04f 0800 	mov.w	r8, #0
 800b90a:	4631      	mov	r1, r6
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 fbb1 	bl	800c074 <_Bfree>
 800b912:	2f00      	cmp	r7, #0
 800b914:	f43f aea4 	beq.w	800b660 <_dtoa_r+0x6a0>
 800b918:	f1b8 0f00 	cmp.w	r8, #0
 800b91c:	d005      	beq.n	800b92a <_dtoa_r+0x96a>
 800b91e:	45b8      	cmp	r8, r7
 800b920:	d003      	beq.n	800b92a <_dtoa_r+0x96a>
 800b922:	4641      	mov	r1, r8
 800b924:	4620      	mov	r0, r4
 800b926:	f000 fba5 	bl	800c074 <_Bfree>
 800b92a:	4639      	mov	r1, r7
 800b92c:	4620      	mov	r0, r4
 800b92e:	f000 fba1 	bl	800c074 <_Bfree>
 800b932:	e695      	b.n	800b660 <_dtoa_r+0x6a0>
 800b934:	2600      	movs	r6, #0
 800b936:	4637      	mov	r7, r6
 800b938:	e7e1      	b.n	800b8fe <_dtoa_r+0x93e>
 800b93a:	9700      	str	r7, [sp, #0]
 800b93c:	4637      	mov	r7, r6
 800b93e:	e599      	b.n	800b474 <_dtoa_r+0x4b4>
 800b940:	40240000 	.word	0x40240000
 800b944:	9b08      	ldr	r3, [sp, #32]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 80ca 	beq.w	800bae0 <_dtoa_r+0xb20>
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	9302      	str	r3, [sp, #8]
 800b950:	2d00      	cmp	r5, #0
 800b952:	dd05      	ble.n	800b960 <_dtoa_r+0x9a0>
 800b954:	4639      	mov	r1, r7
 800b956:	462a      	mov	r2, r5
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 fd5d 	bl	800c418 <__lshift>
 800b95e:	4607      	mov	r7, r0
 800b960:	f1b8 0f00 	cmp.w	r8, #0
 800b964:	d05b      	beq.n	800ba1e <_dtoa_r+0xa5e>
 800b966:	6879      	ldr	r1, [r7, #4]
 800b968:	4620      	mov	r0, r4
 800b96a:	f000 fb43 	bl	800bff4 <_Balloc>
 800b96e:	4605      	mov	r5, r0
 800b970:	b928      	cbnz	r0, 800b97e <_dtoa_r+0x9be>
 800b972:	4b87      	ldr	r3, [pc, #540]	; (800bb90 <_dtoa_r+0xbd0>)
 800b974:	4602      	mov	r2, r0
 800b976:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b97a:	f7ff bb3b 	b.w	800aff4 <_dtoa_r+0x34>
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	3202      	adds	r2, #2
 800b982:	0092      	lsls	r2, r2, #2
 800b984:	f107 010c 	add.w	r1, r7, #12
 800b988:	300c      	adds	r0, #12
 800b98a:	f7fe fc9f 	bl	800a2cc <memcpy>
 800b98e:	2201      	movs	r2, #1
 800b990:	4629      	mov	r1, r5
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fd40 	bl	800c418 <__lshift>
 800b998:	9b01      	ldr	r3, [sp, #4]
 800b99a:	f103 0901 	add.w	r9, r3, #1
 800b99e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	9305      	str	r3, [sp, #20]
 800b9a6:	f00a 0301 	and.w	r3, sl, #1
 800b9aa:	46b8      	mov	r8, r7
 800b9ac:	9304      	str	r3, [sp, #16]
 800b9ae:	4607      	mov	r7, r0
 800b9b0:	4631      	mov	r1, r6
 800b9b2:	ee18 0a10 	vmov	r0, s16
 800b9b6:	f7ff fa77 	bl	800aea8 <quorem>
 800b9ba:	4641      	mov	r1, r8
 800b9bc:	9002      	str	r0, [sp, #8]
 800b9be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9c2:	ee18 0a10 	vmov	r0, s16
 800b9c6:	f000 fd97 	bl	800c4f8 <__mcmp>
 800b9ca:	463a      	mov	r2, r7
 800b9cc:	9003      	str	r0, [sp, #12]
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 fdad 	bl	800c530 <__mdiff>
 800b9d6:	68c2      	ldr	r2, [r0, #12]
 800b9d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b9dc:	4605      	mov	r5, r0
 800b9de:	bb02      	cbnz	r2, 800ba22 <_dtoa_r+0xa62>
 800b9e0:	4601      	mov	r1, r0
 800b9e2:	ee18 0a10 	vmov	r0, s16
 800b9e6:	f000 fd87 	bl	800c4f8 <__mcmp>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	9207      	str	r2, [sp, #28]
 800b9f2:	f000 fb3f 	bl	800c074 <_Bfree>
 800b9f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b9fa:	ea43 0102 	orr.w	r1, r3, r2
 800b9fe:	9b04      	ldr	r3, [sp, #16]
 800ba00:	430b      	orrs	r3, r1
 800ba02:	464d      	mov	r5, r9
 800ba04:	d10f      	bne.n	800ba26 <_dtoa_r+0xa66>
 800ba06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba0a:	d02a      	beq.n	800ba62 <_dtoa_r+0xaa2>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	dd02      	ble.n	800ba18 <_dtoa_r+0xa58>
 800ba12:	9b02      	ldr	r3, [sp, #8]
 800ba14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba18:	f88b a000 	strb.w	sl, [fp]
 800ba1c:	e775      	b.n	800b90a <_dtoa_r+0x94a>
 800ba1e:	4638      	mov	r0, r7
 800ba20:	e7ba      	b.n	800b998 <_dtoa_r+0x9d8>
 800ba22:	2201      	movs	r2, #1
 800ba24:	e7e2      	b.n	800b9ec <_dtoa_r+0xa2c>
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	db04      	blt.n	800ba36 <_dtoa_r+0xa76>
 800ba2c:	9906      	ldr	r1, [sp, #24]
 800ba2e:	430b      	orrs	r3, r1
 800ba30:	9904      	ldr	r1, [sp, #16]
 800ba32:	430b      	orrs	r3, r1
 800ba34:	d122      	bne.n	800ba7c <_dtoa_r+0xabc>
 800ba36:	2a00      	cmp	r2, #0
 800ba38:	ddee      	ble.n	800ba18 <_dtoa_r+0xa58>
 800ba3a:	ee18 1a10 	vmov	r1, s16
 800ba3e:	2201      	movs	r2, #1
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fce9 	bl	800c418 <__lshift>
 800ba46:	4631      	mov	r1, r6
 800ba48:	ee08 0a10 	vmov	s16, r0
 800ba4c:	f000 fd54 	bl	800c4f8 <__mcmp>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	dc03      	bgt.n	800ba5c <_dtoa_r+0xa9c>
 800ba54:	d1e0      	bne.n	800ba18 <_dtoa_r+0xa58>
 800ba56:	f01a 0f01 	tst.w	sl, #1
 800ba5a:	d0dd      	beq.n	800ba18 <_dtoa_r+0xa58>
 800ba5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba60:	d1d7      	bne.n	800ba12 <_dtoa_r+0xa52>
 800ba62:	2339      	movs	r3, #57	; 0x39
 800ba64:	f88b 3000 	strb.w	r3, [fp]
 800ba68:	462b      	mov	r3, r5
 800ba6a:	461d      	mov	r5, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba72:	2a39      	cmp	r2, #57	; 0x39
 800ba74:	d071      	beq.n	800bb5a <_dtoa_r+0xb9a>
 800ba76:	3201      	adds	r2, #1
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	e746      	b.n	800b90a <_dtoa_r+0x94a>
 800ba7c:	2a00      	cmp	r2, #0
 800ba7e:	dd07      	ble.n	800ba90 <_dtoa_r+0xad0>
 800ba80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba84:	d0ed      	beq.n	800ba62 <_dtoa_r+0xaa2>
 800ba86:	f10a 0301 	add.w	r3, sl, #1
 800ba8a:	f88b 3000 	strb.w	r3, [fp]
 800ba8e:	e73c      	b.n	800b90a <_dtoa_r+0x94a>
 800ba90:	9b05      	ldr	r3, [sp, #20]
 800ba92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ba96:	4599      	cmp	r9, r3
 800ba98:	d047      	beq.n	800bb2a <_dtoa_r+0xb6a>
 800ba9a:	ee18 1a10 	vmov	r1, s16
 800ba9e:	2300      	movs	r3, #0
 800baa0:	220a      	movs	r2, #10
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fb08 	bl	800c0b8 <__multadd>
 800baa8:	45b8      	cmp	r8, r7
 800baaa:	ee08 0a10 	vmov	s16, r0
 800baae:	f04f 0300 	mov.w	r3, #0
 800bab2:	f04f 020a 	mov.w	r2, #10
 800bab6:	4641      	mov	r1, r8
 800bab8:	4620      	mov	r0, r4
 800baba:	d106      	bne.n	800baca <_dtoa_r+0xb0a>
 800babc:	f000 fafc 	bl	800c0b8 <__multadd>
 800bac0:	4680      	mov	r8, r0
 800bac2:	4607      	mov	r7, r0
 800bac4:	f109 0901 	add.w	r9, r9, #1
 800bac8:	e772      	b.n	800b9b0 <_dtoa_r+0x9f0>
 800baca:	f000 faf5 	bl	800c0b8 <__multadd>
 800bace:	4639      	mov	r1, r7
 800bad0:	4680      	mov	r8, r0
 800bad2:	2300      	movs	r3, #0
 800bad4:	220a      	movs	r2, #10
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 faee 	bl	800c0b8 <__multadd>
 800badc:	4607      	mov	r7, r0
 800bade:	e7f1      	b.n	800bac4 <_dtoa_r+0xb04>
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	9302      	str	r3, [sp, #8]
 800bae4:	9d01      	ldr	r5, [sp, #4]
 800bae6:	ee18 0a10 	vmov	r0, s16
 800baea:	4631      	mov	r1, r6
 800baec:	f7ff f9dc 	bl	800aea8 <quorem>
 800baf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	f805 ab01 	strb.w	sl, [r5], #1
 800bafa:	1aea      	subs	r2, r5, r3
 800bafc:	9b02      	ldr	r3, [sp, #8]
 800bafe:	4293      	cmp	r3, r2
 800bb00:	dd09      	ble.n	800bb16 <_dtoa_r+0xb56>
 800bb02:	ee18 1a10 	vmov	r1, s16
 800bb06:	2300      	movs	r3, #0
 800bb08:	220a      	movs	r2, #10
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 fad4 	bl	800c0b8 <__multadd>
 800bb10:	ee08 0a10 	vmov	s16, r0
 800bb14:	e7e7      	b.n	800bae6 <_dtoa_r+0xb26>
 800bb16:	9b02      	ldr	r3, [sp, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	bfc8      	it	gt
 800bb1c:	461d      	movgt	r5, r3
 800bb1e:	9b01      	ldr	r3, [sp, #4]
 800bb20:	bfd8      	it	le
 800bb22:	2501      	movle	r5, #1
 800bb24:	441d      	add	r5, r3
 800bb26:	f04f 0800 	mov.w	r8, #0
 800bb2a:	ee18 1a10 	vmov	r1, s16
 800bb2e:	2201      	movs	r2, #1
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 fc71 	bl	800c418 <__lshift>
 800bb36:	4631      	mov	r1, r6
 800bb38:	ee08 0a10 	vmov	s16, r0
 800bb3c:	f000 fcdc 	bl	800c4f8 <__mcmp>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	dc91      	bgt.n	800ba68 <_dtoa_r+0xaa8>
 800bb44:	d102      	bne.n	800bb4c <_dtoa_r+0xb8c>
 800bb46:	f01a 0f01 	tst.w	sl, #1
 800bb4a:	d18d      	bne.n	800ba68 <_dtoa_r+0xaa8>
 800bb4c:	462b      	mov	r3, r5
 800bb4e:	461d      	mov	r5, r3
 800bb50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb54:	2a30      	cmp	r2, #48	; 0x30
 800bb56:	d0fa      	beq.n	800bb4e <_dtoa_r+0xb8e>
 800bb58:	e6d7      	b.n	800b90a <_dtoa_r+0x94a>
 800bb5a:	9a01      	ldr	r2, [sp, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d184      	bne.n	800ba6a <_dtoa_r+0xaaa>
 800bb60:	9b00      	ldr	r3, [sp, #0]
 800bb62:	3301      	adds	r3, #1
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	2331      	movs	r3, #49	; 0x31
 800bb68:	7013      	strb	r3, [r2, #0]
 800bb6a:	e6ce      	b.n	800b90a <_dtoa_r+0x94a>
 800bb6c:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <_dtoa_r+0xbd4>)
 800bb6e:	f7ff ba95 	b.w	800b09c <_dtoa_r+0xdc>
 800bb72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f47f aa6e 	bne.w	800b056 <_dtoa_r+0x96>
 800bb7a:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <_dtoa_r+0xbd8>)
 800bb7c:	f7ff ba8e 	b.w	800b09c <_dtoa_r+0xdc>
 800bb80:	9b02      	ldr	r3, [sp, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	dcae      	bgt.n	800bae4 <_dtoa_r+0xb24>
 800bb86:	9b06      	ldr	r3, [sp, #24]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	f73f aea8 	bgt.w	800b8de <_dtoa_r+0x91e>
 800bb8e:	e7a9      	b.n	800bae4 <_dtoa_r+0xb24>
 800bb90:	0800e1fb 	.word	0x0800e1fb
 800bb94:	0800e158 	.word	0x0800e158
 800bb98:	0800e17c 	.word	0x0800e17c

0800bb9c <__sflush_r>:
 800bb9c:	898a      	ldrh	r2, [r1, #12]
 800bb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba2:	4605      	mov	r5, r0
 800bba4:	0710      	lsls	r0, r2, #28
 800bba6:	460c      	mov	r4, r1
 800bba8:	d458      	bmi.n	800bc5c <__sflush_r+0xc0>
 800bbaa:	684b      	ldr	r3, [r1, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	dc05      	bgt.n	800bbbc <__sflush_r+0x20>
 800bbb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	dc02      	bgt.n	800bbbc <__sflush_r+0x20>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	d0f9      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbc8:	682f      	ldr	r7, [r5, #0]
 800bbca:	602b      	str	r3, [r5, #0]
 800bbcc:	d032      	beq.n	800bc34 <__sflush_r+0x98>
 800bbce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	075a      	lsls	r2, r3, #29
 800bbd4:	d505      	bpl.n	800bbe2 <__sflush_r+0x46>
 800bbd6:	6863      	ldr	r3, [r4, #4]
 800bbd8:	1ac0      	subs	r0, r0, r3
 800bbda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbdc:	b10b      	cbz	r3, 800bbe2 <__sflush_r+0x46>
 800bbde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbe0:	1ac0      	subs	r0, r0, r3
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbe8:	6a21      	ldr	r1, [r4, #32]
 800bbea:	4628      	mov	r0, r5
 800bbec:	47b0      	blx	r6
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	d106      	bne.n	800bc02 <__sflush_r+0x66>
 800bbf4:	6829      	ldr	r1, [r5, #0]
 800bbf6:	291d      	cmp	r1, #29
 800bbf8:	d82c      	bhi.n	800bc54 <__sflush_r+0xb8>
 800bbfa:	4a2a      	ldr	r2, [pc, #168]	; (800bca4 <__sflush_r+0x108>)
 800bbfc:	40ca      	lsrs	r2, r1
 800bbfe:	07d6      	lsls	r6, r2, #31
 800bc00:	d528      	bpl.n	800bc54 <__sflush_r+0xb8>
 800bc02:	2200      	movs	r2, #0
 800bc04:	6062      	str	r2, [r4, #4]
 800bc06:	04d9      	lsls	r1, r3, #19
 800bc08:	6922      	ldr	r2, [r4, #16]
 800bc0a:	6022      	str	r2, [r4, #0]
 800bc0c:	d504      	bpl.n	800bc18 <__sflush_r+0x7c>
 800bc0e:	1c42      	adds	r2, r0, #1
 800bc10:	d101      	bne.n	800bc16 <__sflush_r+0x7a>
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	b903      	cbnz	r3, 800bc18 <__sflush_r+0x7c>
 800bc16:	6560      	str	r0, [r4, #84]	; 0x54
 800bc18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc1a:	602f      	str	r7, [r5, #0]
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	d0ca      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bc20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc24:	4299      	cmp	r1, r3
 800bc26:	d002      	beq.n	800bc2e <__sflush_r+0x92>
 800bc28:	4628      	mov	r0, r5
 800bc2a:	f000 fd7d 	bl	800c728 <_free_r>
 800bc2e:	2000      	movs	r0, #0
 800bc30:	6360      	str	r0, [r4, #52]	; 0x34
 800bc32:	e7c1      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc34:	6a21      	ldr	r1, [r4, #32]
 800bc36:	2301      	movs	r3, #1
 800bc38:	4628      	mov	r0, r5
 800bc3a:	47b0      	blx	r6
 800bc3c:	1c41      	adds	r1, r0, #1
 800bc3e:	d1c7      	bne.n	800bbd0 <__sflush_r+0x34>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0c4      	beq.n	800bbd0 <__sflush_r+0x34>
 800bc46:	2b1d      	cmp	r3, #29
 800bc48:	d001      	beq.n	800bc4e <__sflush_r+0xb2>
 800bc4a:	2b16      	cmp	r3, #22
 800bc4c:	d101      	bne.n	800bc52 <__sflush_r+0xb6>
 800bc4e:	602f      	str	r7, [r5, #0]
 800bc50:	e7b1      	b.n	800bbb6 <__sflush_r+0x1a>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	e7ad      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc5c:	690f      	ldr	r7, [r1, #16]
 800bc5e:	2f00      	cmp	r7, #0
 800bc60:	d0a9      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bc62:	0793      	lsls	r3, r2, #30
 800bc64:	680e      	ldr	r6, [r1, #0]
 800bc66:	bf08      	it	eq
 800bc68:	694b      	ldreq	r3, [r1, #20]
 800bc6a:	600f      	str	r7, [r1, #0]
 800bc6c:	bf18      	it	ne
 800bc6e:	2300      	movne	r3, #0
 800bc70:	eba6 0807 	sub.w	r8, r6, r7
 800bc74:	608b      	str	r3, [r1, #8]
 800bc76:	f1b8 0f00 	cmp.w	r8, #0
 800bc7a:	dd9c      	ble.n	800bbb6 <__sflush_r+0x1a>
 800bc7c:	6a21      	ldr	r1, [r4, #32]
 800bc7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc80:	4643      	mov	r3, r8
 800bc82:	463a      	mov	r2, r7
 800bc84:	4628      	mov	r0, r5
 800bc86:	47b0      	blx	r6
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	dc06      	bgt.n	800bc9a <__sflush_r+0xfe>
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc92:	81a3      	strh	r3, [r4, #12]
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	e78e      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc9a:	4407      	add	r7, r0
 800bc9c:	eba8 0800 	sub.w	r8, r8, r0
 800bca0:	e7e9      	b.n	800bc76 <__sflush_r+0xda>
 800bca2:	bf00      	nop
 800bca4:	20400001 	.word	0x20400001

0800bca8 <_fflush_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	690b      	ldr	r3, [r1, #16]
 800bcac:	4605      	mov	r5, r0
 800bcae:	460c      	mov	r4, r1
 800bcb0:	b913      	cbnz	r3, 800bcb8 <_fflush_r+0x10>
 800bcb2:	2500      	movs	r5, #0
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	b118      	cbz	r0, 800bcc2 <_fflush_r+0x1a>
 800bcba:	6983      	ldr	r3, [r0, #24]
 800bcbc:	b90b      	cbnz	r3, 800bcc2 <_fflush_r+0x1a>
 800bcbe:	f000 f887 	bl	800bdd0 <__sinit>
 800bcc2:	4b14      	ldr	r3, [pc, #80]	; (800bd14 <_fflush_r+0x6c>)
 800bcc4:	429c      	cmp	r4, r3
 800bcc6:	d11b      	bne.n	800bd00 <_fflush_r+0x58>
 800bcc8:	686c      	ldr	r4, [r5, #4]
 800bcca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d0ef      	beq.n	800bcb2 <_fflush_r+0xa>
 800bcd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcd4:	07d0      	lsls	r0, r2, #31
 800bcd6:	d404      	bmi.n	800bce2 <_fflush_r+0x3a>
 800bcd8:	0599      	lsls	r1, r3, #22
 800bcda:	d402      	bmi.n	800bce2 <_fflush_r+0x3a>
 800bcdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcde:	f000 f91a 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800bce2:	4628      	mov	r0, r5
 800bce4:	4621      	mov	r1, r4
 800bce6:	f7ff ff59 	bl	800bb9c <__sflush_r>
 800bcea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcec:	07da      	lsls	r2, r3, #31
 800bcee:	4605      	mov	r5, r0
 800bcf0:	d4e0      	bmi.n	800bcb4 <_fflush_r+0xc>
 800bcf2:	89a3      	ldrh	r3, [r4, #12]
 800bcf4:	059b      	lsls	r3, r3, #22
 800bcf6:	d4dd      	bmi.n	800bcb4 <_fflush_r+0xc>
 800bcf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfa:	f000 f90d 	bl	800bf18 <__retarget_lock_release_recursive>
 800bcfe:	e7d9      	b.n	800bcb4 <_fflush_r+0xc>
 800bd00:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <_fflush_r+0x70>)
 800bd02:	429c      	cmp	r4, r3
 800bd04:	d101      	bne.n	800bd0a <_fflush_r+0x62>
 800bd06:	68ac      	ldr	r4, [r5, #8]
 800bd08:	e7df      	b.n	800bcca <_fflush_r+0x22>
 800bd0a:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <_fflush_r+0x74>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	bf08      	it	eq
 800bd10:	68ec      	ldreq	r4, [r5, #12]
 800bd12:	e7da      	b.n	800bcca <_fflush_r+0x22>
 800bd14:	0800e22c 	.word	0x0800e22c
 800bd18:	0800e24c 	.word	0x0800e24c
 800bd1c:	0800e20c 	.word	0x0800e20c

0800bd20 <std>:
 800bd20:	2300      	movs	r3, #0
 800bd22:	b510      	push	{r4, lr}
 800bd24:	4604      	mov	r4, r0
 800bd26:	e9c0 3300 	strd	r3, r3, [r0]
 800bd2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd2e:	6083      	str	r3, [r0, #8]
 800bd30:	8181      	strh	r1, [r0, #12]
 800bd32:	6643      	str	r3, [r0, #100]	; 0x64
 800bd34:	81c2      	strh	r2, [r0, #14]
 800bd36:	6183      	str	r3, [r0, #24]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	2208      	movs	r2, #8
 800bd3c:	305c      	adds	r0, #92	; 0x5c
 800bd3e:	f7fe fad3 	bl	800a2e8 <memset>
 800bd42:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <std+0x38>)
 800bd44:	6263      	str	r3, [r4, #36]	; 0x24
 800bd46:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <std+0x3c>)
 800bd48:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd4a:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <std+0x40>)
 800bd4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd4e:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <std+0x44>)
 800bd50:	6224      	str	r4, [r4, #32]
 800bd52:	6323      	str	r3, [r4, #48]	; 0x30
 800bd54:	bd10      	pop	{r4, pc}
 800bd56:	bf00      	nop
 800bd58:	0800ce75 	.word	0x0800ce75
 800bd5c:	0800ce97 	.word	0x0800ce97
 800bd60:	0800cecf 	.word	0x0800cecf
 800bd64:	0800cef3 	.word	0x0800cef3

0800bd68 <_cleanup_r>:
 800bd68:	4901      	ldr	r1, [pc, #4]	; (800bd70 <_cleanup_r+0x8>)
 800bd6a:	f000 b8af 	b.w	800becc <_fwalk_reent>
 800bd6e:	bf00      	nop
 800bd70:	0800bca9 	.word	0x0800bca9

0800bd74 <__sfmoreglue>:
 800bd74:	b570      	push	{r4, r5, r6, lr}
 800bd76:	2268      	movs	r2, #104	; 0x68
 800bd78:	1e4d      	subs	r5, r1, #1
 800bd7a:	4355      	muls	r5, r2
 800bd7c:	460e      	mov	r6, r1
 800bd7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd82:	f000 fd3d 	bl	800c800 <_malloc_r>
 800bd86:	4604      	mov	r4, r0
 800bd88:	b140      	cbz	r0, 800bd9c <__sfmoreglue+0x28>
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	e9c0 1600 	strd	r1, r6, [r0]
 800bd90:	300c      	adds	r0, #12
 800bd92:	60a0      	str	r0, [r4, #8]
 800bd94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd98:	f7fe faa6 	bl	800a2e8 <memset>
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}

0800bda0 <__sfp_lock_acquire>:
 800bda0:	4801      	ldr	r0, [pc, #4]	; (800bda8 <__sfp_lock_acquire+0x8>)
 800bda2:	f000 b8b8 	b.w	800bf16 <__retarget_lock_acquire_recursive>
 800bda6:	bf00      	nop
 800bda8:	20002aa9 	.word	0x20002aa9

0800bdac <__sfp_lock_release>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__sfp_lock_release+0x8>)
 800bdae:	f000 b8b3 	b.w	800bf18 <__retarget_lock_release_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	20002aa9 	.word	0x20002aa9

0800bdb8 <__sinit_lock_acquire>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	; (800bdc0 <__sinit_lock_acquire+0x8>)
 800bdba:	f000 b8ac 	b.w	800bf16 <__retarget_lock_acquire_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	20002aaa 	.word	0x20002aaa

0800bdc4 <__sinit_lock_release>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	; (800bdcc <__sinit_lock_release+0x8>)
 800bdc6:	f000 b8a7 	b.w	800bf18 <__retarget_lock_release_recursive>
 800bdca:	bf00      	nop
 800bdcc:	20002aaa 	.word	0x20002aaa

0800bdd0 <__sinit>:
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	f7ff fff0 	bl	800bdb8 <__sinit_lock_acquire>
 800bdd8:	69a3      	ldr	r3, [r4, #24]
 800bdda:	b11b      	cbz	r3, 800bde4 <__sinit+0x14>
 800bddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde0:	f7ff bff0 	b.w	800bdc4 <__sinit_lock_release>
 800bde4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bde8:	6523      	str	r3, [r4, #80]	; 0x50
 800bdea:	4b13      	ldr	r3, [pc, #76]	; (800be38 <__sinit+0x68>)
 800bdec:	4a13      	ldr	r2, [pc, #76]	; (800be3c <__sinit+0x6c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdf2:	42a3      	cmp	r3, r4
 800bdf4:	bf04      	itt	eq
 800bdf6:	2301      	moveq	r3, #1
 800bdf8:	61a3      	streq	r3, [r4, #24]
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f000 f820 	bl	800be40 <__sfp>
 800be00:	6060      	str	r0, [r4, #4]
 800be02:	4620      	mov	r0, r4
 800be04:	f000 f81c 	bl	800be40 <__sfp>
 800be08:	60a0      	str	r0, [r4, #8]
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 f818 	bl	800be40 <__sfp>
 800be10:	2200      	movs	r2, #0
 800be12:	60e0      	str	r0, [r4, #12]
 800be14:	2104      	movs	r1, #4
 800be16:	6860      	ldr	r0, [r4, #4]
 800be18:	f7ff ff82 	bl	800bd20 <std>
 800be1c:	68a0      	ldr	r0, [r4, #8]
 800be1e:	2201      	movs	r2, #1
 800be20:	2109      	movs	r1, #9
 800be22:	f7ff ff7d 	bl	800bd20 <std>
 800be26:	68e0      	ldr	r0, [r4, #12]
 800be28:	2202      	movs	r2, #2
 800be2a:	2112      	movs	r1, #18
 800be2c:	f7ff ff78 	bl	800bd20 <std>
 800be30:	2301      	movs	r3, #1
 800be32:	61a3      	str	r3, [r4, #24]
 800be34:	e7d2      	b.n	800bddc <__sinit+0xc>
 800be36:	bf00      	nop
 800be38:	0800e144 	.word	0x0800e144
 800be3c:	0800bd69 	.word	0x0800bd69

0800be40 <__sfp>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	4607      	mov	r7, r0
 800be44:	f7ff ffac 	bl	800bda0 <__sfp_lock_acquire>
 800be48:	4b1e      	ldr	r3, [pc, #120]	; (800bec4 <__sfp+0x84>)
 800be4a:	681e      	ldr	r6, [r3, #0]
 800be4c:	69b3      	ldr	r3, [r6, #24]
 800be4e:	b913      	cbnz	r3, 800be56 <__sfp+0x16>
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff ffbd 	bl	800bdd0 <__sinit>
 800be56:	3648      	adds	r6, #72	; 0x48
 800be58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	d503      	bpl.n	800be68 <__sfp+0x28>
 800be60:	6833      	ldr	r3, [r6, #0]
 800be62:	b30b      	cbz	r3, 800bea8 <__sfp+0x68>
 800be64:	6836      	ldr	r6, [r6, #0]
 800be66:	e7f7      	b.n	800be58 <__sfp+0x18>
 800be68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be6c:	b9d5      	cbnz	r5, 800bea4 <__sfp+0x64>
 800be6e:	4b16      	ldr	r3, [pc, #88]	; (800bec8 <__sfp+0x88>)
 800be70:	60e3      	str	r3, [r4, #12]
 800be72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be76:	6665      	str	r5, [r4, #100]	; 0x64
 800be78:	f000 f84c 	bl	800bf14 <__retarget_lock_init_recursive>
 800be7c:	f7ff ff96 	bl	800bdac <__sfp_lock_release>
 800be80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be88:	6025      	str	r5, [r4, #0]
 800be8a:	61a5      	str	r5, [r4, #24]
 800be8c:	2208      	movs	r2, #8
 800be8e:	4629      	mov	r1, r5
 800be90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be94:	f7fe fa28 	bl	800a2e8 <memset>
 800be98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bea0:	4620      	mov	r0, r4
 800bea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bea4:	3468      	adds	r4, #104	; 0x68
 800bea6:	e7d9      	b.n	800be5c <__sfp+0x1c>
 800bea8:	2104      	movs	r1, #4
 800beaa:	4638      	mov	r0, r7
 800beac:	f7ff ff62 	bl	800bd74 <__sfmoreglue>
 800beb0:	4604      	mov	r4, r0
 800beb2:	6030      	str	r0, [r6, #0]
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d1d5      	bne.n	800be64 <__sfp+0x24>
 800beb8:	f7ff ff78 	bl	800bdac <__sfp_lock_release>
 800bebc:	230c      	movs	r3, #12
 800bebe:	603b      	str	r3, [r7, #0]
 800bec0:	e7ee      	b.n	800bea0 <__sfp+0x60>
 800bec2:	bf00      	nop
 800bec4:	0800e144 	.word	0x0800e144
 800bec8:	ffff0001 	.word	0xffff0001

0800becc <_fwalk_reent>:
 800becc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed0:	4606      	mov	r6, r0
 800bed2:	4688      	mov	r8, r1
 800bed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bed8:	2700      	movs	r7, #0
 800beda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bede:	f1b9 0901 	subs.w	r9, r9, #1
 800bee2:	d505      	bpl.n	800bef0 <_fwalk_reent+0x24>
 800bee4:	6824      	ldr	r4, [r4, #0]
 800bee6:	2c00      	cmp	r4, #0
 800bee8:	d1f7      	bne.n	800beda <_fwalk_reent+0xe>
 800beea:	4638      	mov	r0, r7
 800beec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef0:	89ab      	ldrh	r3, [r5, #12]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d907      	bls.n	800bf06 <_fwalk_reent+0x3a>
 800bef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800befa:	3301      	adds	r3, #1
 800befc:	d003      	beq.n	800bf06 <_fwalk_reent+0x3a>
 800befe:	4629      	mov	r1, r5
 800bf00:	4630      	mov	r0, r6
 800bf02:	47c0      	blx	r8
 800bf04:	4307      	orrs	r7, r0
 800bf06:	3568      	adds	r5, #104	; 0x68
 800bf08:	e7e9      	b.n	800bede <_fwalk_reent+0x12>
	...

0800bf0c <_localeconv_r>:
 800bf0c:	4800      	ldr	r0, [pc, #0]	; (800bf10 <_localeconv_r+0x4>)
 800bf0e:	4770      	bx	lr
 800bf10:	20000180 	.word	0x20000180

0800bf14 <__retarget_lock_init_recursive>:
 800bf14:	4770      	bx	lr

0800bf16 <__retarget_lock_acquire_recursive>:
 800bf16:	4770      	bx	lr

0800bf18 <__retarget_lock_release_recursive>:
 800bf18:	4770      	bx	lr

0800bf1a <__swhatbuf_r>:
 800bf1a:	b570      	push	{r4, r5, r6, lr}
 800bf1c:	460e      	mov	r6, r1
 800bf1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf22:	2900      	cmp	r1, #0
 800bf24:	b096      	sub	sp, #88	; 0x58
 800bf26:	4614      	mov	r4, r2
 800bf28:	461d      	mov	r5, r3
 800bf2a:	da08      	bge.n	800bf3e <__swhatbuf_r+0x24>
 800bf2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	602a      	str	r2, [r5, #0]
 800bf34:	061a      	lsls	r2, r3, #24
 800bf36:	d410      	bmi.n	800bf5a <__swhatbuf_r+0x40>
 800bf38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf3c:	e00e      	b.n	800bf5c <__swhatbuf_r+0x42>
 800bf3e:	466a      	mov	r2, sp
 800bf40:	f001 f82e 	bl	800cfa0 <_fstat_r>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	dbf1      	blt.n	800bf2c <__swhatbuf_r+0x12>
 800bf48:	9a01      	ldr	r2, [sp, #4]
 800bf4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf52:	425a      	negs	r2, r3
 800bf54:	415a      	adcs	r2, r3
 800bf56:	602a      	str	r2, [r5, #0]
 800bf58:	e7ee      	b.n	800bf38 <__swhatbuf_r+0x1e>
 800bf5a:	2340      	movs	r3, #64	; 0x40
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	6023      	str	r3, [r4, #0]
 800bf60:	b016      	add	sp, #88	; 0x58
 800bf62:	bd70      	pop	{r4, r5, r6, pc}

0800bf64 <__smakebuf_r>:
 800bf64:	898b      	ldrh	r3, [r1, #12]
 800bf66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf68:	079d      	lsls	r5, r3, #30
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	d507      	bpl.n	800bf80 <__smakebuf_r+0x1c>
 800bf70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	6123      	str	r3, [r4, #16]
 800bf78:	2301      	movs	r3, #1
 800bf7a:	6163      	str	r3, [r4, #20]
 800bf7c:	b002      	add	sp, #8
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	ab01      	add	r3, sp, #4
 800bf82:	466a      	mov	r2, sp
 800bf84:	f7ff ffc9 	bl	800bf1a <__swhatbuf_r>
 800bf88:	9900      	ldr	r1, [sp, #0]
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f000 fc37 	bl	800c800 <_malloc_r>
 800bf92:	b948      	cbnz	r0, 800bfa8 <__smakebuf_r+0x44>
 800bf94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf98:	059a      	lsls	r2, r3, #22
 800bf9a:	d4ef      	bmi.n	800bf7c <__smakebuf_r+0x18>
 800bf9c:	f023 0303 	bic.w	r3, r3, #3
 800bfa0:	f043 0302 	orr.w	r3, r3, #2
 800bfa4:	81a3      	strh	r3, [r4, #12]
 800bfa6:	e7e3      	b.n	800bf70 <__smakebuf_r+0xc>
 800bfa8:	4b0d      	ldr	r3, [pc, #52]	; (800bfe0 <__smakebuf_r+0x7c>)
 800bfaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	6020      	str	r0, [r4, #0]
 800bfb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb4:	81a3      	strh	r3, [r4, #12]
 800bfb6:	9b00      	ldr	r3, [sp, #0]
 800bfb8:	6163      	str	r3, [r4, #20]
 800bfba:	9b01      	ldr	r3, [sp, #4]
 800bfbc:	6120      	str	r0, [r4, #16]
 800bfbe:	b15b      	cbz	r3, 800bfd8 <__smakebuf_r+0x74>
 800bfc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f000 fffd 	bl	800cfc4 <_isatty_r>
 800bfca:	b128      	cbz	r0, 800bfd8 <__smakebuf_r+0x74>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f023 0303 	bic.w	r3, r3, #3
 800bfd2:	f043 0301 	orr.w	r3, r3, #1
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	89a0      	ldrh	r0, [r4, #12]
 800bfda:	4305      	orrs	r5, r0
 800bfdc:	81a5      	strh	r5, [r4, #12]
 800bfde:	e7cd      	b.n	800bf7c <__smakebuf_r+0x18>
 800bfe0:	0800bd69 	.word	0x0800bd69

0800bfe4 <malloc>:
 800bfe4:	4b02      	ldr	r3, [pc, #8]	; (800bff0 <malloc+0xc>)
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	f000 bc09 	b.w	800c800 <_malloc_r>
 800bfee:	bf00      	nop
 800bff0:	2000002c 	.word	0x2000002c

0800bff4 <_Balloc>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bff8:	4604      	mov	r4, r0
 800bffa:	460d      	mov	r5, r1
 800bffc:	b976      	cbnz	r6, 800c01c <_Balloc+0x28>
 800bffe:	2010      	movs	r0, #16
 800c000:	f7ff fff0 	bl	800bfe4 <malloc>
 800c004:	4602      	mov	r2, r0
 800c006:	6260      	str	r0, [r4, #36]	; 0x24
 800c008:	b920      	cbnz	r0, 800c014 <_Balloc+0x20>
 800c00a:	4b18      	ldr	r3, [pc, #96]	; (800c06c <_Balloc+0x78>)
 800c00c:	4818      	ldr	r0, [pc, #96]	; (800c070 <_Balloc+0x7c>)
 800c00e:	2166      	movs	r1, #102	; 0x66
 800c010:	f000 ff86 	bl	800cf20 <__assert_func>
 800c014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c018:	6006      	str	r6, [r0, #0]
 800c01a:	60c6      	str	r6, [r0, #12]
 800c01c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c01e:	68f3      	ldr	r3, [r6, #12]
 800c020:	b183      	cbz	r3, 800c044 <_Balloc+0x50>
 800c022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c02a:	b9b8      	cbnz	r0, 800c05c <_Balloc+0x68>
 800c02c:	2101      	movs	r1, #1
 800c02e:	fa01 f605 	lsl.w	r6, r1, r5
 800c032:	1d72      	adds	r2, r6, #5
 800c034:	0092      	lsls	r2, r2, #2
 800c036:	4620      	mov	r0, r4
 800c038:	f000 fb60 	bl	800c6fc <_calloc_r>
 800c03c:	b160      	cbz	r0, 800c058 <_Balloc+0x64>
 800c03e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c042:	e00e      	b.n	800c062 <_Balloc+0x6e>
 800c044:	2221      	movs	r2, #33	; 0x21
 800c046:	2104      	movs	r1, #4
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 fb57 	bl	800c6fc <_calloc_r>
 800c04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c050:	60f0      	str	r0, [r6, #12]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1e4      	bne.n	800c022 <_Balloc+0x2e>
 800c058:	2000      	movs	r0, #0
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	6802      	ldr	r2, [r0, #0]
 800c05e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c062:	2300      	movs	r3, #0
 800c064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c068:	e7f7      	b.n	800c05a <_Balloc+0x66>
 800c06a:	bf00      	nop
 800c06c:	0800e189 	.word	0x0800e189
 800c070:	0800e26c 	.word	0x0800e26c

0800c074 <_Bfree>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c078:	4605      	mov	r5, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	b976      	cbnz	r6, 800c09c <_Bfree+0x28>
 800c07e:	2010      	movs	r0, #16
 800c080:	f7ff ffb0 	bl	800bfe4 <malloc>
 800c084:	4602      	mov	r2, r0
 800c086:	6268      	str	r0, [r5, #36]	; 0x24
 800c088:	b920      	cbnz	r0, 800c094 <_Bfree+0x20>
 800c08a:	4b09      	ldr	r3, [pc, #36]	; (800c0b0 <_Bfree+0x3c>)
 800c08c:	4809      	ldr	r0, [pc, #36]	; (800c0b4 <_Bfree+0x40>)
 800c08e:	218a      	movs	r1, #138	; 0x8a
 800c090:	f000 ff46 	bl	800cf20 <__assert_func>
 800c094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c098:	6006      	str	r6, [r0, #0]
 800c09a:	60c6      	str	r6, [r0, #12]
 800c09c:	b13c      	cbz	r4, 800c0ae <_Bfree+0x3a>
 800c09e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c0a0:	6862      	ldr	r2, [r4, #4]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0a8:	6021      	str	r1, [r4, #0]
 800c0aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	0800e189 	.word	0x0800e189
 800c0b4:	0800e26c 	.word	0x0800e26c

0800c0b8 <__multadd>:
 800c0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0bc:	690d      	ldr	r5, [r1, #16]
 800c0be:	4607      	mov	r7, r0
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	461e      	mov	r6, r3
 800c0c4:	f101 0c14 	add.w	ip, r1, #20
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ce:	b299      	uxth	r1, r3
 800c0d0:	fb02 6101 	mla	r1, r2, r1, r6
 800c0d4:	0c1e      	lsrs	r6, r3, #16
 800c0d6:	0c0b      	lsrs	r3, r1, #16
 800c0d8:	fb02 3306 	mla	r3, r2, r6, r3
 800c0dc:	b289      	uxth	r1, r1
 800c0de:	3001      	adds	r0, #1
 800c0e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0e4:	4285      	cmp	r5, r0
 800c0e6:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0ee:	dcec      	bgt.n	800c0ca <__multadd+0x12>
 800c0f0:	b30e      	cbz	r6, 800c136 <__multadd+0x7e>
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	42ab      	cmp	r3, r5
 800c0f6:	dc19      	bgt.n	800c12c <__multadd+0x74>
 800c0f8:	6861      	ldr	r1, [r4, #4]
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	3101      	adds	r1, #1
 800c0fe:	f7ff ff79 	bl	800bff4 <_Balloc>
 800c102:	4680      	mov	r8, r0
 800c104:	b928      	cbnz	r0, 800c112 <__multadd+0x5a>
 800c106:	4602      	mov	r2, r0
 800c108:	4b0c      	ldr	r3, [pc, #48]	; (800c13c <__multadd+0x84>)
 800c10a:	480d      	ldr	r0, [pc, #52]	; (800c140 <__multadd+0x88>)
 800c10c:	21b5      	movs	r1, #181	; 0xb5
 800c10e:	f000 ff07 	bl	800cf20 <__assert_func>
 800c112:	6922      	ldr	r2, [r4, #16]
 800c114:	3202      	adds	r2, #2
 800c116:	f104 010c 	add.w	r1, r4, #12
 800c11a:	0092      	lsls	r2, r2, #2
 800c11c:	300c      	adds	r0, #12
 800c11e:	f7fe f8d5 	bl	800a2cc <memcpy>
 800c122:	4621      	mov	r1, r4
 800c124:	4638      	mov	r0, r7
 800c126:	f7ff ffa5 	bl	800c074 <_Bfree>
 800c12a:	4644      	mov	r4, r8
 800c12c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c130:	3501      	adds	r5, #1
 800c132:	615e      	str	r6, [r3, #20]
 800c134:	6125      	str	r5, [r4, #16]
 800c136:	4620      	mov	r0, r4
 800c138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13c:	0800e1fb 	.word	0x0800e1fb
 800c140:	0800e26c 	.word	0x0800e26c

0800c144 <__hi0bits>:
 800c144:	0c03      	lsrs	r3, r0, #16
 800c146:	041b      	lsls	r3, r3, #16
 800c148:	b9d3      	cbnz	r3, 800c180 <__hi0bits+0x3c>
 800c14a:	0400      	lsls	r0, r0, #16
 800c14c:	2310      	movs	r3, #16
 800c14e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c152:	bf04      	itt	eq
 800c154:	0200      	lsleq	r0, r0, #8
 800c156:	3308      	addeq	r3, #8
 800c158:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c15c:	bf04      	itt	eq
 800c15e:	0100      	lsleq	r0, r0, #4
 800c160:	3304      	addeq	r3, #4
 800c162:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c166:	bf04      	itt	eq
 800c168:	0080      	lsleq	r0, r0, #2
 800c16a:	3302      	addeq	r3, #2
 800c16c:	2800      	cmp	r0, #0
 800c16e:	db05      	blt.n	800c17c <__hi0bits+0x38>
 800c170:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c174:	f103 0301 	add.w	r3, r3, #1
 800c178:	bf08      	it	eq
 800c17a:	2320      	moveq	r3, #32
 800c17c:	4618      	mov	r0, r3
 800c17e:	4770      	bx	lr
 800c180:	2300      	movs	r3, #0
 800c182:	e7e4      	b.n	800c14e <__hi0bits+0xa>

0800c184 <__lo0bits>:
 800c184:	6803      	ldr	r3, [r0, #0]
 800c186:	f013 0207 	ands.w	r2, r3, #7
 800c18a:	4601      	mov	r1, r0
 800c18c:	d00b      	beq.n	800c1a6 <__lo0bits+0x22>
 800c18e:	07da      	lsls	r2, r3, #31
 800c190:	d423      	bmi.n	800c1da <__lo0bits+0x56>
 800c192:	0798      	lsls	r0, r3, #30
 800c194:	bf49      	itett	mi
 800c196:	085b      	lsrmi	r3, r3, #1
 800c198:	089b      	lsrpl	r3, r3, #2
 800c19a:	2001      	movmi	r0, #1
 800c19c:	600b      	strmi	r3, [r1, #0]
 800c19e:	bf5c      	itt	pl
 800c1a0:	600b      	strpl	r3, [r1, #0]
 800c1a2:	2002      	movpl	r0, #2
 800c1a4:	4770      	bx	lr
 800c1a6:	b298      	uxth	r0, r3
 800c1a8:	b9a8      	cbnz	r0, 800c1d6 <__lo0bits+0x52>
 800c1aa:	0c1b      	lsrs	r3, r3, #16
 800c1ac:	2010      	movs	r0, #16
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	b90a      	cbnz	r2, 800c1b6 <__lo0bits+0x32>
 800c1b2:	3008      	adds	r0, #8
 800c1b4:	0a1b      	lsrs	r3, r3, #8
 800c1b6:	071a      	lsls	r2, r3, #28
 800c1b8:	bf04      	itt	eq
 800c1ba:	091b      	lsreq	r3, r3, #4
 800c1bc:	3004      	addeq	r0, #4
 800c1be:	079a      	lsls	r2, r3, #30
 800c1c0:	bf04      	itt	eq
 800c1c2:	089b      	lsreq	r3, r3, #2
 800c1c4:	3002      	addeq	r0, #2
 800c1c6:	07da      	lsls	r2, r3, #31
 800c1c8:	d403      	bmi.n	800c1d2 <__lo0bits+0x4e>
 800c1ca:	085b      	lsrs	r3, r3, #1
 800c1cc:	f100 0001 	add.w	r0, r0, #1
 800c1d0:	d005      	beq.n	800c1de <__lo0bits+0x5a>
 800c1d2:	600b      	str	r3, [r1, #0]
 800c1d4:	4770      	bx	lr
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	e7e9      	b.n	800c1ae <__lo0bits+0x2a>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	4770      	bx	lr
 800c1de:	2020      	movs	r0, #32
 800c1e0:	4770      	bx	lr
	...

0800c1e4 <__i2b>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	f7ff ff03 	bl	800bff4 <_Balloc>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	b928      	cbnz	r0, 800c1fe <__i2b+0x1a>
 800c1f2:	4b05      	ldr	r3, [pc, #20]	; (800c208 <__i2b+0x24>)
 800c1f4:	4805      	ldr	r0, [pc, #20]	; (800c20c <__i2b+0x28>)
 800c1f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c1fa:	f000 fe91 	bl	800cf20 <__assert_func>
 800c1fe:	2301      	movs	r3, #1
 800c200:	6144      	str	r4, [r0, #20]
 800c202:	6103      	str	r3, [r0, #16]
 800c204:	bd10      	pop	{r4, pc}
 800c206:	bf00      	nop
 800c208:	0800e1fb 	.word	0x0800e1fb
 800c20c:	0800e26c 	.word	0x0800e26c

0800c210 <__multiply>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	4691      	mov	r9, r2
 800c216:	690a      	ldr	r2, [r1, #16]
 800c218:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	bfb8      	it	lt
 800c220:	460b      	movlt	r3, r1
 800c222:	460c      	mov	r4, r1
 800c224:	bfbc      	itt	lt
 800c226:	464c      	movlt	r4, r9
 800c228:	4699      	movlt	r9, r3
 800c22a:	6927      	ldr	r7, [r4, #16]
 800c22c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c230:	68a3      	ldr	r3, [r4, #8]
 800c232:	6861      	ldr	r1, [r4, #4]
 800c234:	eb07 060a 	add.w	r6, r7, sl
 800c238:	42b3      	cmp	r3, r6
 800c23a:	b085      	sub	sp, #20
 800c23c:	bfb8      	it	lt
 800c23e:	3101      	addlt	r1, #1
 800c240:	f7ff fed8 	bl	800bff4 <_Balloc>
 800c244:	b930      	cbnz	r0, 800c254 <__multiply+0x44>
 800c246:	4602      	mov	r2, r0
 800c248:	4b44      	ldr	r3, [pc, #272]	; (800c35c <__multiply+0x14c>)
 800c24a:	4845      	ldr	r0, [pc, #276]	; (800c360 <__multiply+0x150>)
 800c24c:	f240 115d 	movw	r1, #349	; 0x15d
 800c250:	f000 fe66 	bl	800cf20 <__assert_func>
 800c254:	f100 0514 	add.w	r5, r0, #20
 800c258:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c25c:	462b      	mov	r3, r5
 800c25e:	2200      	movs	r2, #0
 800c260:	4543      	cmp	r3, r8
 800c262:	d321      	bcc.n	800c2a8 <__multiply+0x98>
 800c264:	f104 0314 	add.w	r3, r4, #20
 800c268:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c26c:	f109 0314 	add.w	r3, r9, #20
 800c270:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c274:	9202      	str	r2, [sp, #8]
 800c276:	1b3a      	subs	r2, r7, r4
 800c278:	3a15      	subs	r2, #21
 800c27a:	f022 0203 	bic.w	r2, r2, #3
 800c27e:	3204      	adds	r2, #4
 800c280:	f104 0115 	add.w	r1, r4, #21
 800c284:	428f      	cmp	r7, r1
 800c286:	bf38      	it	cc
 800c288:	2204      	movcc	r2, #4
 800c28a:	9201      	str	r2, [sp, #4]
 800c28c:	9a02      	ldr	r2, [sp, #8]
 800c28e:	9303      	str	r3, [sp, #12]
 800c290:	429a      	cmp	r2, r3
 800c292:	d80c      	bhi.n	800c2ae <__multiply+0x9e>
 800c294:	2e00      	cmp	r6, #0
 800c296:	dd03      	ble.n	800c2a0 <__multiply+0x90>
 800c298:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d05a      	beq.n	800c356 <__multiply+0x146>
 800c2a0:	6106      	str	r6, [r0, #16]
 800c2a2:	b005      	add	sp, #20
 800c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a8:	f843 2b04 	str.w	r2, [r3], #4
 800c2ac:	e7d8      	b.n	800c260 <__multiply+0x50>
 800c2ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2b2:	f1ba 0f00 	cmp.w	sl, #0
 800c2b6:	d024      	beq.n	800c302 <__multiply+0xf2>
 800c2b8:	f104 0e14 	add.w	lr, r4, #20
 800c2bc:	46a9      	mov	r9, r5
 800c2be:	f04f 0c00 	mov.w	ip, #0
 800c2c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2c6:	f8d9 1000 	ldr.w	r1, [r9]
 800c2ca:	fa1f fb82 	uxth.w	fp, r2
 800c2ce:	b289      	uxth	r1, r1
 800c2d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c2d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c2d8:	f8d9 2000 	ldr.w	r2, [r9]
 800c2dc:	4461      	add	r1, ip
 800c2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c2e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c2ea:	b289      	uxth	r1, r1
 800c2ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c2f0:	4577      	cmp	r7, lr
 800c2f2:	f849 1b04 	str.w	r1, [r9], #4
 800c2f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2fa:	d8e2      	bhi.n	800c2c2 <__multiply+0xb2>
 800c2fc:	9a01      	ldr	r2, [sp, #4]
 800c2fe:	f845 c002 	str.w	ip, [r5, r2]
 800c302:	9a03      	ldr	r2, [sp, #12]
 800c304:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c308:	3304      	adds	r3, #4
 800c30a:	f1b9 0f00 	cmp.w	r9, #0
 800c30e:	d020      	beq.n	800c352 <__multiply+0x142>
 800c310:	6829      	ldr	r1, [r5, #0]
 800c312:	f104 0c14 	add.w	ip, r4, #20
 800c316:	46ae      	mov	lr, r5
 800c318:	f04f 0a00 	mov.w	sl, #0
 800c31c:	f8bc b000 	ldrh.w	fp, [ip]
 800c320:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c324:	fb09 220b 	mla	r2, r9, fp, r2
 800c328:	4492      	add	sl, r2
 800c32a:	b289      	uxth	r1, r1
 800c32c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c330:	f84e 1b04 	str.w	r1, [lr], #4
 800c334:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c338:	f8be 1000 	ldrh.w	r1, [lr]
 800c33c:	0c12      	lsrs	r2, r2, #16
 800c33e:	fb09 1102 	mla	r1, r9, r2, r1
 800c342:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c346:	4567      	cmp	r7, ip
 800c348:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c34c:	d8e6      	bhi.n	800c31c <__multiply+0x10c>
 800c34e:	9a01      	ldr	r2, [sp, #4]
 800c350:	50a9      	str	r1, [r5, r2]
 800c352:	3504      	adds	r5, #4
 800c354:	e79a      	b.n	800c28c <__multiply+0x7c>
 800c356:	3e01      	subs	r6, #1
 800c358:	e79c      	b.n	800c294 <__multiply+0x84>
 800c35a:	bf00      	nop
 800c35c:	0800e1fb 	.word	0x0800e1fb
 800c360:	0800e26c 	.word	0x0800e26c

0800c364 <__pow5mult>:
 800c364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c368:	4615      	mov	r5, r2
 800c36a:	f012 0203 	ands.w	r2, r2, #3
 800c36e:	4606      	mov	r6, r0
 800c370:	460f      	mov	r7, r1
 800c372:	d007      	beq.n	800c384 <__pow5mult+0x20>
 800c374:	4c25      	ldr	r4, [pc, #148]	; (800c40c <__pow5mult+0xa8>)
 800c376:	3a01      	subs	r2, #1
 800c378:	2300      	movs	r3, #0
 800c37a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c37e:	f7ff fe9b 	bl	800c0b8 <__multadd>
 800c382:	4607      	mov	r7, r0
 800c384:	10ad      	asrs	r5, r5, #2
 800c386:	d03d      	beq.n	800c404 <__pow5mult+0xa0>
 800c388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c38a:	b97c      	cbnz	r4, 800c3ac <__pow5mult+0x48>
 800c38c:	2010      	movs	r0, #16
 800c38e:	f7ff fe29 	bl	800bfe4 <malloc>
 800c392:	4602      	mov	r2, r0
 800c394:	6270      	str	r0, [r6, #36]	; 0x24
 800c396:	b928      	cbnz	r0, 800c3a4 <__pow5mult+0x40>
 800c398:	4b1d      	ldr	r3, [pc, #116]	; (800c410 <__pow5mult+0xac>)
 800c39a:	481e      	ldr	r0, [pc, #120]	; (800c414 <__pow5mult+0xb0>)
 800c39c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c3a0:	f000 fdbe 	bl	800cf20 <__assert_func>
 800c3a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3a8:	6004      	str	r4, [r0, #0]
 800c3aa:	60c4      	str	r4, [r0, #12]
 800c3ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c3b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3b4:	b94c      	cbnz	r4, 800c3ca <__pow5mult+0x66>
 800c3b6:	f240 2171 	movw	r1, #625	; 0x271
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	f7ff ff12 	bl	800c1e4 <__i2b>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	6003      	str	r3, [r0, #0]
 800c3ca:	f04f 0900 	mov.w	r9, #0
 800c3ce:	07eb      	lsls	r3, r5, #31
 800c3d0:	d50a      	bpl.n	800c3e8 <__pow5mult+0x84>
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f7ff ff1a 	bl	800c210 <__multiply>
 800c3dc:	4639      	mov	r1, r7
 800c3de:	4680      	mov	r8, r0
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f7ff fe47 	bl	800c074 <_Bfree>
 800c3e6:	4647      	mov	r7, r8
 800c3e8:	106d      	asrs	r5, r5, #1
 800c3ea:	d00b      	beq.n	800c404 <__pow5mult+0xa0>
 800c3ec:	6820      	ldr	r0, [r4, #0]
 800c3ee:	b938      	cbnz	r0, 800c400 <__pow5mult+0x9c>
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7ff ff0b 	bl	800c210 <__multiply>
 800c3fa:	6020      	str	r0, [r4, #0]
 800c3fc:	f8c0 9000 	str.w	r9, [r0]
 800c400:	4604      	mov	r4, r0
 800c402:	e7e4      	b.n	800c3ce <__pow5mult+0x6a>
 800c404:	4638      	mov	r0, r7
 800c406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40a:	bf00      	nop
 800c40c:	0800e3b8 	.word	0x0800e3b8
 800c410:	0800e189 	.word	0x0800e189
 800c414:	0800e26c 	.word	0x0800e26c

0800c418 <__lshift>:
 800c418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c41c:	460c      	mov	r4, r1
 800c41e:	6849      	ldr	r1, [r1, #4]
 800c420:	6923      	ldr	r3, [r4, #16]
 800c422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c426:	68a3      	ldr	r3, [r4, #8]
 800c428:	4607      	mov	r7, r0
 800c42a:	4691      	mov	r9, r2
 800c42c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c430:	f108 0601 	add.w	r6, r8, #1
 800c434:	42b3      	cmp	r3, r6
 800c436:	db0b      	blt.n	800c450 <__lshift+0x38>
 800c438:	4638      	mov	r0, r7
 800c43a:	f7ff fddb 	bl	800bff4 <_Balloc>
 800c43e:	4605      	mov	r5, r0
 800c440:	b948      	cbnz	r0, 800c456 <__lshift+0x3e>
 800c442:	4602      	mov	r2, r0
 800c444:	4b2a      	ldr	r3, [pc, #168]	; (800c4f0 <__lshift+0xd8>)
 800c446:	482b      	ldr	r0, [pc, #172]	; (800c4f4 <__lshift+0xdc>)
 800c448:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c44c:	f000 fd68 	bl	800cf20 <__assert_func>
 800c450:	3101      	adds	r1, #1
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	e7ee      	b.n	800c434 <__lshift+0x1c>
 800c456:	2300      	movs	r3, #0
 800c458:	f100 0114 	add.w	r1, r0, #20
 800c45c:	f100 0210 	add.w	r2, r0, #16
 800c460:	4618      	mov	r0, r3
 800c462:	4553      	cmp	r3, sl
 800c464:	db37      	blt.n	800c4d6 <__lshift+0xbe>
 800c466:	6920      	ldr	r0, [r4, #16]
 800c468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c46c:	f104 0314 	add.w	r3, r4, #20
 800c470:	f019 091f 	ands.w	r9, r9, #31
 800c474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c478:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c47c:	d02f      	beq.n	800c4de <__lshift+0xc6>
 800c47e:	f1c9 0e20 	rsb	lr, r9, #32
 800c482:	468a      	mov	sl, r1
 800c484:	f04f 0c00 	mov.w	ip, #0
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	fa02 f209 	lsl.w	r2, r2, r9
 800c48e:	ea42 020c 	orr.w	r2, r2, ip
 800c492:	f84a 2b04 	str.w	r2, [sl], #4
 800c496:	f853 2b04 	ldr.w	r2, [r3], #4
 800c49a:	4298      	cmp	r0, r3
 800c49c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c4a0:	d8f2      	bhi.n	800c488 <__lshift+0x70>
 800c4a2:	1b03      	subs	r3, r0, r4
 800c4a4:	3b15      	subs	r3, #21
 800c4a6:	f023 0303 	bic.w	r3, r3, #3
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	f104 0215 	add.w	r2, r4, #21
 800c4b0:	4290      	cmp	r0, r2
 800c4b2:	bf38      	it	cc
 800c4b4:	2304      	movcc	r3, #4
 800c4b6:	f841 c003 	str.w	ip, [r1, r3]
 800c4ba:	f1bc 0f00 	cmp.w	ip, #0
 800c4be:	d001      	beq.n	800c4c4 <__lshift+0xac>
 800c4c0:	f108 0602 	add.w	r6, r8, #2
 800c4c4:	3e01      	subs	r6, #1
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	612e      	str	r6, [r5, #16]
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	f7ff fdd2 	bl	800c074 <_Bfree>
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4da:	3301      	adds	r3, #1
 800c4dc:	e7c1      	b.n	800c462 <__lshift+0x4a>
 800c4de:	3904      	subs	r1, #4
 800c4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4e8:	4298      	cmp	r0, r3
 800c4ea:	d8f9      	bhi.n	800c4e0 <__lshift+0xc8>
 800c4ec:	e7ea      	b.n	800c4c4 <__lshift+0xac>
 800c4ee:	bf00      	nop
 800c4f0:	0800e1fb 	.word	0x0800e1fb
 800c4f4:	0800e26c 	.word	0x0800e26c

0800c4f8 <__mcmp>:
 800c4f8:	b530      	push	{r4, r5, lr}
 800c4fa:	6902      	ldr	r2, [r0, #16]
 800c4fc:	690c      	ldr	r4, [r1, #16]
 800c4fe:	1b12      	subs	r2, r2, r4
 800c500:	d10e      	bne.n	800c520 <__mcmp+0x28>
 800c502:	f100 0314 	add.w	r3, r0, #20
 800c506:	3114      	adds	r1, #20
 800c508:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c50c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c510:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c514:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c518:	42a5      	cmp	r5, r4
 800c51a:	d003      	beq.n	800c524 <__mcmp+0x2c>
 800c51c:	d305      	bcc.n	800c52a <__mcmp+0x32>
 800c51e:	2201      	movs	r2, #1
 800c520:	4610      	mov	r0, r2
 800c522:	bd30      	pop	{r4, r5, pc}
 800c524:	4283      	cmp	r3, r0
 800c526:	d3f3      	bcc.n	800c510 <__mcmp+0x18>
 800c528:	e7fa      	b.n	800c520 <__mcmp+0x28>
 800c52a:	f04f 32ff 	mov.w	r2, #4294967295
 800c52e:	e7f7      	b.n	800c520 <__mcmp+0x28>

0800c530 <__mdiff>:
 800c530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	460c      	mov	r4, r1
 800c536:	4606      	mov	r6, r0
 800c538:	4611      	mov	r1, r2
 800c53a:	4620      	mov	r0, r4
 800c53c:	4690      	mov	r8, r2
 800c53e:	f7ff ffdb 	bl	800c4f8 <__mcmp>
 800c542:	1e05      	subs	r5, r0, #0
 800c544:	d110      	bne.n	800c568 <__mdiff+0x38>
 800c546:	4629      	mov	r1, r5
 800c548:	4630      	mov	r0, r6
 800c54a:	f7ff fd53 	bl	800bff4 <_Balloc>
 800c54e:	b930      	cbnz	r0, 800c55e <__mdiff+0x2e>
 800c550:	4b3a      	ldr	r3, [pc, #232]	; (800c63c <__mdiff+0x10c>)
 800c552:	4602      	mov	r2, r0
 800c554:	f240 2132 	movw	r1, #562	; 0x232
 800c558:	4839      	ldr	r0, [pc, #228]	; (800c640 <__mdiff+0x110>)
 800c55a:	f000 fce1 	bl	800cf20 <__assert_func>
 800c55e:	2301      	movs	r3, #1
 800c560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c568:	bfa4      	itt	ge
 800c56a:	4643      	movge	r3, r8
 800c56c:	46a0      	movge	r8, r4
 800c56e:	4630      	mov	r0, r6
 800c570:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c574:	bfa6      	itte	ge
 800c576:	461c      	movge	r4, r3
 800c578:	2500      	movge	r5, #0
 800c57a:	2501      	movlt	r5, #1
 800c57c:	f7ff fd3a 	bl	800bff4 <_Balloc>
 800c580:	b920      	cbnz	r0, 800c58c <__mdiff+0x5c>
 800c582:	4b2e      	ldr	r3, [pc, #184]	; (800c63c <__mdiff+0x10c>)
 800c584:	4602      	mov	r2, r0
 800c586:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c58a:	e7e5      	b.n	800c558 <__mdiff+0x28>
 800c58c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c590:	6926      	ldr	r6, [r4, #16]
 800c592:	60c5      	str	r5, [r0, #12]
 800c594:	f104 0914 	add.w	r9, r4, #20
 800c598:	f108 0514 	add.w	r5, r8, #20
 800c59c:	f100 0e14 	add.w	lr, r0, #20
 800c5a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5a8:	f108 0210 	add.w	r2, r8, #16
 800c5ac:	46f2      	mov	sl, lr
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5b8:	fa1f f883 	uxth.w	r8, r3
 800c5bc:	fa11 f18b 	uxtah	r1, r1, fp
 800c5c0:	0c1b      	lsrs	r3, r3, #16
 800c5c2:	eba1 0808 	sub.w	r8, r1, r8
 800c5c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5ce:	fa1f f888 	uxth.w	r8, r8
 800c5d2:	1419      	asrs	r1, r3, #16
 800c5d4:	454e      	cmp	r6, r9
 800c5d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5da:	f84a 3b04 	str.w	r3, [sl], #4
 800c5de:	d8e7      	bhi.n	800c5b0 <__mdiff+0x80>
 800c5e0:	1b33      	subs	r3, r6, r4
 800c5e2:	3b15      	subs	r3, #21
 800c5e4:	f023 0303 	bic.w	r3, r3, #3
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	3415      	adds	r4, #21
 800c5ec:	42a6      	cmp	r6, r4
 800c5ee:	bf38      	it	cc
 800c5f0:	2304      	movcc	r3, #4
 800c5f2:	441d      	add	r5, r3
 800c5f4:	4473      	add	r3, lr
 800c5f6:	469e      	mov	lr, r3
 800c5f8:	462e      	mov	r6, r5
 800c5fa:	4566      	cmp	r6, ip
 800c5fc:	d30e      	bcc.n	800c61c <__mdiff+0xec>
 800c5fe:	f10c 0203 	add.w	r2, ip, #3
 800c602:	1b52      	subs	r2, r2, r5
 800c604:	f022 0203 	bic.w	r2, r2, #3
 800c608:	3d03      	subs	r5, #3
 800c60a:	45ac      	cmp	ip, r5
 800c60c:	bf38      	it	cc
 800c60e:	2200      	movcc	r2, #0
 800c610:	441a      	add	r2, r3
 800c612:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c616:	b17b      	cbz	r3, 800c638 <__mdiff+0x108>
 800c618:	6107      	str	r7, [r0, #16]
 800c61a:	e7a3      	b.n	800c564 <__mdiff+0x34>
 800c61c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c620:	fa11 f288 	uxtah	r2, r1, r8
 800c624:	1414      	asrs	r4, r2, #16
 800c626:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c62a:	b292      	uxth	r2, r2
 800c62c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c630:	f84e 2b04 	str.w	r2, [lr], #4
 800c634:	1421      	asrs	r1, r4, #16
 800c636:	e7e0      	b.n	800c5fa <__mdiff+0xca>
 800c638:	3f01      	subs	r7, #1
 800c63a:	e7ea      	b.n	800c612 <__mdiff+0xe2>
 800c63c:	0800e1fb 	.word	0x0800e1fb
 800c640:	0800e26c 	.word	0x0800e26c

0800c644 <__d2b>:
 800c644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c648:	4689      	mov	r9, r1
 800c64a:	2101      	movs	r1, #1
 800c64c:	ec57 6b10 	vmov	r6, r7, d0
 800c650:	4690      	mov	r8, r2
 800c652:	f7ff fccf 	bl	800bff4 <_Balloc>
 800c656:	4604      	mov	r4, r0
 800c658:	b930      	cbnz	r0, 800c668 <__d2b+0x24>
 800c65a:	4602      	mov	r2, r0
 800c65c:	4b25      	ldr	r3, [pc, #148]	; (800c6f4 <__d2b+0xb0>)
 800c65e:	4826      	ldr	r0, [pc, #152]	; (800c6f8 <__d2b+0xb4>)
 800c660:	f240 310a 	movw	r1, #778	; 0x30a
 800c664:	f000 fc5c 	bl	800cf20 <__assert_func>
 800c668:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c66c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c670:	bb35      	cbnz	r5, 800c6c0 <__d2b+0x7c>
 800c672:	2e00      	cmp	r6, #0
 800c674:	9301      	str	r3, [sp, #4]
 800c676:	d028      	beq.n	800c6ca <__d2b+0x86>
 800c678:	4668      	mov	r0, sp
 800c67a:	9600      	str	r6, [sp, #0]
 800c67c:	f7ff fd82 	bl	800c184 <__lo0bits>
 800c680:	9900      	ldr	r1, [sp, #0]
 800c682:	b300      	cbz	r0, 800c6c6 <__d2b+0x82>
 800c684:	9a01      	ldr	r2, [sp, #4]
 800c686:	f1c0 0320 	rsb	r3, r0, #32
 800c68a:	fa02 f303 	lsl.w	r3, r2, r3
 800c68e:	430b      	orrs	r3, r1
 800c690:	40c2      	lsrs	r2, r0
 800c692:	6163      	str	r3, [r4, #20]
 800c694:	9201      	str	r2, [sp, #4]
 800c696:	9b01      	ldr	r3, [sp, #4]
 800c698:	61a3      	str	r3, [r4, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bf14      	ite	ne
 800c69e:	2202      	movne	r2, #2
 800c6a0:	2201      	moveq	r2, #1
 800c6a2:	6122      	str	r2, [r4, #16]
 800c6a4:	b1d5      	cbz	r5, 800c6dc <__d2b+0x98>
 800c6a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6aa:	4405      	add	r5, r0
 800c6ac:	f8c9 5000 	str.w	r5, [r9]
 800c6b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6b4:	f8c8 0000 	str.w	r0, [r8]
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	b003      	add	sp, #12
 800c6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6c4:	e7d5      	b.n	800c672 <__d2b+0x2e>
 800c6c6:	6161      	str	r1, [r4, #20]
 800c6c8:	e7e5      	b.n	800c696 <__d2b+0x52>
 800c6ca:	a801      	add	r0, sp, #4
 800c6cc:	f7ff fd5a 	bl	800c184 <__lo0bits>
 800c6d0:	9b01      	ldr	r3, [sp, #4]
 800c6d2:	6163      	str	r3, [r4, #20]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	6122      	str	r2, [r4, #16]
 800c6d8:	3020      	adds	r0, #32
 800c6da:	e7e3      	b.n	800c6a4 <__d2b+0x60>
 800c6dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6e4:	f8c9 0000 	str.w	r0, [r9]
 800c6e8:	6918      	ldr	r0, [r3, #16]
 800c6ea:	f7ff fd2b 	bl	800c144 <__hi0bits>
 800c6ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6f2:	e7df      	b.n	800c6b4 <__d2b+0x70>
 800c6f4:	0800e1fb 	.word	0x0800e1fb
 800c6f8:	0800e26c 	.word	0x0800e26c

0800c6fc <_calloc_r>:
 800c6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6fe:	fba1 2402 	umull	r2, r4, r1, r2
 800c702:	b94c      	cbnz	r4, 800c718 <_calloc_r+0x1c>
 800c704:	4611      	mov	r1, r2
 800c706:	9201      	str	r2, [sp, #4]
 800c708:	f000 f87a 	bl	800c800 <_malloc_r>
 800c70c:	9a01      	ldr	r2, [sp, #4]
 800c70e:	4605      	mov	r5, r0
 800c710:	b930      	cbnz	r0, 800c720 <_calloc_r+0x24>
 800c712:	4628      	mov	r0, r5
 800c714:	b003      	add	sp, #12
 800c716:	bd30      	pop	{r4, r5, pc}
 800c718:	220c      	movs	r2, #12
 800c71a:	6002      	str	r2, [r0, #0]
 800c71c:	2500      	movs	r5, #0
 800c71e:	e7f8      	b.n	800c712 <_calloc_r+0x16>
 800c720:	4621      	mov	r1, r4
 800c722:	f7fd fde1 	bl	800a2e8 <memset>
 800c726:	e7f4      	b.n	800c712 <_calloc_r+0x16>

0800c728 <_free_r>:
 800c728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c72a:	2900      	cmp	r1, #0
 800c72c:	d044      	beq.n	800c7b8 <_free_r+0x90>
 800c72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c732:	9001      	str	r0, [sp, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	f1a1 0404 	sub.w	r4, r1, #4
 800c73a:	bfb8      	it	lt
 800c73c:	18e4      	addlt	r4, r4, r3
 800c73e:	f000 fc8f 	bl	800d060 <__malloc_lock>
 800c742:	4a1e      	ldr	r2, [pc, #120]	; (800c7bc <_free_r+0x94>)
 800c744:	9801      	ldr	r0, [sp, #4]
 800c746:	6813      	ldr	r3, [r2, #0]
 800c748:	b933      	cbnz	r3, 800c758 <_free_r+0x30>
 800c74a:	6063      	str	r3, [r4, #4]
 800c74c:	6014      	str	r4, [r2, #0]
 800c74e:	b003      	add	sp, #12
 800c750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c754:	f000 bc8a 	b.w	800d06c <__malloc_unlock>
 800c758:	42a3      	cmp	r3, r4
 800c75a:	d908      	bls.n	800c76e <_free_r+0x46>
 800c75c:	6825      	ldr	r5, [r4, #0]
 800c75e:	1961      	adds	r1, r4, r5
 800c760:	428b      	cmp	r3, r1
 800c762:	bf01      	itttt	eq
 800c764:	6819      	ldreq	r1, [r3, #0]
 800c766:	685b      	ldreq	r3, [r3, #4]
 800c768:	1949      	addeq	r1, r1, r5
 800c76a:	6021      	streq	r1, [r4, #0]
 800c76c:	e7ed      	b.n	800c74a <_free_r+0x22>
 800c76e:	461a      	mov	r2, r3
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	b10b      	cbz	r3, 800c778 <_free_r+0x50>
 800c774:	42a3      	cmp	r3, r4
 800c776:	d9fa      	bls.n	800c76e <_free_r+0x46>
 800c778:	6811      	ldr	r1, [r2, #0]
 800c77a:	1855      	adds	r5, r2, r1
 800c77c:	42a5      	cmp	r5, r4
 800c77e:	d10b      	bne.n	800c798 <_free_r+0x70>
 800c780:	6824      	ldr	r4, [r4, #0]
 800c782:	4421      	add	r1, r4
 800c784:	1854      	adds	r4, r2, r1
 800c786:	42a3      	cmp	r3, r4
 800c788:	6011      	str	r1, [r2, #0]
 800c78a:	d1e0      	bne.n	800c74e <_free_r+0x26>
 800c78c:	681c      	ldr	r4, [r3, #0]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	6053      	str	r3, [r2, #4]
 800c792:	4421      	add	r1, r4
 800c794:	6011      	str	r1, [r2, #0]
 800c796:	e7da      	b.n	800c74e <_free_r+0x26>
 800c798:	d902      	bls.n	800c7a0 <_free_r+0x78>
 800c79a:	230c      	movs	r3, #12
 800c79c:	6003      	str	r3, [r0, #0]
 800c79e:	e7d6      	b.n	800c74e <_free_r+0x26>
 800c7a0:	6825      	ldr	r5, [r4, #0]
 800c7a2:	1961      	adds	r1, r4, r5
 800c7a4:	428b      	cmp	r3, r1
 800c7a6:	bf04      	itt	eq
 800c7a8:	6819      	ldreq	r1, [r3, #0]
 800c7aa:	685b      	ldreq	r3, [r3, #4]
 800c7ac:	6063      	str	r3, [r4, #4]
 800c7ae:	bf04      	itt	eq
 800c7b0:	1949      	addeq	r1, r1, r5
 800c7b2:	6021      	streq	r1, [r4, #0]
 800c7b4:	6054      	str	r4, [r2, #4]
 800c7b6:	e7ca      	b.n	800c74e <_free_r+0x26>
 800c7b8:	b003      	add	sp, #12
 800c7ba:	bd30      	pop	{r4, r5, pc}
 800c7bc:	20002aac 	.word	0x20002aac

0800c7c0 <sbrk_aligned>:
 800c7c0:	b570      	push	{r4, r5, r6, lr}
 800c7c2:	4e0e      	ldr	r6, [pc, #56]	; (800c7fc <sbrk_aligned+0x3c>)
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	6831      	ldr	r1, [r6, #0]
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	b911      	cbnz	r1, 800c7d2 <sbrk_aligned+0x12>
 800c7cc:	f000 fb42 	bl	800ce54 <_sbrk_r>
 800c7d0:	6030      	str	r0, [r6, #0]
 800c7d2:	4621      	mov	r1, r4
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	f000 fb3d 	bl	800ce54 <_sbrk_r>
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	d00a      	beq.n	800c7f4 <sbrk_aligned+0x34>
 800c7de:	1cc4      	adds	r4, r0, #3
 800c7e0:	f024 0403 	bic.w	r4, r4, #3
 800c7e4:	42a0      	cmp	r0, r4
 800c7e6:	d007      	beq.n	800c7f8 <sbrk_aligned+0x38>
 800c7e8:	1a21      	subs	r1, r4, r0
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f000 fb32 	bl	800ce54 <_sbrk_r>
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	d101      	bne.n	800c7f8 <sbrk_aligned+0x38>
 800c7f4:	f04f 34ff 	mov.w	r4, #4294967295
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	bd70      	pop	{r4, r5, r6, pc}
 800c7fc:	20002ab0 	.word	0x20002ab0

0800c800 <_malloc_r>:
 800c800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c804:	1ccd      	adds	r5, r1, #3
 800c806:	f025 0503 	bic.w	r5, r5, #3
 800c80a:	3508      	adds	r5, #8
 800c80c:	2d0c      	cmp	r5, #12
 800c80e:	bf38      	it	cc
 800c810:	250c      	movcc	r5, #12
 800c812:	2d00      	cmp	r5, #0
 800c814:	4607      	mov	r7, r0
 800c816:	db01      	blt.n	800c81c <_malloc_r+0x1c>
 800c818:	42a9      	cmp	r1, r5
 800c81a:	d905      	bls.n	800c828 <_malloc_r+0x28>
 800c81c:	230c      	movs	r3, #12
 800c81e:	603b      	str	r3, [r7, #0]
 800c820:	2600      	movs	r6, #0
 800c822:	4630      	mov	r0, r6
 800c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c828:	4e2e      	ldr	r6, [pc, #184]	; (800c8e4 <_malloc_r+0xe4>)
 800c82a:	f000 fc19 	bl	800d060 <__malloc_lock>
 800c82e:	6833      	ldr	r3, [r6, #0]
 800c830:	461c      	mov	r4, r3
 800c832:	bb34      	cbnz	r4, 800c882 <_malloc_r+0x82>
 800c834:	4629      	mov	r1, r5
 800c836:	4638      	mov	r0, r7
 800c838:	f7ff ffc2 	bl	800c7c0 <sbrk_aligned>
 800c83c:	1c43      	adds	r3, r0, #1
 800c83e:	4604      	mov	r4, r0
 800c840:	d14d      	bne.n	800c8de <_malloc_r+0xde>
 800c842:	6834      	ldr	r4, [r6, #0]
 800c844:	4626      	mov	r6, r4
 800c846:	2e00      	cmp	r6, #0
 800c848:	d140      	bne.n	800c8cc <_malloc_r+0xcc>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	4631      	mov	r1, r6
 800c84e:	4638      	mov	r0, r7
 800c850:	eb04 0803 	add.w	r8, r4, r3
 800c854:	f000 fafe 	bl	800ce54 <_sbrk_r>
 800c858:	4580      	cmp	r8, r0
 800c85a:	d13a      	bne.n	800c8d2 <_malloc_r+0xd2>
 800c85c:	6821      	ldr	r1, [r4, #0]
 800c85e:	3503      	adds	r5, #3
 800c860:	1a6d      	subs	r5, r5, r1
 800c862:	f025 0503 	bic.w	r5, r5, #3
 800c866:	3508      	adds	r5, #8
 800c868:	2d0c      	cmp	r5, #12
 800c86a:	bf38      	it	cc
 800c86c:	250c      	movcc	r5, #12
 800c86e:	4629      	mov	r1, r5
 800c870:	4638      	mov	r0, r7
 800c872:	f7ff ffa5 	bl	800c7c0 <sbrk_aligned>
 800c876:	3001      	adds	r0, #1
 800c878:	d02b      	beq.n	800c8d2 <_malloc_r+0xd2>
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	442b      	add	r3, r5
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	e00e      	b.n	800c8a0 <_malloc_r+0xa0>
 800c882:	6822      	ldr	r2, [r4, #0]
 800c884:	1b52      	subs	r2, r2, r5
 800c886:	d41e      	bmi.n	800c8c6 <_malloc_r+0xc6>
 800c888:	2a0b      	cmp	r2, #11
 800c88a:	d916      	bls.n	800c8ba <_malloc_r+0xba>
 800c88c:	1961      	adds	r1, r4, r5
 800c88e:	42a3      	cmp	r3, r4
 800c890:	6025      	str	r5, [r4, #0]
 800c892:	bf18      	it	ne
 800c894:	6059      	strne	r1, [r3, #4]
 800c896:	6863      	ldr	r3, [r4, #4]
 800c898:	bf08      	it	eq
 800c89a:	6031      	streq	r1, [r6, #0]
 800c89c:	5162      	str	r2, [r4, r5]
 800c89e:	604b      	str	r3, [r1, #4]
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	f104 060b 	add.w	r6, r4, #11
 800c8a6:	f000 fbe1 	bl	800d06c <__malloc_unlock>
 800c8aa:	f026 0607 	bic.w	r6, r6, #7
 800c8ae:	1d23      	adds	r3, r4, #4
 800c8b0:	1af2      	subs	r2, r6, r3
 800c8b2:	d0b6      	beq.n	800c822 <_malloc_r+0x22>
 800c8b4:	1b9b      	subs	r3, r3, r6
 800c8b6:	50a3      	str	r3, [r4, r2]
 800c8b8:	e7b3      	b.n	800c822 <_malloc_r+0x22>
 800c8ba:	6862      	ldr	r2, [r4, #4]
 800c8bc:	42a3      	cmp	r3, r4
 800c8be:	bf0c      	ite	eq
 800c8c0:	6032      	streq	r2, [r6, #0]
 800c8c2:	605a      	strne	r2, [r3, #4]
 800c8c4:	e7ec      	b.n	800c8a0 <_malloc_r+0xa0>
 800c8c6:	4623      	mov	r3, r4
 800c8c8:	6864      	ldr	r4, [r4, #4]
 800c8ca:	e7b2      	b.n	800c832 <_malloc_r+0x32>
 800c8cc:	4634      	mov	r4, r6
 800c8ce:	6876      	ldr	r6, [r6, #4]
 800c8d0:	e7b9      	b.n	800c846 <_malloc_r+0x46>
 800c8d2:	230c      	movs	r3, #12
 800c8d4:	603b      	str	r3, [r7, #0]
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	f000 fbc8 	bl	800d06c <__malloc_unlock>
 800c8dc:	e7a1      	b.n	800c822 <_malloc_r+0x22>
 800c8de:	6025      	str	r5, [r4, #0]
 800c8e0:	e7de      	b.n	800c8a0 <_malloc_r+0xa0>
 800c8e2:	bf00      	nop
 800c8e4:	20002aac 	.word	0x20002aac

0800c8e8 <__ssputs_r>:
 800c8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8ec:	688e      	ldr	r6, [r1, #8]
 800c8ee:	429e      	cmp	r6, r3
 800c8f0:	4682      	mov	sl, r0
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	4690      	mov	r8, r2
 800c8f6:	461f      	mov	r7, r3
 800c8f8:	d838      	bhi.n	800c96c <__ssputs_r+0x84>
 800c8fa:	898a      	ldrh	r2, [r1, #12]
 800c8fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c900:	d032      	beq.n	800c968 <__ssputs_r+0x80>
 800c902:	6825      	ldr	r5, [r4, #0]
 800c904:	6909      	ldr	r1, [r1, #16]
 800c906:	eba5 0901 	sub.w	r9, r5, r1
 800c90a:	6965      	ldr	r5, [r4, #20]
 800c90c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c914:	3301      	adds	r3, #1
 800c916:	444b      	add	r3, r9
 800c918:	106d      	asrs	r5, r5, #1
 800c91a:	429d      	cmp	r5, r3
 800c91c:	bf38      	it	cc
 800c91e:	461d      	movcc	r5, r3
 800c920:	0553      	lsls	r3, r2, #21
 800c922:	d531      	bpl.n	800c988 <__ssputs_r+0xa0>
 800c924:	4629      	mov	r1, r5
 800c926:	f7ff ff6b 	bl	800c800 <_malloc_r>
 800c92a:	4606      	mov	r6, r0
 800c92c:	b950      	cbnz	r0, 800c944 <__ssputs_r+0x5c>
 800c92e:	230c      	movs	r3, #12
 800c930:	f8ca 3000 	str.w	r3, [sl]
 800c934:	89a3      	ldrh	r3, [r4, #12]
 800c936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c93a:	81a3      	strh	r3, [r4, #12]
 800c93c:	f04f 30ff 	mov.w	r0, #4294967295
 800c940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c944:	6921      	ldr	r1, [r4, #16]
 800c946:	464a      	mov	r2, r9
 800c948:	f7fd fcc0 	bl	800a2cc <memcpy>
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c956:	81a3      	strh	r3, [r4, #12]
 800c958:	6126      	str	r6, [r4, #16]
 800c95a:	6165      	str	r5, [r4, #20]
 800c95c:	444e      	add	r6, r9
 800c95e:	eba5 0509 	sub.w	r5, r5, r9
 800c962:	6026      	str	r6, [r4, #0]
 800c964:	60a5      	str	r5, [r4, #8]
 800c966:	463e      	mov	r6, r7
 800c968:	42be      	cmp	r6, r7
 800c96a:	d900      	bls.n	800c96e <__ssputs_r+0x86>
 800c96c:	463e      	mov	r6, r7
 800c96e:	6820      	ldr	r0, [r4, #0]
 800c970:	4632      	mov	r2, r6
 800c972:	4641      	mov	r1, r8
 800c974:	f000 fb5a 	bl	800d02c <memmove>
 800c978:	68a3      	ldr	r3, [r4, #8]
 800c97a:	1b9b      	subs	r3, r3, r6
 800c97c:	60a3      	str	r3, [r4, #8]
 800c97e:	6823      	ldr	r3, [r4, #0]
 800c980:	4433      	add	r3, r6
 800c982:	6023      	str	r3, [r4, #0]
 800c984:	2000      	movs	r0, #0
 800c986:	e7db      	b.n	800c940 <__ssputs_r+0x58>
 800c988:	462a      	mov	r2, r5
 800c98a:	f000 fb75 	bl	800d078 <_realloc_r>
 800c98e:	4606      	mov	r6, r0
 800c990:	2800      	cmp	r0, #0
 800c992:	d1e1      	bne.n	800c958 <__ssputs_r+0x70>
 800c994:	6921      	ldr	r1, [r4, #16]
 800c996:	4650      	mov	r0, sl
 800c998:	f7ff fec6 	bl	800c728 <_free_r>
 800c99c:	e7c7      	b.n	800c92e <__ssputs_r+0x46>
	...

0800c9a0 <_svfiprintf_r>:
 800c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a4:	4698      	mov	r8, r3
 800c9a6:	898b      	ldrh	r3, [r1, #12]
 800c9a8:	061b      	lsls	r3, r3, #24
 800c9aa:	b09d      	sub	sp, #116	; 0x74
 800c9ac:	4607      	mov	r7, r0
 800c9ae:	460d      	mov	r5, r1
 800c9b0:	4614      	mov	r4, r2
 800c9b2:	d50e      	bpl.n	800c9d2 <_svfiprintf_r+0x32>
 800c9b4:	690b      	ldr	r3, [r1, #16]
 800c9b6:	b963      	cbnz	r3, 800c9d2 <_svfiprintf_r+0x32>
 800c9b8:	2140      	movs	r1, #64	; 0x40
 800c9ba:	f7ff ff21 	bl	800c800 <_malloc_r>
 800c9be:	6028      	str	r0, [r5, #0]
 800c9c0:	6128      	str	r0, [r5, #16]
 800c9c2:	b920      	cbnz	r0, 800c9ce <_svfiprintf_r+0x2e>
 800c9c4:	230c      	movs	r3, #12
 800c9c6:	603b      	str	r3, [r7, #0]
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	e0d1      	b.n	800cb72 <_svfiprintf_r+0x1d2>
 800c9ce:	2340      	movs	r3, #64	; 0x40
 800c9d0:	616b      	str	r3, [r5, #20]
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d6:	2320      	movs	r3, #32
 800c9d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9e0:	2330      	movs	r3, #48	; 0x30
 800c9e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb8c <_svfiprintf_r+0x1ec>
 800c9e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9ea:	f04f 0901 	mov.w	r9, #1
 800c9ee:	4623      	mov	r3, r4
 800c9f0:	469a      	mov	sl, r3
 800c9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9f6:	b10a      	cbz	r2, 800c9fc <_svfiprintf_r+0x5c>
 800c9f8:	2a25      	cmp	r2, #37	; 0x25
 800c9fa:	d1f9      	bne.n	800c9f0 <_svfiprintf_r+0x50>
 800c9fc:	ebba 0b04 	subs.w	fp, sl, r4
 800ca00:	d00b      	beq.n	800ca1a <_svfiprintf_r+0x7a>
 800ca02:	465b      	mov	r3, fp
 800ca04:	4622      	mov	r2, r4
 800ca06:	4629      	mov	r1, r5
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f7ff ff6d 	bl	800c8e8 <__ssputs_r>
 800ca0e:	3001      	adds	r0, #1
 800ca10:	f000 80aa 	beq.w	800cb68 <_svfiprintf_r+0x1c8>
 800ca14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca16:	445a      	add	r2, fp
 800ca18:	9209      	str	r2, [sp, #36]	; 0x24
 800ca1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 80a2 	beq.w	800cb68 <_svfiprintf_r+0x1c8>
 800ca24:	2300      	movs	r3, #0
 800ca26:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca2e:	f10a 0a01 	add.w	sl, sl, #1
 800ca32:	9304      	str	r3, [sp, #16]
 800ca34:	9307      	str	r3, [sp, #28]
 800ca36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ca3c:	4654      	mov	r4, sl
 800ca3e:	2205      	movs	r2, #5
 800ca40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca44:	4851      	ldr	r0, [pc, #324]	; (800cb8c <_svfiprintf_r+0x1ec>)
 800ca46:	f7f3 fbcb 	bl	80001e0 <memchr>
 800ca4a:	9a04      	ldr	r2, [sp, #16]
 800ca4c:	b9d8      	cbnz	r0, 800ca86 <_svfiprintf_r+0xe6>
 800ca4e:	06d0      	lsls	r0, r2, #27
 800ca50:	bf44      	itt	mi
 800ca52:	2320      	movmi	r3, #32
 800ca54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca58:	0711      	lsls	r1, r2, #28
 800ca5a:	bf44      	itt	mi
 800ca5c:	232b      	movmi	r3, #43	; 0x2b
 800ca5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca62:	f89a 3000 	ldrb.w	r3, [sl]
 800ca66:	2b2a      	cmp	r3, #42	; 0x2a
 800ca68:	d015      	beq.n	800ca96 <_svfiprintf_r+0xf6>
 800ca6a:	9a07      	ldr	r2, [sp, #28]
 800ca6c:	4654      	mov	r4, sl
 800ca6e:	2000      	movs	r0, #0
 800ca70:	f04f 0c0a 	mov.w	ip, #10
 800ca74:	4621      	mov	r1, r4
 800ca76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca7a:	3b30      	subs	r3, #48	; 0x30
 800ca7c:	2b09      	cmp	r3, #9
 800ca7e:	d94e      	bls.n	800cb1e <_svfiprintf_r+0x17e>
 800ca80:	b1b0      	cbz	r0, 800cab0 <_svfiprintf_r+0x110>
 800ca82:	9207      	str	r2, [sp, #28]
 800ca84:	e014      	b.n	800cab0 <_svfiprintf_r+0x110>
 800ca86:	eba0 0308 	sub.w	r3, r0, r8
 800ca8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	9304      	str	r3, [sp, #16]
 800ca92:	46a2      	mov	sl, r4
 800ca94:	e7d2      	b.n	800ca3c <_svfiprintf_r+0x9c>
 800ca96:	9b03      	ldr	r3, [sp, #12]
 800ca98:	1d19      	adds	r1, r3, #4
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	9103      	str	r1, [sp, #12]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	bfbb      	ittet	lt
 800caa2:	425b      	neglt	r3, r3
 800caa4:	f042 0202 	orrlt.w	r2, r2, #2
 800caa8:	9307      	strge	r3, [sp, #28]
 800caaa:	9307      	strlt	r3, [sp, #28]
 800caac:	bfb8      	it	lt
 800caae:	9204      	strlt	r2, [sp, #16]
 800cab0:	7823      	ldrb	r3, [r4, #0]
 800cab2:	2b2e      	cmp	r3, #46	; 0x2e
 800cab4:	d10c      	bne.n	800cad0 <_svfiprintf_r+0x130>
 800cab6:	7863      	ldrb	r3, [r4, #1]
 800cab8:	2b2a      	cmp	r3, #42	; 0x2a
 800caba:	d135      	bne.n	800cb28 <_svfiprintf_r+0x188>
 800cabc:	9b03      	ldr	r3, [sp, #12]
 800cabe:	1d1a      	adds	r2, r3, #4
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	9203      	str	r2, [sp, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	bfb8      	it	lt
 800cac8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cacc:	3402      	adds	r4, #2
 800cace:	9305      	str	r3, [sp, #20]
 800cad0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb9c <_svfiprintf_r+0x1fc>
 800cad4:	7821      	ldrb	r1, [r4, #0]
 800cad6:	2203      	movs	r2, #3
 800cad8:	4650      	mov	r0, sl
 800cada:	f7f3 fb81 	bl	80001e0 <memchr>
 800cade:	b140      	cbz	r0, 800caf2 <_svfiprintf_r+0x152>
 800cae0:	2340      	movs	r3, #64	; 0x40
 800cae2:	eba0 000a 	sub.w	r0, r0, sl
 800cae6:	fa03 f000 	lsl.w	r0, r3, r0
 800caea:	9b04      	ldr	r3, [sp, #16]
 800caec:	4303      	orrs	r3, r0
 800caee:	3401      	adds	r4, #1
 800caf0:	9304      	str	r3, [sp, #16]
 800caf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf6:	4826      	ldr	r0, [pc, #152]	; (800cb90 <_svfiprintf_r+0x1f0>)
 800caf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cafc:	2206      	movs	r2, #6
 800cafe:	f7f3 fb6f 	bl	80001e0 <memchr>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d038      	beq.n	800cb78 <_svfiprintf_r+0x1d8>
 800cb06:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <_svfiprintf_r+0x1f4>)
 800cb08:	bb1b      	cbnz	r3, 800cb52 <_svfiprintf_r+0x1b2>
 800cb0a:	9b03      	ldr	r3, [sp, #12]
 800cb0c:	3307      	adds	r3, #7
 800cb0e:	f023 0307 	bic.w	r3, r3, #7
 800cb12:	3308      	adds	r3, #8
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb18:	4433      	add	r3, r6
 800cb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb1c:	e767      	b.n	800c9ee <_svfiprintf_r+0x4e>
 800cb1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb22:	460c      	mov	r4, r1
 800cb24:	2001      	movs	r0, #1
 800cb26:	e7a5      	b.n	800ca74 <_svfiprintf_r+0xd4>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	3401      	adds	r4, #1
 800cb2c:	9305      	str	r3, [sp, #20]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	f04f 0c0a 	mov.w	ip, #10
 800cb34:	4620      	mov	r0, r4
 800cb36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3a:	3a30      	subs	r2, #48	; 0x30
 800cb3c:	2a09      	cmp	r2, #9
 800cb3e:	d903      	bls.n	800cb48 <_svfiprintf_r+0x1a8>
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d0c5      	beq.n	800cad0 <_svfiprintf_r+0x130>
 800cb44:	9105      	str	r1, [sp, #20]
 800cb46:	e7c3      	b.n	800cad0 <_svfiprintf_r+0x130>
 800cb48:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e7f0      	b.n	800cb34 <_svfiprintf_r+0x194>
 800cb52:	ab03      	add	r3, sp, #12
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	462a      	mov	r2, r5
 800cb58:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <_svfiprintf_r+0x1f8>)
 800cb5a:	a904      	add	r1, sp, #16
 800cb5c:	4638      	mov	r0, r7
 800cb5e:	f7fd fc6b 	bl	800a438 <_printf_float>
 800cb62:	1c42      	adds	r2, r0, #1
 800cb64:	4606      	mov	r6, r0
 800cb66:	d1d6      	bne.n	800cb16 <_svfiprintf_r+0x176>
 800cb68:	89ab      	ldrh	r3, [r5, #12]
 800cb6a:	065b      	lsls	r3, r3, #25
 800cb6c:	f53f af2c 	bmi.w	800c9c8 <_svfiprintf_r+0x28>
 800cb70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb72:	b01d      	add	sp, #116	; 0x74
 800cb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb78:	ab03      	add	r3, sp, #12
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	462a      	mov	r2, r5
 800cb7e:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <_svfiprintf_r+0x1f8>)
 800cb80:	a904      	add	r1, sp, #16
 800cb82:	4638      	mov	r0, r7
 800cb84:	f7fd fefc 	bl	800a980 <_printf_i>
 800cb88:	e7eb      	b.n	800cb62 <_svfiprintf_r+0x1c2>
 800cb8a:	bf00      	nop
 800cb8c:	0800e3c4 	.word	0x0800e3c4
 800cb90:	0800e3ce 	.word	0x0800e3ce
 800cb94:	0800a439 	.word	0x0800a439
 800cb98:	0800c8e9 	.word	0x0800c8e9
 800cb9c:	0800e3ca 	.word	0x0800e3ca

0800cba0 <__sfputc_r>:
 800cba0:	6893      	ldr	r3, [r2, #8]
 800cba2:	3b01      	subs	r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	b410      	push	{r4}
 800cba8:	6093      	str	r3, [r2, #8]
 800cbaa:	da08      	bge.n	800cbbe <__sfputc_r+0x1e>
 800cbac:	6994      	ldr	r4, [r2, #24]
 800cbae:	42a3      	cmp	r3, r4
 800cbb0:	db01      	blt.n	800cbb6 <__sfputc_r+0x16>
 800cbb2:	290a      	cmp	r1, #10
 800cbb4:	d103      	bne.n	800cbbe <__sfputc_r+0x1e>
 800cbb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbba:	f7fe b8b5 	b.w	800ad28 <__swbuf_r>
 800cbbe:	6813      	ldr	r3, [r2, #0]
 800cbc0:	1c58      	adds	r0, r3, #1
 800cbc2:	6010      	str	r0, [r2, #0]
 800cbc4:	7019      	strb	r1, [r3, #0]
 800cbc6:	4608      	mov	r0, r1
 800cbc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <__sfputs_r>:
 800cbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	460f      	mov	r7, r1
 800cbd4:	4614      	mov	r4, r2
 800cbd6:	18d5      	adds	r5, r2, r3
 800cbd8:	42ac      	cmp	r4, r5
 800cbda:	d101      	bne.n	800cbe0 <__sfputs_r+0x12>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	e007      	b.n	800cbf0 <__sfputs_r+0x22>
 800cbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe4:	463a      	mov	r2, r7
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7ff ffda 	bl	800cba0 <__sfputc_r>
 800cbec:	1c43      	adds	r3, r0, #1
 800cbee:	d1f3      	bne.n	800cbd8 <__sfputs_r+0xa>
 800cbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cbf4 <_vfiprintf_r>:
 800cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	460d      	mov	r5, r1
 800cbfa:	b09d      	sub	sp, #116	; 0x74
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	4698      	mov	r8, r3
 800cc00:	4606      	mov	r6, r0
 800cc02:	b118      	cbz	r0, 800cc0c <_vfiprintf_r+0x18>
 800cc04:	6983      	ldr	r3, [r0, #24]
 800cc06:	b90b      	cbnz	r3, 800cc0c <_vfiprintf_r+0x18>
 800cc08:	f7ff f8e2 	bl	800bdd0 <__sinit>
 800cc0c:	4b89      	ldr	r3, [pc, #548]	; (800ce34 <_vfiprintf_r+0x240>)
 800cc0e:	429d      	cmp	r5, r3
 800cc10:	d11b      	bne.n	800cc4a <_vfiprintf_r+0x56>
 800cc12:	6875      	ldr	r5, [r6, #4]
 800cc14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc16:	07d9      	lsls	r1, r3, #31
 800cc18:	d405      	bmi.n	800cc26 <_vfiprintf_r+0x32>
 800cc1a:	89ab      	ldrh	r3, [r5, #12]
 800cc1c:	059a      	lsls	r2, r3, #22
 800cc1e:	d402      	bmi.n	800cc26 <_vfiprintf_r+0x32>
 800cc20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc22:	f7ff f978 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800cc26:	89ab      	ldrh	r3, [r5, #12]
 800cc28:	071b      	lsls	r3, r3, #28
 800cc2a:	d501      	bpl.n	800cc30 <_vfiprintf_r+0x3c>
 800cc2c:	692b      	ldr	r3, [r5, #16]
 800cc2e:	b9eb      	cbnz	r3, 800cc6c <_vfiprintf_r+0x78>
 800cc30:	4629      	mov	r1, r5
 800cc32:	4630      	mov	r0, r6
 800cc34:	f7fe f8ca 	bl	800adcc <__swsetup_r>
 800cc38:	b1c0      	cbz	r0, 800cc6c <_vfiprintf_r+0x78>
 800cc3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc3c:	07dc      	lsls	r4, r3, #31
 800cc3e:	d50e      	bpl.n	800cc5e <_vfiprintf_r+0x6a>
 800cc40:	f04f 30ff 	mov.w	r0, #4294967295
 800cc44:	b01d      	add	sp, #116	; 0x74
 800cc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4a:	4b7b      	ldr	r3, [pc, #492]	; (800ce38 <_vfiprintf_r+0x244>)
 800cc4c:	429d      	cmp	r5, r3
 800cc4e:	d101      	bne.n	800cc54 <_vfiprintf_r+0x60>
 800cc50:	68b5      	ldr	r5, [r6, #8]
 800cc52:	e7df      	b.n	800cc14 <_vfiprintf_r+0x20>
 800cc54:	4b79      	ldr	r3, [pc, #484]	; (800ce3c <_vfiprintf_r+0x248>)
 800cc56:	429d      	cmp	r5, r3
 800cc58:	bf08      	it	eq
 800cc5a:	68f5      	ldreq	r5, [r6, #12]
 800cc5c:	e7da      	b.n	800cc14 <_vfiprintf_r+0x20>
 800cc5e:	89ab      	ldrh	r3, [r5, #12]
 800cc60:	0598      	lsls	r0, r3, #22
 800cc62:	d4ed      	bmi.n	800cc40 <_vfiprintf_r+0x4c>
 800cc64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc66:	f7ff f957 	bl	800bf18 <__retarget_lock_release_recursive>
 800cc6a:	e7e9      	b.n	800cc40 <_vfiprintf_r+0x4c>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc70:	2320      	movs	r3, #32
 800cc72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc76:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc7a:	2330      	movs	r3, #48	; 0x30
 800cc7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce40 <_vfiprintf_r+0x24c>
 800cc80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc84:	f04f 0901 	mov.w	r9, #1
 800cc88:	4623      	mov	r3, r4
 800cc8a:	469a      	mov	sl, r3
 800cc8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc90:	b10a      	cbz	r2, 800cc96 <_vfiprintf_r+0xa2>
 800cc92:	2a25      	cmp	r2, #37	; 0x25
 800cc94:	d1f9      	bne.n	800cc8a <_vfiprintf_r+0x96>
 800cc96:	ebba 0b04 	subs.w	fp, sl, r4
 800cc9a:	d00b      	beq.n	800ccb4 <_vfiprintf_r+0xc0>
 800cc9c:	465b      	mov	r3, fp
 800cc9e:	4622      	mov	r2, r4
 800cca0:	4629      	mov	r1, r5
 800cca2:	4630      	mov	r0, r6
 800cca4:	f7ff ff93 	bl	800cbce <__sfputs_r>
 800cca8:	3001      	adds	r0, #1
 800ccaa:	f000 80aa 	beq.w	800ce02 <_vfiprintf_r+0x20e>
 800ccae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccb0:	445a      	add	r2, fp
 800ccb2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 80a2 	beq.w	800ce02 <_vfiprintf_r+0x20e>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccc8:	f10a 0a01 	add.w	sl, sl, #1
 800cccc:	9304      	str	r3, [sp, #16]
 800ccce:	9307      	str	r3, [sp, #28]
 800ccd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccd4:	931a      	str	r3, [sp, #104]	; 0x68
 800ccd6:	4654      	mov	r4, sl
 800ccd8:	2205      	movs	r2, #5
 800ccda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccde:	4858      	ldr	r0, [pc, #352]	; (800ce40 <_vfiprintf_r+0x24c>)
 800cce0:	f7f3 fa7e 	bl	80001e0 <memchr>
 800cce4:	9a04      	ldr	r2, [sp, #16]
 800cce6:	b9d8      	cbnz	r0, 800cd20 <_vfiprintf_r+0x12c>
 800cce8:	06d1      	lsls	r1, r2, #27
 800ccea:	bf44      	itt	mi
 800ccec:	2320      	movmi	r3, #32
 800ccee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccf2:	0713      	lsls	r3, r2, #28
 800ccf4:	bf44      	itt	mi
 800ccf6:	232b      	movmi	r3, #43	; 0x2b
 800ccf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccfc:	f89a 3000 	ldrb.w	r3, [sl]
 800cd00:	2b2a      	cmp	r3, #42	; 0x2a
 800cd02:	d015      	beq.n	800cd30 <_vfiprintf_r+0x13c>
 800cd04:	9a07      	ldr	r2, [sp, #28]
 800cd06:	4654      	mov	r4, sl
 800cd08:	2000      	movs	r0, #0
 800cd0a:	f04f 0c0a 	mov.w	ip, #10
 800cd0e:	4621      	mov	r1, r4
 800cd10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd14:	3b30      	subs	r3, #48	; 0x30
 800cd16:	2b09      	cmp	r3, #9
 800cd18:	d94e      	bls.n	800cdb8 <_vfiprintf_r+0x1c4>
 800cd1a:	b1b0      	cbz	r0, 800cd4a <_vfiprintf_r+0x156>
 800cd1c:	9207      	str	r2, [sp, #28]
 800cd1e:	e014      	b.n	800cd4a <_vfiprintf_r+0x156>
 800cd20:	eba0 0308 	sub.w	r3, r0, r8
 800cd24:	fa09 f303 	lsl.w	r3, r9, r3
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	9304      	str	r3, [sp, #16]
 800cd2c:	46a2      	mov	sl, r4
 800cd2e:	e7d2      	b.n	800ccd6 <_vfiprintf_r+0xe2>
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	1d19      	adds	r1, r3, #4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	9103      	str	r1, [sp, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfbb      	ittet	lt
 800cd3c:	425b      	neglt	r3, r3
 800cd3e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd42:	9307      	strge	r3, [sp, #28]
 800cd44:	9307      	strlt	r3, [sp, #28]
 800cd46:	bfb8      	it	lt
 800cd48:	9204      	strlt	r2, [sp, #16]
 800cd4a:	7823      	ldrb	r3, [r4, #0]
 800cd4c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd4e:	d10c      	bne.n	800cd6a <_vfiprintf_r+0x176>
 800cd50:	7863      	ldrb	r3, [r4, #1]
 800cd52:	2b2a      	cmp	r3, #42	; 0x2a
 800cd54:	d135      	bne.n	800cdc2 <_vfiprintf_r+0x1ce>
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	1d1a      	adds	r2, r3, #4
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	9203      	str	r2, [sp, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bfb8      	it	lt
 800cd62:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd66:	3402      	adds	r4, #2
 800cd68:	9305      	str	r3, [sp, #20]
 800cd6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce50 <_vfiprintf_r+0x25c>
 800cd6e:	7821      	ldrb	r1, [r4, #0]
 800cd70:	2203      	movs	r2, #3
 800cd72:	4650      	mov	r0, sl
 800cd74:	f7f3 fa34 	bl	80001e0 <memchr>
 800cd78:	b140      	cbz	r0, 800cd8c <_vfiprintf_r+0x198>
 800cd7a:	2340      	movs	r3, #64	; 0x40
 800cd7c:	eba0 000a 	sub.w	r0, r0, sl
 800cd80:	fa03 f000 	lsl.w	r0, r3, r0
 800cd84:	9b04      	ldr	r3, [sp, #16]
 800cd86:	4303      	orrs	r3, r0
 800cd88:	3401      	adds	r4, #1
 800cd8a:	9304      	str	r3, [sp, #16]
 800cd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd90:	482c      	ldr	r0, [pc, #176]	; (800ce44 <_vfiprintf_r+0x250>)
 800cd92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd96:	2206      	movs	r2, #6
 800cd98:	f7f3 fa22 	bl	80001e0 <memchr>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d03f      	beq.n	800ce20 <_vfiprintf_r+0x22c>
 800cda0:	4b29      	ldr	r3, [pc, #164]	; (800ce48 <_vfiprintf_r+0x254>)
 800cda2:	bb1b      	cbnz	r3, 800cdec <_vfiprintf_r+0x1f8>
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	3307      	adds	r3, #7
 800cda8:	f023 0307 	bic.w	r3, r3, #7
 800cdac:	3308      	adds	r3, #8
 800cdae:	9303      	str	r3, [sp, #12]
 800cdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb2:	443b      	add	r3, r7
 800cdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdb6:	e767      	b.n	800cc88 <_vfiprintf_r+0x94>
 800cdb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	2001      	movs	r0, #1
 800cdc0:	e7a5      	b.n	800cd0e <_vfiprintf_r+0x11a>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	3401      	adds	r4, #1
 800cdc6:	9305      	str	r3, [sp, #20]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	f04f 0c0a 	mov.w	ip, #10
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdd4:	3a30      	subs	r2, #48	; 0x30
 800cdd6:	2a09      	cmp	r2, #9
 800cdd8:	d903      	bls.n	800cde2 <_vfiprintf_r+0x1ee>
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0c5      	beq.n	800cd6a <_vfiprintf_r+0x176>
 800cdde:	9105      	str	r1, [sp, #20]
 800cde0:	e7c3      	b.n	800cd6a <_vfiprintf_r+0x176>
 800cde2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cde6:	4604      	mov	r4, r0
 800cde8:	2301      	movs	r3, #1
 800cdea:	e7f0      	b.n	800cdce <_vfiprintf_r+0x1da>
 800cdec:	ab03      	add	r3, sp, #12
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4b16      	ldr	r3, [pc, #88]	; (800ce4c <_vfiprintf_r+0x258>)
 800cdf4:	a904      	add	r1, sp, #16
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f7fd fb1e 	bl	800a438 <_printf_float>
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	1c78      	adds	r0, r7, #1
 800ce00:	d1d6      	bne.n	800cdb0 <_vfiprintf_r+0x1bc>
 800ce02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce04:	07d9      	lsls	r1, r3, #31
 800ce06:	d405      	bmi.n	800ce14 <_vfiprintf_r+0x220>
 800ce08:	89ab      	ldrh	r3, [r5, #12]
 800ce0a:	059a      	lsls	r2, r3, #22
 800ce0c:	d402      	bmi.n	800ce14 <_vfiprintf_r+0x220>
 800ce0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce10:	f7ff f882 	bl	800bf18 <__retarget_lock_release_recursive>
 800ce14:	89ab      	ldrh	r3, [r5, #12]
 800ce16:	065b      	lsls	r3, r3, #25
 800ce18:	f53f af12 	bmi.w	800cc40 <_vfiprintf_r+0x4c>
 800ce1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce1e:	e711      	b.n	800cc44 <_vfiprintf_r+0x50>
 800ce20:	ab03      	add	r3, sp, #12
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	462a      	mov	r2, r5
 800ce26:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <_vfiprintf_r+0x258>)
 800ce28:	a904      	add	r1, sp, #16
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7fd fda8 	bl	800a980 <_printf_i>
 800ce30:	e7e4      	b.n	800cdfc <_vfiprintf_r+0x208>
 800ce32:	bf00      	nop
 800ce34:	0800e22c 	.word	0x0800e22c
 800ce38:	0800e24c 	.word	0x0800e24c
 800ce3c:	0800e20c 	.word	0x0800e20c
 800ce40:	0800e3c4 	.word	0x0800e3c4
 800ce44:	0800e3ce 	.word	0x0800e3ce
 800ce48:	0800a439 	.word	0x0800a439
 800ce4c:	0800cbcf 	.word	0x0800cbcf
 800ce50:	0800e3ca 	.word	0x0800e3ca

0800ce54 <_sbrk_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4d06      	ldr	r5, [pc, #24]	; (800ce70 <_sbrk_r+0x1c>)
 800ce58:	2300      	movs	r3, #0
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	4608      	mov	r0, r1
 800ce5e:	602b      	str	r3, [r5, #0]
 800ce60:	f7f6 f8a0 	bl	8002fa4 <_sbrk>
 800ce64:	1c43      	adds	r3, r0, #1
 800ce66:	d102      	bne.n	800ce6e <_sbrk_r+0x1a>
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	b103      	cbz	r3, 800ce6e <_sbrk_r+0x1a>
 800ce6c:	6023      	str	r3, [r4, #0]
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	20002ab4 	.word	0x20002ab4

0800ce74 <__sread>:
 800ce74:	b510      	push	{r4, lr}
 800ce76:	460c      	mov	r4, r1
 800ce78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7c:	f000 f92c 	bl	800d0d8 <_read_r>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	bfab      	itete	ge
 800ce84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce86:	89a3      	ldrhlt	r3, [r4, #12]
 800ce88:	181b      	addge	r3, r3, r0
 800ce8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce8e:	bfac      	ite	ge
 800ce90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce92:	81a3      	strhlt	r3, [r4, #12]
 800ce94:	bd10      	pop	{r4, pc}

0800ce96 <__swrite>:
 800ce96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9a:	461f      	mov	r7, r3
 800ce9c:	898b      	ldrh	r3, [r1, #12]
 800ce9e:	05db      	lsls	r3, r3, #23
 800cea0:	4605      	mov	r5, r0
 800cea2:	460c      	mov	r4, r1
 800cea4:	4616      	mov	r6, r2
 800cea6:	d505      	bpl.n	800ceb4 <__swrite+0x1e>
 800cea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceac:	2302      	movs	r3, #2
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f000 f898 	bl	800cfe4 <_lseek_r>
 800ceb4:	89a3      	ldrh	r3, [r4, #12]
 800ceb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cebe:	81a3      	strh	r3, [r4, #12]
 800cec0:	4632      	mov	r2, r6
 800cec2:	463b      	mov	r3, r7
 800cec4:	4628      	mov	r0, r5
 800cec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceca:	f000 b817 	b.w	800cefc <_write_r>

0800cece <__sseek>:
 800cece:	b510      	push	{r4, lr}
 800ced0:	460c      	mov	r4, r1
 800ced2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced6:	f000 f885 	bl	800cfe4 <_lseek_r>
 800ceda:	1c43      	adds	r3, r0, #1
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	bf15      	itete	ne
 800cee0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ceea:	81a3      	strheq	r3, [r4, #12]
 800ceec:	bf18      	it	ne
 800ceee:	81a3      	strhne	r3, [r4, #12]
 800cef0:	bd10      	pop	{r4, pc}

0800cef2 <__sclose>:
 800cef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef6:	f000 b831 	b.w	800cf5c <_close_r>
	...

0800cefc <_write_r>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	4d07      	ldr	r5, [pc, #28]	; (800cf1c <_write_r+0x20>)
 800cf00:	4604      	mov	r4, r0
 800cf02:	4608      	mov	r0, r1
 800cf04:	4611      	mov	r1, r2
 800cf06:	2200      	movs	r2, #0
 800cf08:	602a      	str	r2, [r5, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f7f5 fff9 	bl	8002f02 <_write>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_write_r+0x1e>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_write_r+0x1e>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	20002ab4 	.word	0x20002ab4

0800cf20 <__assert_func>:
 800cf20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf22:	4614      	mov	r4, r2
 800cf24:	461a      	mov	r2, r3
 800cf26:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <__assert_func+0x2c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	68d8      	ldr	r0, [r3, #12]
 800cf2e:	b14c      	cbz	r4, 800cf44 <__assert_func+0x24>
 800cf30:	4b07      	ldr	r3, [pc, #28]	; (800cf50 <__assert_func+0x30>)
 800cf32:	9100      	str	r1, [sp, #0]
 800cf34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf38:	4906      	ldr	r1, [pc, #24]	; (800cf54 <__assert_func+0x34>)
 800cf3a:	462b      	mov	r3, r5
 800cf3c:	f000 f81e 	bl	800cf7c <fiprintf>
 800cf40:	f000 f8e9 	bl	800d116 <abort>
 800cf44:	4b04      	ldr	r3, [pc, #16]	; (800cf58 <__assert_func+0x38>)
 800cf46:	461c      	mov	r4, r3
 800cf48:	e7f3      	b.n	800cf32 <__assert_func+0x12>
 800cf4a:	bf00      	nop
 800cf4c:	2000002c 	.word	0x2000002c
 800cf50:	0800e3d5 	.word	0x0800e3d5
 800cf54:	0800e3e2 	.word	0x0800e3e2
 800cf58:	0800e410 	.word	0x0800e410

0800cf5c <_close_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d06      	ldr	r5, [pc, #24]	; (800cf78 <_close_r+0x1c>)
 800cf60:	2300      	movs	r3, #0
 800cf62:	4604      	mov	r4, r0
 800cf64:	4608      	mov	r0, r1
 800cf66:	602b      	str	r3, [r5, #0]
 800cf68:	f7f5 ffe7 	bl	8002f3a <_close>
 800cf6c:	1c43      	adds	r3, r0, #1
 800cf6e:	d102      	bne.n	800cf76 <_close_r+0x1a>
 800cf70:	682b      	ldr	r3, [r5, #0]
 800cf72:	b103      	cbz	r3, 800cf76 <_close_r+0x1a>
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	20002ab4 	.word	0x20002ab4

0800cf7c <fiprintf>:
 800cf7c:	b40e      	push	{r1, r2, r3}
 800cf7e:	b503      	push	{r0, r1, lr}
 800cf80:	4601      	mov	r1, r0
 800cf82:	ab03      	add	r3, sp, #12
 800cf84:	4805      	ldr	r0, [pc, #20]	; (800cf9c <fiprintf+0x20>)
 800cf86:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf8a:	6800      	ldr	r0, [r0, #0]
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	f7ff fe31 	bl	800cbf4 <_vfiprintf_r>
 800cf92:	b002      	add	sp, #8
 800cf94:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf98:	b003      	add	sp, #12
 800cf9a:	4770      	bx	lr
 800cf9c:	2000002c 	.word	0x2000002c

0800cfa0 <_fstat_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d07      	ldr	r5, [pc, #28]	; (800cfc0 <_fstat_r+0x20>)
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	4611      	mov	r1, r2
 800cfac:	602b      	str	r3, [r5, #0]
 800cfae:	f7f5 ffd0 	bl	8002f52 <_fstat>
 800cfb2:	1c43      	adds	r3, r0, #1
 800cfb4:	d102      	bne.n	800cfbc <_fstat_r+0x1c>
 800cfb6:	682b      	ldr	r3, [r5, #0]
 800cfb8:	b103      	cbz	r3, 800cfbc <_fstat_r+0x1c>
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	bd38      	pop	{r3, r4, r5, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20002ab4 	.word	0x20002ab4

0800cfc4 <_isatty_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_isatty_r+0x1c>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f5 ffcf 	bl	8002f72 <_isatty>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_isatty_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_isatty_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	20002ab4 	.word	0x20002ab4

0800cfe4 <_lseek_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4d07      	ldr	r5, [pc, #28]	; (800d004 <_lseek_r+0x20>)
 800cfe8:	4604      	mov	r4, r0
 800cfea:	4608      	mov	r0, r1
 800cfec:	4611      	mov	r1, r2
 800cfee:	2200      	movs	r2, #0
 800cff0:	602a      	str	r2, [r5, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	f7f5 ffc8 	bl	8002f88 <_lseek>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_lseek_r+0x1e>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_lseek_r+0x1e>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	20002ab4 	.word	0x20002ab4

0800d008 <__ascii_mbtowc>:
 800d008:	b082      	sub	sp, #8
 800d00a:	b901      	cbnz	r1, 800d00e <__ascii_mbtowc+0x6>
 800d00c:	a901      	add	r1, sp, #4
 800d00e:	b142      	cbz	r2, 800d022 <__ascii_mbtowc+0x1a>
 800d010:	b14b      	cbz	r3, 800d026 <__ascii_mbtowc+0x1e>
 800d012:	7813      	ldrb	r3, [r2, #0]
 800d014:	600b      	str	r3, [r1, #0]
 800d016:	7812      	ldrb	r2, [r2, #0]
 800d018:	1e10      	subs	r0, r2, #0
 800d01a:	bf18      	it	ne
 800d01c:	2001      	movne	r0, #1
 800d01e:	b002      	add	sp, #8
 800d020:	4770      	bx	lr
 800d022:	4610      	mov	r0, r2
 800d024:	e7fb      	b.n	800d01e <__ascii_mbtowc+0x16>
 800d026:	f06f 0001 	mvn.w	r0, #1
 800d02a:	e7f8      	b.n	800d01e <__ascii_mbtowc+0x16>

0800d02c <memmove>:
 800d02c:	4288      	cmp	r0, r1
 800d02e:	b510      	push	{r4, lr}
 800d030:	eb01 0402 	add.w	r4, r1, r2
 800d034:	d902      	bls.n	800d03c <memmove+0x10>
 800d036:	4284      	cmp	r4, r0
 800d038:	4623      	mov	r3, r4
 800d03a:	d807      	bhi.n	800d04c <memmove+0x20>
 800d03c:	1e43      	subs	r3, r0, #1
 800d03e:	42a1      	cmp	r1, r4
 800d040:	d008      	beq.n	800d054 <memmove+0x28>
 800d042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d04a:	e7f8      	b.n	800d03e <memmove+0x12>
 800d04c:	4402      	add	r2, r0
 800d04e:	4601      	mov	r1, r0
 800d050:	428a      	cmp	r2, r1
 800d052:	d100      	bne.n	800d056 <memmove+0x2a>
 800d054:	bd10      	pop	{r4, pc}
 800d056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d05a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d05e:	e7f7      	b.n	800d050 <memmove+0x24>

0800d060 <__malloc_lock>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__malloc_lock+0x8>)
 800d062:	f7fe bf58 	b.w	800bf16 <__retarget_lock_acquire_recursive>
 800d066:	bf00      	nop
 800d068:	20002aa8 	.word	0x20002aa8

0800d06c <__malloc_unlock>:
 800d06c:	4801      	ldr	r0, [pc, #4]	; (800d074 <__malloc_unlock+0x8>)
 800d06e:	f7fe bf53 	b.w	800bf18 <__retarget_lock_release_recursive>
 800d072:	bf00      	nop
 800d074:	20002aa8 	.word	0x20002aa8

0800d078 <_realloc_r>:
 800d078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d07c:	4680      	mov	r8, r0
 800d07e:	4614      	mov	r4, r2
 800d080:	460e      	mov	r6, r1
 800d082:	b921      	cbnz	r1, 800d08e <_realloc_r+0x16>
 800d084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d088:	4611      	mov	r1, r2
 800d08a:	f7ff bbb9 	b.w	800c800 <_malloc_r>
 800d08e:	b92a      	cbnz	r2, 800d09c <_realloc_r+0x24>
 800d090:	f7ff fb4a 	bl	800c728 <_free_r>
 800d094:	4625      	mov	r5, r4
 800d096:	4628      	mov	r0, r5
 800d098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d09c:	f000 f842 	bl	800d124 <_malloc_usable_size_r>
 800d0a0:	4284      	cmp	r4, r0
 800d0a2:	4607      	mov	r7, r0
 800d0a4:	d802      	bhi.n	800d0ac <_realloc_r+0x34>
 800d0a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0aa:	d812      	bhi.n	800d0d2 <_realloc_r+0x5a>
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	f7ff fba6 	bl	800c800 <_malloc_r>
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0ed      	beq.n	800d096 <_realloc_r+0x1e>
 800d0ba:	42bc      	cmp	r4, r7
 800d0bc:	4622      	mov	r2, r4
 800d0be:	4631      	mov	r1, r6
 800d0c0:	bf28      	it	cs
 800d0c2:	463a      	movcs	r2, r7
 800d0c4:	f7fd f902 	bl	800a2cc <memcpy>
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	f7ff fb2c 	bl	800c728 <_free_r>
 800d0d0:	e7e1      	b.n	800d096 <_realloc_r+0x1e>
 800d0d2:	4635      	mov	r5, r6
 800d0d4:	e7df      	b.n	800d096 <_realloc_r+0x1e>
	...

0800d0d8 <_read_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	4d07      	ldr	r5, [pc, #28]	; (800d0f8 <_read_r+0x20>)
 800d0dc:	4604      	mov	r4, r0
 800d0de:	4608      	mov	r0, r1
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	602a      	str	r2, [r5, #0]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	f7f5 feee 	bl	8002ec8 <_read>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_read_r+0x1e>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_read_r+0x1e>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	20002ab4 	.word	0x20002ab4

0800d0fc <__ascii_wctomb>:
 800d0fc:	b149      	cbz	r1, 800d112 <__ascii_wctomb+0x16>
 800d0fe:	2aff      	cmp	r2, #255	; 0xff
 800d100:	bf85      	ittet	hi
 800d102:	238a      	movhi	r3, #138	; 0x8a
 800d104:	6003      	strhi	r3, [r0, #0]
 800d106:	700a      	strbls	r2, [r1, #0]
 800d108:	f04f 30ff 	movhi.w	r0, #4294967295
 800d10c:	bf98      	it	ls
 800d10e:	2001      	movls	r0, #1
 800d110:	4770      	bx	lr
 800d112:	4608      	mov	r0, r1
 800d114:	4770      	bx	lr

0800d116 <abort>:
 800d116:	b508      	push	{r3, lr}
 800d118:	2006      	movs	r0, #6
 800d11a:	f000 f833 	bl	800d184 <raise>
 800d11e:	2001      	movs	r0, #1
 800d120:	f7f5 fec8 	bl	8002eb4 <_exit>

0800d124 <_malloc_usable_size_r>:
 800d124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d128:	1f18      	subs	r0, r3, #4
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	bfbc      	itt	lt
 800d12e:	580b      	ldrlt	r3, [r1, r0]
 800d130:	18c0      	addlt	r0, r0, r3
 800d132:	4770      	bx	lr

0800d134 <_raise_r>:
 800d134:	291f      	cmp	r1, #31
 800d136:	b538      	push	{r3, r4, r5, lr}
 800d138:	4604      	mov	r4, r0
 800d13a:	460d      	mov	r5, r1
 800d13c:	d904      	bls.n	800d148 <_raise_r+0x14>
 800d13e:	2316      	movs	r3, #22
 800d140:	6003      	str	r3, [r0, #0]
 800d142:	f04f 30ff 	mov.w	r0, #4294967295
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d14a:	b112      	cbz	r2, 800d152 <_raise_r+0x1e>
 800d14c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d150:	b94b      	cbnz	r3, 800d166 <_raise_r+0x32>
 800d152:	4620      	mov	r0, r4
 800d154:	f000 f830 	bl	800d1b8 <_getpid_r>
 800d158:	462a      	mov	r2, r5
 800d15a:	4601      	mov	r1, r0
 800d15c:	4620      	mov	r0, r4
 800d15e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d162:	f000 b817 	b.w	800d194 <_kill_r>
 800d166:	2b01      	cmp	r3, #1
 800d168:	d00a      	beq.n	800d180 <_raise_r+0x4c>
 800d16a:	1c59      	adds	r1, r3, #1
 800d16c:	d103      	bne.n	800d176 <_raise_r+0x42>
 800d16e:	2316      	movs	r3, #22
 800d170:	6003      	str	r3, [r0, #0]
 800d172:	2001      	movs	r0, #1
 800d174:	e7e7      	b.n	800d146 <_raise_r+0x12>
 800d176:	2400      	movs	r4, #0
 800d178:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d17c:	4628      	mov	r0, r5
 800d17e:	4798      	blx	r3
 800d180:	2000      	movs	r0, #0
 800d182:	e7e0      	b.n	800d146 <_raise_r+0x12>

0800d184 <raise>:
 800d184:	4b02      	ldr	r3, [pc, #8]	; (800d190 <raise+0xc>)
 800d186:	4601      	mov	r1, r0
 800d188:	6818      	ldr	r0, [r3, #0]
 800d18a:	f7ff bfd3 	b.w	800d134 <_raise_r>
 800d18e:	bf00      	nop
 800d190:	2000002c 	.word	0x2000002c

0800d194 <_kill_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4d07      	ldr	r5, [pc, #28]	; (800d1b4 <_kill_r+0x20>)
 800d198:	2300      	movs	r3, #0
 800d19a:	4604      	mov	r4, r0
 800d19c:	4608      	mov	r0, r1
 800d19e:	4611      	mov	r1, r2
 800d1a0:	602b      	str	r3, [r5, #0]
 800d1a2:	f7f5 fe77 	bl	8002e94 <_kill>
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	d102      	bne.n	800d1b0 <_kill_r+0x1c>
 800d1aa:	682b      	ldr	r3, [r5, #0]
 800d1ac:	b103      	cbz	r3, 800d1b0 <_kill_r+0x1c>
 800d1ae:	6023      	str	r3, [r4, #0]
 800d1b0:	bd38      	pop	{r3, r4, r5, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20002ab4 	.word	0x20002ab4

0800d1b8 <_getpid_r>:
 800d1b8:	f7f5 be64 	b.w	8002e84 <_getpid>

0800d1bc <powf>:
 800d1bc:	b508      	push	{r3, lr}
 800d1be:	ed2d 8b04 	vpush	{d8-d9}
 800d1c2:	eeb0 8a60 	vmov.f32	s16, s1
 800d1c6:	eeb0 9a40 	vmov.f32	s18, s0
 800d1ca:	f000 f84f 	bl	800d26c <__ieee754_powf>
 800d1ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800d1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d6:	eef0 8a40 	vmov.f32	s17, s0
 800d1da:	d63e      	bvs.n	800d25a <powf+0x9e>
 800d1dc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e4:	d112      	bne.n	800d20c <powf+0x50>
 800d1e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ee:	d039      	beq.n	800d264 <powf+0xa8>
 800d1f0:	eeb0 0a48 	vmov.f32	s0, s16
 800d1f4:	f000 fb35 	bl	800d862 <finitef>
 800d1f8:	b378      	cbz	r0, 800d25a <powf+0x9e>
 800d1fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d202:	d52a      	bpl.n	800d25a <powf+0x9e>
 800d204:	f7fd f838 	bl	800a278 <__errno>
 800d208:	2322      	movs	r3, #34	; 0x22
 800d20a:	e014      	b.n	800d236 <powf+0x7a>
 800d20c:	f000 fb29 	bl	800d862 <finitef>
 800d210:	b998      	cbnz	r0, 800d23a <powf+0x7e>
 800d212:	eeb0 0a49 	vmov.f32	s0, s18
 800d216:	f000 fb24 	bl	800d862 <finitef>
 800d21a:	b170      	cbz	r0, 800d23a <powf+0x7e>
 800d21c:	eeb0 0a48 	vmov.f32	s0, s16
 800d220:	f000 fb1f 	bl	800d862 <finitef>
 800d224:	b148      	cbz	r0, 800d23a <powf+0x7e>
 800d226:	eef4 8a68 	vcmp.f32	s17, s17
 800d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22e:	d7e9      	bvc.n	800d204 <powf+0x48>
 800d230:	f7fd f822 	bl	800a278 <__errno>
 800d234:	2321      	movs	r3, #33	; 0x21
 800d236:	6003      	str	r3, [r0, #0]
 800d238:	e00f      	b.n	800d25a <powf+0x9e>
 800d23a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d242:	d10a      	bne.n	800d25a <powf+0x9e>
 800d244:	eeb0 0a49 	vmov.f32	s0, s18
 800d248:	f000 fb0b 	bl	800d862 <finitef>
 800d24c:	b128      	cbz	r0, 800d25a <powf+0x9e>
 800d24e:	eeb0 0a48 	vmov.f32	s0, s16
 800d252:	f000 fb06 	bl	800d862 <finitef>
 800d256:	2800      	cmp	r0, #0
 800d258:	d1d4      	bne.n	800d204 <powf+0x48>
 800d25a:	eeb0 0a68 	vmov.f32	s0, s17
 800d25e:	ecbd 8b04 	vpop	{d8-d9}
 800d262:	bd08      	pop	{r3, pc}
 800d264:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d268:	e7f7      	b.n	800d25a <powf+0x9e>
	...

0800d26c <__ieee754_powf>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	ee10 4a90 	vmov	r4, s1
 800d274:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800d278:	ed2d 8b02 	vpush	{d8}
 800d27c:	ee10 6a10 	vmov	r6, s0
 800d280:	eeb0 8a40 	vmov.f32	s16, s0
 800d284:	eef0 8a60 	vmov.f32	s17, s1
 800d288:	d10c      	bne.n	800d2a4 <__ieee754_powf+0x38>
 800d28a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800d28e:	0076      	lsls	r6, r6, #1
 800d290:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800d294:	f240 8296 	bls.w	800d7c4 <__ieee754_powf+0x558>
 800d298:	ee38 0a28 	vadd.f32	s0, s16, s17
 800d29c:	ecbd 8b02 	vpop	{d8}
 800d2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d2a8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d2ac:	dcf4      	bgt.n	800d298 <__ieee754_powf+0x2c>
 800d2ae:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800d2b2:	dd08      	ble.n	800d2c6 <__ieee754_powf+0x5a>
 800d2b4:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800d2b8:	d1ee      	bne.n	800d298 <__ieee754_powf+0x2c>
 800d2ba:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800d2be:	0064      	lsls	r4, r4, #1
 800d2c0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800d2c4:	e7e6      	b.n	800d294 <__ieee754_powf+0x28>
 800d2c6:	2e00      	cmp	r6, #0
 800d2c8:	da20      	bge.n	800d30c <__ieee754_powf+0xa0>
 800d2ca:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800d2ce:	da2d      	bge.n	800d32c <__ieee754_powf+0xc0>
 800d2d0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d2d4:	f2c0 827f 	blt.w	800d7d6 <__ieee754_powf+0x56a>
 800d2d8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800d2dc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d2e0:	fa48 f703 	asr.w	r7, r8, r3
 800d2e4:	fa07 f303 	lsl.w	r3, r7, r3
 800d2e8:	4543      	cmp	r3, r8
 800d2ea:	f040 8274 	bne.w	800d7d6 <__ieee754_powf+0x56a>
 800d2ee:	f007 0701 	and.w	r7, r7, #1
 800d2f2:	f1c7 0702 	rsb	r7, r7, #2
 800d2f6:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800d2fa:	d11f      	bne.n	800d33c <__ieee754_powf+0xd0>
 800d2fc:	2c00      	cmp	r4, #0
 800d2fe:	f280 8267 	bge.w	800d7d0 <__ieee754_powf+0x564>
 800d302:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d306:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d30a:	e7c7      	b.n	800d29c <__ieee754_powf+0x30>
 800d30c:	2700      	movs	r7, #0
 800d30e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800d312:	d1f0      	bne.n	800d2f6 <__ieee754_powf+0x8a>
 800d314:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800d318:	f000 8254 	beq.w	800d7c4 <__ieee754_powf+0x558>
 800d31c:	dd08      	ble.n	800d330 <__ieee754_powf+0xc4>
 800d31e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800d628 <__ieee754_powf+0x3bc>
 800d322:	2c00      	cmp	r4, #0
 800d324:	bfa8      	it	ge
 800d326:	eeb0 0a68 	vmovge.f32	s0, s17
 800d32a:	e7b7      	b.n	800d29c <__ieee754_powf+0x30>
 800d32c:	2702      	movs	r7, #2
 800d32e:	e7ee      	b.n	800d30e <__ieee754_powf+0xa2>
 800d330:	2c00      	cmp	r4, #0
 800d332:	f280 824a 	bge.w	800d7ca <__ieee754_powf+0x55e>
 800d336:	eeb1 0a68 	vneg.f32	s0, s17
 800d33a:	e7af      	b.n	800d29c <__ieee754_powf+0x30>
 800d33c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d340:	d102      	bne.n	800d348 <__ieee754_powf+0xdc>
 800d342:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d346:	e7a9      	b.n	800d29c <__ieee754_powf+0x30>
 800d348:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d34c:	eeb0 0a48 	vmov.f32	s0, s16
 800d350:	d107      	bne.n	800d362 <__ieee754_powf+0xf6>
 800d352:	2e00      	cmp	r6, #0
 800d354:	db05      	blt.n	800d362 <__ieee754_powf+0xf6>
 800d356:	ecbd 8b02 	vpop	{d8}
 800d35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d35e:	f000 ba53 	b.w	800d808 <__ieee754_sqrtf>
 800d362:	f000 fa77 	bl	800d854 <fabsf>
 800d366:	b125      	cbz	r5, 800d372 <__ieee754_powf+0x106>
 800d368:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800d36c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d370:	d116      	bne.n	800d3a0 <__ieee754_powf+0x134>
 800d372:	2c00      	cmp	r4, #0
 800d374:	bfbc      	itt	lt
 800d376:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d37a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d37e:	2e00      	cmp	r6, #0
 800d380:	da8c      	bge.n	800d29c <__ieee754_powf+0x30>
 800d382:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800d386:	ea55 0307 	orrs.w	r3, r5, r7
 800d38a:	d104      	bne.n	800d396 <__ieee754_powf+0x12a>
 800d38c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d390:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d394:	e782      	b.n	800d29c <__ieee754_powf+0x30>
 800d396:	2f01      	cmp	r7, #1
 800d398:	d180      	bne.n	800d29c <__ieee754_powf+0x30>
 800d39a:	eeb1 0a40 	vneg.f32	s0, s0
 800d39e:	e77d      	b.n	800d29c <__ieee754_powf+0x30>
 800d3a0:	0ff0      	lsrs	r0, r6, #31
 800d3a2:	3801      	subs	r0, #1
 800d3a4:	ea57 0300 	orrs.w	r3, r7, r0
 800d3a8:	d104      	bne.n	800d3b4 <__ieee754_powf+0x148>
 800d3aa:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d3ae:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d3b2:	e773      	b.n	800d29c <__ieee754_powf+0x30>
 800d3b4:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800d3b8:	dd74      	ble.n	800d4a4 <__ieee754_powf+0x238>
 800d3ba:	4b9c      	ldr	r3, [pc, #624]	; (800d62c <__ieee754_powf+0x3c0>)
 800d3bc:	429d      	cmp	r5, r3
 800d3be:	dc08      	bgt.n	800d3d2 <__ieee754_powf+0x166>
 800d3c0:	2c00      	cmp	r4, #0
 800d3c2:	da0b      	bge.n	800d3dc <__ieee754_powf+0x170>
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	ecbd 8b02 	vpop	{d8}
 800d3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ce:	f000 ba3b 	b.w	800d848 <__math_oflowf>
 800d3d2:	4b97      	ldr	r3, [pc, #604]	; (800d630 <__ieee754_powf+0x3c4>)
 800d3d4:	429d      	cmp	r5, r3
 800d3d6:	dd08      	ble.n	800d3ea <__ieee754_powf+0x17e>
 800d3d8:	2c00      	cmp	r4, #0
 800d3da:	dcf3      	bgt.n	800d3c4 <__ieee754_powf+0x158>
 800d3dc:	2000      	movs	r0, #0
 800d3de:	ecbd 8b02 	vpop	{d8}
 800d3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e6:	f000 ba29 	b.w	800d83c <__math_uflowf>
 800d3ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d3ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d3f2:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d634 <__ieee754_powf+0x3c8>
 800d3f6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d3fa:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d3fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d402:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d406:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d638 <__ieee754_powf+0x3cc>
 800d412:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800d416:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800d63c <__ieee754_powf+0x3d0>
 800d41a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d41e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d640 <__ieee754_powf+0x3d4>
 800d422:	eef0 6a67 	vmov.f32	s13, s15
 800d426:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d42a:	ee16 3a90 	vmov	r3, s13
 800d42e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d432:	f023 030f 	bic.w	r3, r3, #15
 800d436:	ee00 3a90 	vmov	s1, r3
 800d43a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800d43e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d442:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800d446:	f024 040f 	bic.w	r4, r4, #15
 800d44a:	ee07 4a10 	vmov	s14, r4
 800d44e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d452:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d456:	ee07 3a90 	vmov	s15, r3
 800d45a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d45e:	3f01      	subs	r7, #1
 800d460:	ea57 0200 	orrs.w	r2, r7, r0
 800d464:	ee07 4a10 	vmov	s14, r4
 800d468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d46c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d470:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d474:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d478:	ee17 4a10 	vmov	r4, s14
 800d47c:	bf08      	it	eq
 800d47e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d482:	2c00      	cmp	r4, #0
 800d484:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d488:	f340 817e 	ble.w	800d788 <__ieee754_powf+0x51c>
 800d48c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d490:	f340 80f8 	ble.w	800d684 <__ieee754_powf+0x418>
 800d494:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d49c:	bf4c      	ite	mi
 800d49e:	2001      	movmi	r0, #1
 800d4a0:	2000      	movpl	r0, #0
 800d4a2:	e790      	b.n	800d3c6 <__ieee754_powf+0x15a>
 800d4a4:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800d4a8:	bf01      	itttt	eq
 800d4aa:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800d644 <__ieee754_powf+0x3d8>
 800d4ae:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d4b2:	f06f 0217 	mvneq.w	r2, #23
 800d4b6:	ee17 5a90 	vmoveq	r5, s15
 800d4ba:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d4be:	bf18      	it	ne
 800d4c0:	2200      	movne	r2, #0
 800d4c2:	3b7f      	subs	r3, #127	; 0x7f
 800d4c4:	4413      	add	r3, r2
 800d4c6:	4a60      	ldr	r2, [pc, #384]	; (800d648 <__ieee754_powf+0x3dc>)
 800d4c8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800d4cc:	4295      	cmp	r5, r2
 800d4ce:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800d4d2:	dd06      	ble.n	800d4e2 <__ieee754_powf+0x276>
 800d4d4:	4a5d      	ldr	r2, [pc, #372]	; (800d64c <__ieee754_powf+0x3e0>)
 800d4d6:	4295      	cmp	r5, r2
 800d4d8:	f340 80a4 	ble.w	800d624 <__ieee754_powf+0x3b8>
 800d4dc:	3301      	adds	r3, #1
 800d4de:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d4e2:	2500      	movs	r5, #0
 800d4e4:	4a5a      	ldr	r2, [pc, #360]	; (800d650 <__ieee754_powf+0x3e4>)
 800d4e6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800d4ea:	ee07 1a90 	vmov	s15, r1
 800d4ee:	ed92 7a00 	vldr	s14, [r2]
 800d4f2:	4a58      	ldr	r2, [pc, #352]	; (800d654 <__ieee754_powf+0x3e8>)
 800d4f4:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d4f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d4fc:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d500:	1049      	asrs	r1, r1, #1
 800d502:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d506:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d50a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800d50e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d512:	ee06 1a10 	vmov	s12, r1
 800d516:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d51a:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d51e:	ee14 6a90 	vmov	r6, s9
 800d522:	4016      	ands	r6, r2
 800d524:	ee05 6a90 	vmov	s11, r6
 800d528:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d52c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d530:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d658 <__ieee754_powf+0x3ec>
 800d534:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d538:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d53c:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d540:	eddf 6a46 	vldr	s13, [pc, #280]	; 800d65c <__ieee754_powf+0x3f0>
 800d544:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d548:	eddf 6a45 	vldr	s13, [pc, #276]	; 800d660 <__ieee754_powf+0x3f4>
 800d54c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d550:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d634 <__ieee754_powf+0x3c8>
 800d554:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d558:	eddf 6a42 	vldr	s13, [pc, #264]	; 800d664 <__ieee754_powf+0x3f8>
 800d55c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d560:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d668 <__ieee754_powf+0x3fc>
 800d564:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d568:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d56c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d570:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d574:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d578:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d57c:	eef0 7a45 	vmov.f32	s15, s10
 800d580:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d588:	ee17 1a90 	vmov	r1, s15
 800d58c:	4011      	ands	r1, r2
 800d58e:	ee07 1a90 	vmov	s15, r1
 800d592:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d596:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d59a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d59e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d5a2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d5a6:	eeb0 6a47 	vmov.f32	s12, s14
 800d5aa:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d5ae:	ee16 1a10 	vmov	r1, s12
 800d5b2:	4011      	ands	r1, r2
 800d5b4:	ee06 1a90 	vmov	s13, r1
 800d5b8:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d5bc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d66c <__ieee754_powf+0x400>
 800d5c0:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800d670 <__ieee754_powf+0x404>
 800d5c4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d5c8:	ee06 1a10 	vmov	s12, r1
 800d5cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5d0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800d674 <__ieee754_powf+0x408>
 800d5d4:	4928      	ldr	r1, [pc, #160]	; (800d678 <__ieee754_powf+0x40c>)
 800d5d6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d5da:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800d5de:	edd1 7a00 	vldr	s15, [r1]
 800d5e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d5e6:	ee07 3a90 	vmov	s15, r3
 800d5ea:	4b24      	ldr	r3, [pc, #144]	; (800d67c <__ieee754_powf+0x410>)
 800d5ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d5f0:	eef0 7a47 	vmov.f32	s15, s14
 800d5f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d5f8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d5fc:	edd5 0a00 	vldr	s1, [r5]
 800d600:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d608:	ee17 3a90 	vmov	r3, s15
 800d60c:	4013      	ands	r3, r2
 800d60e:	ee07 3a90 	vmov	s15, r3
 800d612:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d616:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d61a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d61e:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d622:	e70e      	b.n	800d442 <__ieee754_powf+0x1d6>
 800d624:	2501      	movs	r5, #1
 800d626:	e75d      	b.n	800d4e4 <__ieee754_powf+0x278>
 800d628:	00000000 	.word	0x00000000
 800d62c:	3f7ffff3 	.word	0x3f7ffff3
 800d630:	3f800007 	.word	0x3f800007
 800d634:	3eaaaaab 	.word	0x3eaaaaab
 800d638:	3fb8aa3b 	.word	0x3fb8aa3b
 800d63c:	36eca570 	.word	0x36eca570
 800d640:	3fb8aa00 	.word	0x3fb8aa00
 800d644:	4b800000 	.word	0x4b800000
 800d648:	001cc471 	.word	0x001cc471
 800d64c:	005db3d6 	.word	0x005db3d6
 800d650:	0800e51c 	.word	0x0800e51c
 800d654:	fffff000 	.word	0xfffff000
 800d658:	3e6c3255 	.word	0x3e6c3255
 800d65c:	3e53f142 	.word	0x3e53f142
 800d660:	3e8ba305 	.word	0x3e8ba305
 800d664:	3edb6db7 	.word	0x3edb6db7
 800d668:	3f19999a 	.word	0x3f19999a
 800d66c:	3f76384f 	.word	0x3f76384f
 800d670:	3f763800 	.word	0x3f763800
 800d674:	369dc3a0 	.word	0x369dc3a0
 800d678:	0800e52c 	.word	0x0800e52c
 800d67c:	0800e524 	.word	0x0800e524
 800d680:	3338aa3c 	.word	0x3338aa3c
 800d684:	f040 8095 	bne.w	800d7b2 <__ieee754_powf+0x546>
 800d688:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d680 <__ieee754_powf+0x414>
 800d68c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d690:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d694:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d69c:	f73f aefa 	bgt.w	800d494 <__ieee754_powf+0x228>
 800d6a0:	15db      	asrs	r3, r3, #23
 800d6a2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d6a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d6aa:	4103      	asrs	r3, r0
 800d6ac:	4423      	add	r3, r4
 800d6ae:	494b      	ldr	r1, [pc, #300]	; (800d7dc <__ieee754_powf+0x570>)
 800d6b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d6b4:	3a7f      	subs	r2, #127	; 0x7f
 800d6b6:	4111      	asrs	r1, r2
 800d6b8:	ea23 0101 	bic.w	r1, r3, r1
 800d6bc:	ee07 1a10 	vmov	s14, r1
 800d6c0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d6c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d6c8:	f1c2 0217 	rsb	r2, r2, #23
 800d6cc:	4110      	asrs	r0, r2
 800d6ce:	2c00      	cmp	r4, #0
 800d6d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6d4:	bfb8      	it	lt
 800d6d6:	4240      	neglt	r0, r0
 800d6d8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d6dc:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800d7e0 <__ieee754_powf+0x574>
 800d6e0:	eddf 6a40 	vldr	s13, [pc, #256]	; 800d7e4 <__ieee754_powf+0x578>
 800d6e4:	ee17 3a10 	vmov	r3, s14
 800d6e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d6ec:	f023 030f 	bic.w	r3, r3, #15
 800d6f0:	ee07 3a10 	vmov	s14, r3
 800d6f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6f8:	ee27 0a00 	vmul.f32	s0, s14, s0
 800d6fc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d700:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d7e8 <__ieee754_powf+0x57c>
 800d704:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800d708:	eef0 7a40 	vmov.f32	s15, s0
 800d70c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d710:	eeb0 6a67 	vmov.f32	s12, s15
 800d714:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d718:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d71c:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d720:	eddf 6a32 	vldr	s13, [pc, #200]	; 800d7ec <__ieee754_powf+0x580>
 800d724:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800d7f0 <__ieee754_powf+0x584>
 800d728:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d72c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800d7f4 <__ieee754_powf+0x588>
 800d730:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d734:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d7f8 <__ieee754_powf+0x58c>
 800d738:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d73c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d7fc <__ieee754_powf+0x590>
 800d740:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d744:	eef0 6a67 	vmov.f32	s13, s15
 800d748:	eee6 6a47 	vfms.f32	s13, s12, s14
 800d74c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d750:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800d754:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d758:	eea7 0a80 	vfma.f32	s0, s15, s0
 800d75c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d760:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d764:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d768:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d76c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d770:	ee10 3a10 	vmov	r3, s0
 800d774:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d77c:	da1f      	bge.n	800d7be <__ieee754_powf+0x552>
 800d77e:	f000 f87d 	bl	800d87c <scalbnf>
 800d782:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d786:	e589      	b.n	800d29c <__ieee754_powf+0x30>
 800d788:	4a1d      	ldr	r2, [pc, #116]	; (800d800 <__ieee754_powf+0x594>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	dd07      	ble.n	800d79e <__ieee754_powf+0x532>
 800d78e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d796:	bf4c      	ite	mi
 800d798:	2001      	movmi	r0, #1
 800d79a:	2000      	movpl	r0, #0
 800d79c:	e61f      	b.n	800d3de <__ieee754_powf+0x172>
 800d79e:	d108      	bne.n	800d7b2 <__ieee754_powf+0x546>
 800d7a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d7a4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ac:	f6ff af78 	blt.w	800d6a0 <__ieee754_powf+0x434>
 800d7b0:	e7ed      	b.n	800d78e <__ieee754_powf+0x522>
 800d7b2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d7b6:	f73f af73 	bgt.w	800d6a0 <__ieee754_powf+0x434>
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	e78c      	b.n	800d6d8 <__ieee754_powf+0x46c>
 800d7be:	ee00 3a10 	vmov	s0, r3
 800d7c2:	e7de      	b.n	800d782 <__ieee754_powf+0x516>
 800d7c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d7c8:	e568      	b.n	800d29c <__ieee754_powf+0x30>
 800d7ca:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d804 <__ieee754_powf+0x598>
 800d7ce:	e565      	b.n	800d29c <__ieee754_powf+0x30>
 800d7d0:	eeb0 0a48 	vmov.f32	s0, s16
 800d7d4:	e562      	b.n	800d29c <__ieee754_powf+0x30>
 800d7d6:	2700      	movs	r7, #0
 800d7d8:	e58d      	b.n	800d2f6 <__ieee754_powf+0x8a>
 800d7da:	bf00      	nop
 800d7dc:	007fffff 	.word	0x007fffff
 800d7e0:	35bfbe8c 	.word	0x35bfbe8c
 800d7e4:	3f317200 	.word	0x3f317200
 800d7e8:	3f317218 	.word	0x3f317218
 800d7ec:	b5ddea0e 	.word	0xb5ddea0e
 800d7f0:	3331bb4c 	.word	0x3331bb4c
 800d7f4:	388ab355 	.word	0x388ab355
 800d7f8:	bb360b61 	.word	0xbb360b61
 800d7fc:	3e2aaaab 	.word	0x3e2aaaab
 800d800:	43160000 	.word	0x43160000
 800d804:	00000000 	.word	0x00000000

0800d808 <__ieee754_sqrtf>:
 800d808:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d80c:	4770      	bx	lr

0800d80e <with_errnof>:
 800d80e:	b513      	push	{r0, r1, r4, lr}
 800d810:	4604      	mov	r4, r0
 800d812:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d816:	f7fc fd2f 	bl	800a278 <__errno>
 800d81a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d81e:	6004      	str	r4, [r0, #0]
 800d820:	b002      	add	sp, #8
 800d822:	bd10      	pop	{r4, pc}

0800d824 <xflowf>:
 800d824:	b130      	cbz	r0, 800d834 <xflowf+0x10>
 800d826:	eef1 7a40 	vneg.f32	s15, s0
 800d82a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d82e:	2022      	movs	r0, #34	; 0x22
 800d830:	f7ff bfed 	b.w	800d80e <with_errnof>
 800d834:	eef0 7a40 	vmov.f32	s15, s0
 800d838:	e7f7      	b.n	800d82a <xflowf+0x6>
	...

0800d83c <__math_uflowf>:
 800d83c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d844 <__math_uflowf+0x8>
 800d840:	f7ff bff0 	b.w	800d824 <xflowf>
 800d844:	10000000 	.word	0x10000000

0800d848 <__math_oflowf>:
 800d848:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d850 <__math_oflowf+0x8>
 800d84c:	f7ff bfea 	b.w	800d824 <xflowf>
 800d850:	70000000 	.word	0x70000000

0800d854 <fabsf>:
 800d854:	ee10 3a10 	vmov	r3, s0
 800d858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d85c:	ee00 3a10 	vmov	s0, r3
 800d860:	4770      	bx	lr

0800d862 <finitef>:
 800d862:	b082      	sub	sp, #8
 800d864:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d868:	9801      	ldr	r0, [sp, #4]
 800d86a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d86e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d872:	bfac      	ite	ge
 800d874:	2000      	movge	r0, #0
 800d876:	2001      	movlt	r0, #1
 800d878:	b002      	add	sp, #8
 800d87a:	4770      	bx	lr

0800d87c <scalbnf>:
 800d87c:	ee10 3a10 	vmov	r3, s0
 800d880:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d884:	d025      	beq.n	800d8d2 <scalbnf+0x56>
 800d886:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d88a:	d302      	bcc.n	800d892 <scalbnf+0x16>
 800d88c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d890:	4770      	bx	lr
 800d892:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d896:	d122      	bne.n	800d8de <scalbnf+0x62>
 800d898:	4b2a      	ldr	r3, [pc, #168]	; (800d944 <scalbnf+0xc8>)
 800d89a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d948 <scalbnf+0xcc>
 800d89e:	4298      	cmp	r0, r3
 800d8a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d8a4:	db16      	blt.n	800d8d4 <scalbnf+0x58>
 800d8a6:	ee10 3a10 	vmov	r3, s0
 800d8aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d8ae:	3a19      	subs	r2, #25
 800d8b0:	4402      	add	r2, r0
 800d8b2:	2afe      	cmp	r2, #254	; 0xfe
 800d8b4:	dd15      	ble.n	800d8e2 <scalbnf+0x66>
 800d8b6:	ee10 3a10 	vmov	r3, s0
 800d8ba:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d94c <scalbnf+0xd0>
 800d8be:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d950 <scalbnf+0xd4>
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	eeb0 7a67 	vmov.f32	s14, s15
 800d8c8:	bfb8      	it	lt
 800d8ca:	eef0 7a66 	vmovlt.f32	s15, s13
 800d8ce:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d8d2:	4770      	bx	lr
 800d8d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d954 <scalbnf+0xd8>
 800d8d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d8dc:	4770      	bx	lr
 800d8de:	0dd2      	lsrs	r2, r2, #23
 800d8e0:	e7e6      	b.n	800d8b0 <scalbnf+0x34>
 800d8e2:	2a00      	cmp	r2, #0
 800d8e4:	dd06      	ble.n	800d8f4 <scalbnf+0x78>
 800d8e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d8ee:	ee00 3a10 	vmov	s0, r3
 800d8f2:	4770      	bx	lr
 800d8f4:	f112 0f16 	cmn.w	r2, #22
 800d8f8:	da1a      	bge.n	800d930 <scalbnf+0xb4>
 800d8fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d8fe:	4298      	cmp	r0, r3
 800d900:	ee10 3a10 	vmov	r3, s0
 800d904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d908:	dd0a      	ble.n	800d920 <scalbnf+0xa4>
 800d90a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d94c <scalbnf+0xd0>
 800d90e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d950 <scalbnf+0xd4>
 800d912:	eef0 7a40 	vmov.f32	s15, s0
 800d916:	2b00      	cmp	r3, #0
 800d918:	bf18      	it	ne
 800d91a:	eeb0 0a47 	vmovne.f32	s0, s14
 800d91e:	e7db      	b.n	800d8d8 <scalbnf+0x5c>
 800d920:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d954 <scalbnf+0xd8>
 800d924:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d958 <scalbnf+0xdc>
 800d928:	eef0 7a40 	vmov.f32	s15, s0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	e7f3      	b.n	800d918 <scalbnf+0x9c>
 800d930:	3219      	adds	r2, #25
 800d932:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d936:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d93a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d95c <scalbnf+0xe0>
 800d93e:	ee07 3a10 	vmov	s14, r3
 800d942:	e7c4      	b.n	800d8ce <scalbnf+0x52>
 800d944:	ffff3cb0 	.word	0xffff3cb0
 800d948:	4c000000 	.word	0x4c000000
 800d94c:	7149f2ca 	.word	0x7149f2ca
 800d950:	f149f2ca 	.word	0xf149f2ca
 800d954:	0da24260 	.word	0x0da24260
 800d958:	8da24260 	.word	0x8da24260
 800d95c:	33000000 	.word	0x33000000

0800d960 <_init>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	bf00      	nop
 800d964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d966:	bc08      	pop	{r3}
 800d968:	469e      	mov	lr, r3
 800d96a:	4770      	bx	lr

0800d96c <_fini>:
 800d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96e:	bf00      	nop
 800d970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d972:	bc08      	pop	{r3}
 800d974:	469e      	mov	lr, r3
 800d976:	4770      	bx	lr
